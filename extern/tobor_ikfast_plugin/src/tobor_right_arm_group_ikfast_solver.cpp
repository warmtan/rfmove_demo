/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004b generated on 2022-07-01 12:21:24.902462
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004b);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.03) // 5D IK has some crazy degenerate cases, but can rely on jacobian refinment to make better, just need good starting point
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

template <typename T> struct ComplexLess
{
    bool operator()(const complex<T>& lhs, const complex<T>& rhs) const
    {
        if (real(lhs) < real(rhs)) {
            return true;
        }
        if (real(lhs) > real(rhs)) {
            return false;
        }
        return imag(lhs) < imag(rhs);
    }
};

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[1]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKsin(j[6]);
x11=IKsin(j[5]);
x12=IKcos(j[5]);
x13=IKcos(j[6]);
x14=((0.365572010101202)*x2);
x15=((0.300908770238559)*x9);
x16=((1.0)*x2);
x17=((0.300908770238559)*x8);
x18=((1.0)*x5);
x19=((1.0)*x6);
x20=((1.0)*x4);
x21=((0.300908770238559)*x5);
x22=((0.365572010101202)*x4);
x23=((1.0)*x11);
x24=((1.0)*x12);
x25=((0.365572010101202)*x6);
x26=((0.300908770238559)*x6);
x27=(x0*x1);
x28=(x5*x7);
x29=(x3*x7);
x30=(x4*x7);
x31=(x1*x3);
x32=(x6*x7);
x33=(x0*x7);
x34=(x20*x3);
x35=(x1*x19);
x36=(x18*x33);
x37=(x19*x33);
x38=(x18*x29);
x39=(x19*x29);
x40=((((-1.0)*x34))+((x2*x27)));
x41=(((x0*x4))+((x2*x31)));
x42=(((x0*x2))+(((-1.0)*x20*x31)));
x43=((((-1.0)*x35))+((x2*x28)));
x44=((((-1.0)*x16*x27))+x34);
x45=((((-1.0)*x16*x3))+(((-1.0)*x20*x27)));
x46=((((-1.0)*x0*x20))+(((-1.0)*x16*x31)));
x47=(((x1*x18))+((x16*x32)));
x48=((-1.0)*x47);
x49=(x11*x43);
x50=(x40*x6);
x51=(x46*x5);
x52=((((-1.0)*x36))+x50);
x53=((((-1.0)*x38))+((x41*x6)));
x54=((((-1.0)*x37))+((x44*x5)));
x55=((((-1.0)*x39))+x51);
x56=(((x47*x9))+((x30*x8)));
x57=(((x30*x9))+((x48*x8)));
x58=(x11*x55);
x59=(((x53*x8))+((x42*x9)));
x60=(((x42*x8))+((x9*(((((-1.0)*x19*x41))+x38)))));
x61=(((x52*x8))+((x45*x9)));
x62=(x12*x59);
x63=(((x9*((x36+(((-1.0)*x50))))))+((x45*x8)));
eerot[0]=(((x10*x63))+((x13*((((x12*x61))+((x11*x54)))))));
eerot[1]=(((x13*x63))+((x10*(((((-1.0)*x23*x54))+(((-1.0)*x24*x61)))))));
eerot[2]=(((x12*(((((-1.0)*x18*x44))+x37))))+((x11*x61)));
eetrans[0]=(((x5*((((x14*x27))+(((-1.0)*x22*x3))))))+(((0.392938370078201)*x33))+((x11*((((x17*x52))+((x15*x45))))))+((x12*((((x26*x33))+(((-1.0)*x21*x44))))))+((x25*x33)));
eerot[3]=(((x13*((x58+x62))))+((x10*x60)));
eerot[4]=(((x13*x60))+((x10*(((((-1.0)*x23*x55))+(((-1.0)*x24*x59)))))));
eerot[5]=(((x12*(((((-1.0)*x18*x46))+x39))))+((x11*x59)));
eetrans[1]=(((x11*((((x17*x53))+((x15*x42))))))+((x12*(((((-1.0)*x21*x46))+((x26*x29))))))+((x5*((((x0*x22))+((x14*x31))))))+(((0.392938370078201)*x29))+((x25*x29)));
eerot[6]=(((x13*((((x12*x57))+x49))))+((x10*x56)));
eerot[7]=(((x13*x56))+((x10*(((((-1.0)*x23*x43))+(((-1.0)*x24*x57)))))));
eerot[8]=(((x11*x57))+((x12*(((((-1.0)*x16*x28))+x35)))));
eetrans[2]=((0.342604869774656)+((x1*x25))+(((0.392938370078201)*x1))+((x11*((((x17*x48))+((x15*x30))))))+(((-1.0)*x14*x28))+((x12*((((x1*x26))+(((-1.0)*x2*x21*x7)))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API const int* GetFreeIndices() { static const int freeindices[] = {2}; return freeindices; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j12,cj12,sj12,htj12,j12mul,j13,cj13,sj13,htj13,j13mul,j15,cj15,sj15,htj15,j15mul,j16,cj16,sj16,htj16,j16mul,j17,cj17,sj17,htj17,j17mul,j18,cj18,sj18,htj18,j18mul,j14,cj14,sj14,htj14,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij12[2], _nj12,_ij13[2], _nj13,_ij15[2], _nj15,_ij16[2], _nj16,_ij17[2], _nj17,_ij18[2], _nj18,_ij14[2], _nj14;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j12=numeric_limits<IkReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1; j13=numeric_limits<IkReal>::quiet_NaN(); _ij13[0] = -1; _ij13[1] = -1; _nj13 = -1; j15=numeric_limits<IkReal>::quiet_NaN(); _ij15[0] = -1; _ij15[1] = -1; _nj15 = -1; j16=numeric_limits<IkReal>::quiet_NaN(); _ij16[0] = -1; _ij16[1] = -1; _nj16 = -1; j17=numeric_limits<IkReal>::quiet_NaN(); _ij17[0] = -1; _ij17[1] = -1; _nj17 = -1; j18=numeric_limits<IkReal>::quiet_NaN(); _ij18[0] = -1; _ij18[1] = -1; _nj18 = -1;  _ij14[0] = -1; _ij14[1] = -1; _nj14 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j14=pfree[0]; cj14=cos(pfree[0]); sj14=sin(pfree[0]), htj14=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.300908770238559)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=(py+(((-0.300908770238559)*r12)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.342604869774656)+pz+(((-0.300908770238559)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x64=((1.0)*px);
IkReal x65=((1.0)*pz);
IkReal x66=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x66))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x65)));
rxp0_2=((((-1.0)*r10*x64))+((py*r00)));
rxp1_0=((((-1.0)*r21*x66))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x65)));
rxp1_2=((((-1.0)*r11*x64))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x66)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x65)));
rxp2_2=((((-1.0)*r12*x64))+((py*r02)));
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
cj15array[0]=((-1.00260679391769)+(((3.48074836864103)*pp)));
if( cj15array[0] >= -1-IKFAST_SINCOS_THRESH && cj15array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j15valid[0] = j15valid[1] = true;
    j15array[0] = IKacos(cj15array[0]);
    sj15array[0] = IKsin(j15array[0]);
    cj15array[1] = cj15array[0];
    j15array[1] = -j15array[0];
    sj15array[1] = -sj15array[0];
}
else if( isnan(cj15array[0]) )
{
    // probably any value will work
    j15valid[0] = true;
    cj15array[0] = 1; sj15array[0] = 0; j15array[0] = 0;
}
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

{
IkReal j12eval[2];
j12eval[0]=((px*px)+(py*py));
j12eval[1]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal j13eval[2];
j13eval[0]=((1.15532189853532)+(((cj14*cj14)*(sj15*sj15)))+(cj15*cj15)+(((2.14971802665867)*cj15)));
j13eval[1]=((IKabs((cj14*sj15)))+(((2.73543918125233)*(IKabs(((-0.392938370078201)+(((-0.365572010101202)*cj15))))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
IkReal x67=py*py;
IkReal x68=sj14*sj14;
IkReal x69=cj14*cj14;
IkReal x70=px*px;
IkReal x71=py*py*py*py;
IkReal x72=cj14*cj14*cj14*cj14;
IkReal x73=sj14*sj14*sj14*sj14;
IkReal x74=((1.0)*px*py);
IkReal x75=(x67*x70);
IkReal x76=((2.0)*x68*x69);
j12eval[0]=((IKabs(((((-1.0)*x69*x74))+(((-1.0)*x68*x74)))))+(IKabs((((x67*x68))+((x67*x69))))));
j12eval[1]=(((x75*x76))+((x72*x75))+((x73*x75))+((x71*x76))+((x71*x72))+((x71*x73)));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj14)))))+(IKabs(cj14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[2];
sj14=1.0;
cj14=0;
j14=1.57079633263667;
j12eval[0]=((px*px)+(py*py));
j12eval[1]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
sj14=1.0;
cj14=0;
j14=1.57079633263667;
j13eval[0]=((-1.07485901332934)+(((-1.0)*cj15)));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j12, j13]

} else
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
CheckValue<IkReal> x77=IKPowWithIntegerCheck(((-0.392938370078201)+(((-0.365572010101202)*cj15))),-1);
if(!x77.valid){
continue;
}
cj13array[0]=((-1.0)*pz*(x77.value));
if( cj13array[0] >= -1-IKFAST_SINCOS_THRESH && cj13array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j13valid[0] = j13valid[1] = true;
    j13array[0] = IKacos(cj13array[0]);
    sj13array[0] = IKsin(j13array[0]);
    cj13array[1] = cj13array[0];
    j13array[1] = -j13array[0];
    sj13array[1] = -sj13array[0];
}
else if( isnan(cj13array[0]) )
{
    // probably any value will work
    j13valid[0] = true;
    cj13array[0] = 1; sj13array[0] = 0; j13array[0] = 0;
}
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
IkReal j12eval[3];
sj14=1.0;
cj14=0;
j14=1.57079633263667;
IkReal x78=pz*pz;
IkReal x79=(cj13*pp);
IkReal x80=(cj13*x78);
IkReal x81=((32389191142403.0)*cj13*sj15);
IkReal x82=((88598662500000.0)*pz*sj13);
j12eval[0]=(x79+(((-1.0)*x80)));
j12eval[1]=((IKabs((((py*x82))+(((-1.0)*px*x81)))))+(IKabs((((py*x81))+((px*x82))))));
j12eval[2]=IKsign(((((88598662500000.0)*x79))+(((-88598662500000.0)*x80))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
sj14=1.0;
cj14=0;
j14=1.57079633263667;
IkReal x83=pz*pz;
IkReal x84=(py*sj13);
IkReal x85=((32389191142403.0)*px);
j12eval[0]=(pp+(((-1.0)*x83)));
j12eval[1]=((IKabs(((((34813814033858.6)*x84))+(((32389191142403.0)*cj15*x84))+(((-1.0)*sj15*x85)))))+(IKabs(((((32389191142403.0)*py*sj15))+((cj15*sj13*x85))+(((34813814033858.6)*px*sj13))))));
j12eval[2]=IKsign(((((-88598662500000.0)*x83))+(((88598662500000.0)*pp))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
sj14=1.0;
cj14=0;
j14=1.57079633263667;
IkReal x86=pz*pz;
IkReal x87=((32389191142403.0)*py);
IkReal x88=(pp*sj13);
IkReal x89=(sj13*sj15);
IkReal x90=((32389191142403.0)*px);
IkReal x91=((88598662500000.0)*cj13*pz);
IkReal x92=(sj13*x86);
j12eval[0]=(x88+(((-1.0)*x92)));
j12eval[1]=((IKabs(((((34813814033858.6)*py))+((cj15*x87))+(((-1.0)*py*x91))+(((-1.0)*x89*x90)))))+(IKabs(((((34813814033858.6)*px))+((cj15*x90))+(((-1.0)*px*x91))+((x87*x89))))));
j12eval[2]=IKsign(((((88598662500000.0)*x88))+(((-88598662500000.0)*x92))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[4];
sj14=1.0;
cj14=0;
j14=1.57079633263667;
sj13=0;
cj13=1.0;
j13=0;
IkReal x93=pz*pz;
j12eval[0]=((((-1.0)*pp))+x93);
j12eval[1]=1.04905970285912e+27;
j12eval[2]=sj15;
j12eval[3]=IKsign(((((88598662500000.0)*x93))+(((-88598662500000.0)*pp))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  || IKabs(j12eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
sj14=1.0;
cj14=0;
j14=1.57079633263667;
sj13=0;
cj13=1.0;
j13=0;
sj15=0;
cj15=1.0;
j15=0;
j12eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x95 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x95.valid){
continue;
}
IkReal x94=x95.value;
j12array[0]=((-1.0)*x94);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x94)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j12))))+(((-1.0)*py*(IKsin(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
sj14=1.0;
cj14=0;
j14=1.57079633263667;
sj13=0;
cj13=1.0;
j13=0;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j12eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x667 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x667.valid){
continue;
}
IkReal x666=x667.value;
j12array[0]=((-1.0)*x666);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x666)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j12))))+(((-1.0)*py*(IKsin(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x668 = IKatan2WithCheck(IkReal(((32389191142403.0)*px*sj15)),IkReal(((-32389191142403.0)*py*sj15)),IKFAST_ATAN2_MAGTHRESH);
if(!x668.valid){
continue;
}
CheckValue<IkReal> x669=IKPowWithIntegerCheck(IKsign(((((-88598662500000.0)*pp))+(((88598662500000.0)*(pz*pz))))),-1);
if(!x669.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x668.value)+(((1.5707963267949)*(x669.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x670=IKsin(j12);
IkReal x671=IKcos(j12);
IkReal x672=((1.0)*py);
evalcond[0]=((((-1.0)*px*x671))+(((-1.0)*x670*x672)));
evalcond[1]=((((-1.0)*x671*x672))+(((0.365572010101202)*sj15))+((px*x670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[4];
sj14=1.0;
cj14=0;
j14=1.57079633263667;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x673=pz*pz;
j12eval[0]=((((-1.0)*pp))+x673);
j12eval[1]=1.04905970285912e+27;
j12eval[2]=sj15;
j12eval[3]=IKsign(((((-88598662500000.0)*pp))+(((88598662500000.0)*x673))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  || IKabs(j12eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
sj14=1.0;
cj14=0;
j14=1.57079633263667;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=0;
cj15=1.0;
j15=0;
j12eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x675 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x675.valid){
continue;
}
IkReal x674=x675.value;
j12array[0]=((-1.0)*x674);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x674)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j12))))+(((-1.0)*py*(IKsin(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
sj14=1.0;
cj14=0;
j14=1.57079633263667;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j12eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x677 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x677.valid){
continue;
}
IkReal x676=x677.value;
j12array[0]=((-1.0)*x676);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x676)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j12))))+(((-1.0)*py*(IKsin(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x678 = IKatan2WithCheck(IkReal(((32389191142403.0)*px*sj15)),IkReal(((-32389191142403.0)*py*sj15)),IKFAST_ATAN2_MAGTHRESH);
if(!x678.valid){
continue;
}
CheckValue<IkReal> x679=IKPowWithIntegerCheck(IKsign(((((-88598662500000.0)*pp))+(((88598662500000.0)*(pz*pz))))),-1);
if(!x679.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x678.value)+(((1.5707963267949)*(x679.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x680=IKsin(j12);
IkReal x681=IKcos(j12);
IkReal x682=((1.0)*py);
evalcond[0]=((((-1.0)*x680*x682))+(((-1.0)*px*x681)));
evalcond[1]=(((px*x680))+(((-1.0)*x681*x682))+(((0.365572010101202)*sj15)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
sj14=1.0;
cj14=0;
j14=1.57079633263667;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x683=pz*pz;
IkReal x684=((32389191142403.0)*cj15);
IkReal x685=((32389191142403.0)*sj15);
j12eval[0]=((((-1.0)*pp))+x683);
j12eval[1]=((IKabs((((px*x685))+(((-34813814033858.6)*py))+(((-1.0)*py*x684)))))+(IKabs(((((-34813814033858.6)*px))+(((-1.0)*px*x684))+(((-1.0)*py*x685))))));
j12eval[2]=IKsign(((((88598662500000.0)*x683))+(((-88598662500000.0)*pp))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
sj14=1.0;
cj14=0;
j14=1.57079633263667;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x686=pz*pz;
IkReal x687=((1.11282777406866e+28)*pp);
IkReal x688=((3.1970934299486e+27)*sj15);
j12eval[0]=((((-1.0)*pp))+x686);
j12eval[1]=((IKabs(((((-2.30997095980183e+26)*py))+((px*x688))+(((-1.0)*py*x687)))))+(IKabs(((((-2.30997095980183e+26)*px))+(((-1.0)*px*x687))+(((-1.0)*py*x688))))));
j12eval[2]=IKsign(((((-8.7454546344058e+27)*pp))+(((8.7454546344058e+27)*x686))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[4], cj12array[4], sj12array[4];
bool j12valid[4]={false};
_nj12 = 4;
j12array[0]=0;
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=1.5707963267949;
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
j12array[2]=3.14159265358979;
sj12array[2]=IKsin(j12array[2]);
cj12array[2]=IKcos(j12array[2]);
j12array[3]=-1.5707963267949;
sj12array[3]=IKsin(j12array[3]);
cj12array[3]=IKcos(j12array[3]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
if( j12array[2] > IKPI )
{
    j12array[2]-=IK2PI;
}
else if( j12array[2] < -IKPI )
{    j12array[2]+=IK2PI;
}
j12valid[2] = true;
if( j12array[3] > IKPI )
{
    j12array[3]-=IK2PI;
}
else if( j12array[3] < -IKPI )
{    j12array[3]+=IK2PI;
}
j12valid[3] = true;
for(int ij12 = 0; ij12 < 4; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 4; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x689=((1.11282777406866e+28)*pp);
IkReal x690=((3.1970934299486e+27)*sj15);
CheckValue<IkReal> x691=IKPowWithIntegerCheck(IKsign(((((8.7454546344058e+27)*(pz*pz)))+(((-8.7454546344058e+27)*pp)))),-1);
if(!x691.valid){
continue;
}
CheckValue<IkReal> x692 = IKatan2WithCheck(IkReal(((((-2.30997095980183e+26)*py))+((px*x690))+(((-1.0)*py*x689)))),IkReal(((((-2.30997095980183e+26)*px))+(((-1.0)*px*x689))+(((-1.0)*py*x690)))),IKFAST_ATAN2_MAGTHRESH);
if(!x692.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x691.value)))+(x692.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[3];
IkReal x693=IKcos(j12);
IkReal x694=IKsin(j12);
IkReal x695=(py*x694);
IkReal x696=(px*x693);
evalcond[0]=((((-1.0)*py*x693))+((px*x694))+(((0.365572010101202)*sj15)));
evalcond[1]=((-0.392938370078201)+(((-0.365572010101202)*cj15))+x695+x696);
evalcond[2]=((-0.0207576681102795)+(((0.785876740156401)*x695))+(((0.785876740156401)*x696))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x697=((32389191142403.0)*cj15);
IkReal x698=((32389191142403.0)*sj15);
CheckValue<IkReal> x699=IKPowWithIntegerCheck(IKsign(((((-88598662500000.0)*pp))+(((88598662500000.0)*(pz*pz))))),-1);
if(!x699.valid){
continue;
}
CheckValue<IkReal> x700 = IKatan2WithCheck(IkReal(((((-34813814033858.6)*py))+((px*x698))+(((-1.0)*py*x697)))),IkReal(((((-34813814033858.6)*px))+(((-1.0)*px*x697))+(((-1.0)*py*x698)))),IKFAST_ATAN2_MAGTHRESH);
if(!x700.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x699.value)))+(x700.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[3];
IkReal x701=IKcos(j12);
IkReal x702=IKsin(j12);
IkReal x703=(py*x702);
IkReal x704=(px*x701);
evalcond[0]=((((-1.0)*py*x701))+((px*x702))+(((0.365572010101202)*sj15)));
evalcond[1]=((-0.392938370078201)+(((-0.365572010101202)*cj15))+x703+x704);
evalcond[2]=((-0.0207576681102795)+(((-1.0)*pp))+(((0.785876740156401)*x703))+(((0.785876740156401)*x704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
sj14=1.0;
cj14=0;
j14=1.57079633263667;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x705=pz*pz;
IkReal x706=((32389191142403.0)*cj15);
IkReal x707=((32389191142403.0)*sj15);
j12eval[0]=((((-1.0)*x705))+pp);
j12eval[1]=((IKabs(((((-1.0)*py*x706))+(((-34813814033858.6)*py))+(((-1.0)*px*x707)))))+(IKabs(((((-34813814033858.6)*px))+(((-1.0)*px*x706))+((py*x707))))));
j12eval[2]=IKsign(((((88598662500000.0)*pp))+(((-88598662500000.0)*x705))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
sj14=1.0;
cj14=0;
j14=1.57079633263667;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x708=pz*pz;
IkReal x709=((1.11282777406866e+28)*pp);
IkReal x710=((3.1970934299486e+27)*sj15);
j12eval[0]=((((-1.0)*x708))+pp);
j12eval[1]=((IKabs(((((-1.0)*py*x709))+(((-2.30997095980183e+26)*py))+(((-1.0)*px*x710)))))+(IKabs(((((-2.30997095980183e+26)*px))+(((-1.0)*px*x709))+((py*x710))))));
j12eval[2]=IKsign(((((-8.7454546344058e+27)*x708))+(((8.7454546344058e+27)*pp))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[4], cj12array[4], sj12array[4];
bool j12valid[4]={false};
_nj12 = 4;
j12array[0]=0;
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=1.5707963267949;
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
j12array[2]=3.14159265358979;
sj12array[2]=IKsin(j12array[2]);
cj12array[2]=IKcos(j12array[2]);
j12array[3]=-1.5707963267949;
sj12array[3]=IKsin(j12array[3]);
cj12array[3]=IKcos(j12array[3]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
if( j12array[2] > IKPI )
{
    j12array[2]-=IK2PI;
}
else if( j12array[2] < -IKPI )
{    j12array[2]+=IK2PI;
}
j12valid[2] = true;
if( j12array[3] > IKPI )
{
    j12array[3]-=IK2PI;
}
else if( j12array[3] < -IKPI )
{    j12array[3]+=IK2PI;
}
j12valid[3] = true;
for(int ij12 = 0; ij12 < 4; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 4; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x711=((1.11282777406866e+28)*pp);
IkReal x712=((3.1970934299486e+27)*sj15);
CheckValue<IkReal> x713=IKPowWithIntegerCheck(IKsign(((((-8.7454546344058e+27)*(pz*pz)))+(((8.7454546344058e+27)*pp)))),-1);
if(!x713.valid){
continue;
}
CheckValue<IkReal> x714 = IKatan2WithCheck(IkReal(((((-2.30997095980183e+26)*py))+(((-1.0)*px*x712))+(((-1.0)*py*x711)))),IkReal(((((-2.30997095980183e+26)*px))+(((-1.0)*px*x711))+((py*x712)))),IKFAST_ATAN2_MAGTHRESH);
if(!x714.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x713.value)))+(x714.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[3];
IkReal x715=IKsin(j12);
IkReal x716=IKcos(j12);
IkReal x717=(py*x715);
IkReal x718=((1.0)*x716);
evalcond[0]=(((px*x715))+(((0.365572010101202)*sj15))+(((-1.0)*py*x718)));
evalcond[1]=((-0.392938370078201)+(((-1.0)*x717))+(((-0.365572010101202)*cj15))+(((-1.0)*px*x718)));
evalcond[2]=((-0.0207576681102795)+(((-0.785876740156401)*px*x716))+(((-0.785876740156401)*x717))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x719=((32389191142403.0)*cj15);
IkReal x720=((32389191142403.0)*sj15);
CheckValue<IkReal> x721 = IKatan2WithCheck(IkReal(((((-1.0)*px*x720))+(((-34813814033858.6)*py))+(((-1.0)*py*x719)))),IkReal(((((-34813814033858.6)*px))+(((-1.0)*px*x719))+((py*x720)))),IKFAST_ATAN2_MAGTHRESH);
if(!x721.valid){
continue;
}
CheckValue<IkReal> x722=IKPowWithIntegerCheck(IKsign(((((-88598662500000.0)*(pz*pz)))+(((88598662500000.0)*pp)))),-1);
if(!x722.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x721.value)+(((1.5707963267949)*(x722.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[3];
IkReal x723=IKsin(j12);
IkReal x724=IKcos(j12);
IkReal x725=(py*x723);
IkReal x726=((1.0)*x724);
evalcond[0]=(((px*x723))+(((-1.0)*py*x726))+(((0.365572010101202)*sj15)));
evalcond[1]=((-0.392938370078201)+(((-1.0)*px*x726))+(((-0.365572010101202)*cj15))+(((-1.0)*x725)));
evalcond[2]=((-0.0207576681102795)+(((-0.785876740156401)*x725))+(((-0.785876740156401)*px*x724))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j15), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
IkReal x727=((-1.0)*py);
sj14=1.0;
cj14=0;
j14=1.57079633263667;
pz=0;
j15=0;
sj15=0;
cj15=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x727);
rxp0_1=(px*r20);
rxp1_0=(r21*x727);
rxp1_1=(px*r21);
rxp2_0=(r22*x727);
rxp2_1=(px*r22);
IkReal x728=(((sj13*(px*px)))+((sj13*(py*py))));
j12eval[0]=x728;
j12eval[1]=IKsign(x728);
j12eval[2]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[4];
IkReal x729=((-1.0)*py);
sj14=1.0;
cj14=0;
j14=1.57079633263667;
pz=0;
j15=0;
sj15=0;
cj15=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x729);
rxp0_1=(px*r20);
rxp1_0=(r21*x729);
rxp1_1=(px*r21);
rxp2_0=(r22*x729);
rxp2_1=(px*r22);
IkReal x730=py*py;
IkReal x731=px*px;
j12eval[0]=(x731+x730);
j12eval[1]=IKsign(((((1.78052443850985e+21)*x730))+(((1.78052443850985e+21)*x731))));
j12eval[2]=1.8239752240962e+42;
j12eval[3]=sj13;
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  || IKabs(j12eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x732=((-1.0)*py);
sj14=1.0;
cj14=0;
j14=1.57079633263667;
pz=0;
j15=0;
sj15=0;
cj15=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x732);
rxp0_1=(px*r20);
rxp1_0=(r21*x732);
rxp1_1=(px*r21);
rxp2_0=(r22*x732);
rxp2_1=(px*r22);
sj13=0;
cj13=1.0;
j13=0;
j12eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x734 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x734.valid){
continue;
}
IkReal x733=x734.value;
j12array[0]=((-1.0)*x733);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x733)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j12))))+(((-1.0)*py*(IKsin(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x735=((-1.0)*py);
sj14=1.0;
cj14=0;
j14=1.57079633263667;
pz=0;
j15=0;
sj15=0;
cj15=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x735);
rxp0_1=(px*r20);
rxp1_0=(r21*x735);
rxp1_1=(px*r21);
rxp2_0=(r22*x735);
rxp2_1=(px*r22);
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j12eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x737 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x737.valid){
continue;
}
IkReal x736=x737.value;
j12array[0]=((-1.0)*x736);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x736)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j12))))+(((-1.0)*py*(IKsin(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x738=((1.35054626877282e+21)*sj13);
CheckValue<IkReal> x739=IKPowWithIntegerCheck(IKsign(((((1.78052443850985e+21)*(py*py)))+(((1.78052443850985e+21)*(px*px))))),-1);
if(!x739.valid){
continue;
}
CheckValue<IkReal> x740 = IKatan2WithCheck(IkReal((py*x738)),IkReal((px*x738)),IKFAST_ATAN2_MAGTHRESH);
if(!x740.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x739.value)))+(x740.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[4];
IkReal x741=IKsin(j12);
IkReal x742=IKcos(j12);
IkReal x743=(py*x741);
IkReal x744=((1.0)*x742);
IkReal x745=(px*sj13*x742);
evalcond[0]=(((px*x741))+(((-1.0)*py*x744)));
evalcond[1]=((-0.758510380179403)+x745+((sj13*x743)));
evalcond[2]=((-0.596095664950182)+(((0.785876740156401)*sj13*x743))+(((0.785876740156401)*x745)));
evalcond[3]=((((0.758510380179403)*sj13))+(((-1.0)*px*x744))+(((-1.0)*x743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x746=IKPowWithIntegerCheck(IKsign((((sj13*(px*px)))+((sj13*(py*py))))),-1);
if(!x746.valid){
continue;
}
CheckValue<IkReal> x747 = IKatan2WithCheck(IkReal(((0.758510380179403)*py)),IkReal(((0.758510380179403)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x747.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x746.value)))+(x747.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[4];
IkReal x748=IKsin(j12);
IkReal x749=IKcos(j12);
IkReal x750=(py*x748);
IkReal x751=((1.0)*x749);
IkReal x752=(px*sj13*x749);
evalcond[0]=(((px*x748))+(((-1.0)*py*x751)));
evalcond[1]=((-0.758510380179403)+((sj13*x750))+x752);
evalcond[2]=((-0.596095664950182)+(((0.785876740156401)*x752))+(((0.785876740156401)*sj13*x750)));
evalcond[3]=((((0.758510380179403)*sj13))+(((-1.0)*px*x751))+(((-1.0)*x750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(j15, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
IkReal x753=((-1.0)*py);
sj14=1.0;
cj14=0;
j14=1.57079633263667;
pz=0;
j15=3.14159265358979;
sj15=0;
cj15=-1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x753);
rxp0_1=(px*r20);
rxp1_0=(r21*x753);
rxp1_1=(px*r21);
rxp2_0=(r22*x753);
rxp2_1=(px*r22);
IkReal x754=(((sj13*(px*px)))+((sj13*(py*py))));
j12eval[0]=x754;
j12eval[1]=IKsign(x754);
j12eval[2]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[4];
IkReal x755=((-1.0)*py);
sj14=1.0;
cj14=0;
j14=1.57079633263667;
pz=0;
j15=3.14159265358979;
sj15=0;
cj15=-1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x755);
rxp0_1=(px*r20);
rxp1_0=(r21*x755);
rxp1_1=(px*r21);
rxp2_0=(r22*x755);
rxp2_1=(px*r22);
IkReal x756=py*py;
IkReal x757=px*px;
j12eval[0]=(x757+x756);
j12eval[1]=9.49707657964976e+37;
j12eval[2]=sj13;
j12eval[3]=IKsign(((((3.5610488770197e+20)*x757))+(((3.5610488770197e+20)*x756))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  || IKabs(j12eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x758=((-1.0)*py);
sj14=1.0;
cj14=0;
j14=1.57079633263667;
pz=0;
j15=3.14159265358979;
sj15=0;
cj15=-1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x758);
rxp0_1=(px*r20);
rxp1_0=(r21*x758);
rxp1_1=(px*r21);
rxp2_0=(r22*x758);
rxp2_1=(px*r22);
sj13=0;
cj13=1.0;
j13=0;
j12eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x760 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x760.valid){
continue;
}
IkReal x759=x760.value;
j12array[0]=((-1.0)*x759);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x759)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j12))))+(((-1.0)*py*(IKsin(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x761=((-1.0)*py);
sj14=1.0;
cj14=0;
j14=1.57079633263667;
pz=0;
j15=3.14159265358979;
sj15=0;
cj15=-1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x761);
rxp0_1=(px*r20);
rxp1_0=(r21*x761);
rxp1_1=(px*r21);
rxp2_0=(r22*x761);
rxp2_1=(px*r22);
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j12eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x763 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x763.valid){
continue;
}
IkReal x762=x763.value;
j12array[0]=((-1.0)*x762);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x762)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j12))))+(((-1.0)*py*(IKsin(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x764=((9.74529454642073e+18)*sj13);
CheckValue<IkReal> x765=IKPowWithIntegerCheck(IKsign(((((3.5610488770197e+20)*(py*py)))+(((3.5610488770197e+20)*(px*px))))),-1);
if(!x765.valid){
continue;
}
CheckValue<IkReal> x766 = IKatan2WithCheck(IkReal((py*x764)),IkReal((px*x764)),IKFAST_ATAN2_MAGTHRESH);
if(!x766.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x765.value)))+(x766.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[4];
IkReal x767=IKsin(j12);
IkReal x768=IKcos(j12);
IkReal x769=((0.785876740156401)*sj13);
IkReal x770=(px*x768);
IkReal x771=(py*x767);
evalcond[0]=(((px*x767))+(((-1.0)*py*x768)));
evalcond[1]=((-0.0273663599769985)+((sj13*x771))+((sj13*x770)));
evalcond[2]=((-0.0215065857686702)+((x769*x770))+((x769*x771)));
evalcond[3]=((((-1.0)*x771))+(((-1.0)*x770))+(((0.0273663599769985)*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x772 = IKatan2WithCheck(IkReal(((0.0273663599769985)*py)),IkReal(((0.0273663599769985)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x772.valid){
continue;
}
CheckValue<IkReal> x773=IKPowWithIntegerCheck(IKsign((((sj13*(px*px)))+((sj13*(py*py))))),-1);
if(!x773.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x772.value)+(((1.5707963267949)*(x773.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[4];
IkReal x774=IKsin(j12);
IkReal x775=IKcos(j12);
IkReal x776=((0.785876740156401)*sj13);
IkReal x777=(px*x775);
IkReal x778=(py*x774);
evalcond[0]=((((-1.0)*py*x775))+((px*x774)));
evalcond[1]=((-0.0273663599769985)+((sj13*x777))+((sj13*x778)));
evalcond[2]=((-0.0215065857686702)+((x776*x778))+((x776*x777)));
evalcond[3]=((((-1.0)*x778))+(((-1.0)*x777))+(((0.0273663599769985)*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x779=((32389191142403.0)*py);
IkReal x780=(sj13*sj15);
IkReal x781=((32389191142403.0)*px);
IkReal x782=((88598662500000.0)*sj13);
IkReal x783=((88598662500000.0)*cj13*pz);
CheckValue<IkReal> x784 = IKatan2WithCheck(IkReal((((cj15*x779))+(((34813814033858.6)*py))+(((-1.0)*py*x783))+(((-1.0)*x780*x781)))),IkReal(((((34813814033858.6)*px))+(((-1.0)*px*x783))+((x779*x780))+((cj15*x781)))),IKFAST_ATAN2_MAGTHRESH);
if(!x784.valid){
continue;
}
CheckValue<IkReal> x785=IKPowWithIntegerCheck(IKsign((((pp*x782))+(((-1.0)*x782*(pz*pz))))),-1);
if(!x785.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x784.value)+(((1.5707963267949)*(x785.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x786=IKcos(j12);
IkReal x787=IKsin(j12);
IkReal x788=((0.365572010101202)*cj15);
IkReal x789=(cj13*pz);
IkReal x790=((1.0)*x786);
IkReal x791=(py*x787);
IkReal x792=(px*sj13*x786);
evalcond[0]=(((px*x787))+(((-1.0)*py*x790))+(((0.365572010101202)*sj15)));
evalcond[1]=(((cj13*px*x786))+(((-1.0)*pz*sj13))+((cj13*x791)));
evalcond[2]=((-0.392938370078201)+(((-1.0)*x788))+((sj13*x791))+x792+x789);
evalcond[3]=((((-1.0)*px*x790))+(((0.392938370078201)*sj13))+((sj13*x788))+(((-1.0)*x791)));
evalcond[4]=((-0.0207576681102795)+(((0.785876740156401)*x789))+(((0.785876740156401)*sj13*x791))+(((0.785876740156401)*x792))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x793=(py*sj13);
IkReal x794=((32389191142403.0)*px);
CheckValue<IkReal> x795 = IKatan2WithCheck(IkReal(((((32389191142403.0)*cj15*x793))+(((34813814033858.6)*x793))+(((-1.0)*sj15*x794)))),IkReal(((((32389191142403.0)*py*sj15))+(((34813814033858.6)*px*sj13))+((cj15*sj13*x794)))),IKFAST_ATAN2_MAGTHRESH);
if(!x795.valid){
continue;
}
CheckValue<IkReal> x796=IKPowWithIntegerCheck(IKsign(((((-88598662500000.0)*(pz*pz)))+(((88598662500000.0)*pp)))),-1);
if(!x796.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x795.value)+(((1.5707963267949)*(x796.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x797=IKcos(j12);
IkReal x798=IKsin(j12);
IkReal x799=((0.365572010101202)*cj15);
IkReal x800=(cj13*pz);
IkReal x801=((1.0)*x797);
IkReal x802=(py*x798);
IkReal x803=(px*sj13*x797);
evalcond[0]=(((px*x798))+(((-1.0)*py*x801))+(((0.365572010101202)*sj15)));
evalcond[1]=(((cj13*x802))+((cj13*px*x797))+(((-1.0)*pz*sj13)));
evalcond[2]=((-0.392938370078201)+(((-1.0)*x799))+x800+x803+((sj13*x802)));
evalcond[3]=((((-1.0)*x802))+(((-1.0)*px*x801))+(((0.392938370078201)*sj13))+((sj13*x799)));
evalcond[4]=((-0.0207576681102795)+(((-1.0)*pp))+(((0.785876740156401)*sj13*x802))+(((0.785876740156401)*x800))+(((0.785876740156401)*x803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x804=((88598662500000.0)*cj13);
IkReal x805=((32389191142403.0)*cj13*sj15);
IkReal x806=((88598662500000.0)*pz*sj13);
CheckValue<IkReal> x807 = IKatan2WithCheck(IkReal(((((-1.0)*px*x805))+((py*x806)))),IkReal((((px*x806))+((py*x805)))),IKFAST_ATAN2_MAGTHRESH);
if(!x807.valid){
continue;
}
CheckValue<IkReal> x808=IKPowWithIntegerCheck(IKsign(((((-1.0)*x804*(pz*pz)))+((pp*x804)))),-1);
if(!x808.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x807.value)+(((1.5707963267949)*(x808.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x809=IKcos(j12);
IkReal x810=IKsin(j12);
IkReal x811=((0.365572010101202)*cj15);
IkReal x812=(cj13*pz);
IkReal x813=((1.0)*x809);
IkReal x814=(py*x810);
IkReal x815=(px*sj13*x809);
evalcond[0]=(((px*x810))+(((-1.0)*py*x813))+(((0.365572010101202)*sj15)));
evalcond[1]=(((cj13*px*x809))+((cj13*x814))+(((-1.0)*pz*sj13)));
evalcond[2]=((-0.392938370078201)+(((-1.0)*x811))+((sj13*x814))+x815+x812);
evalcond[3]=((((0.392938370078201)*sj13))+((sj13*x811))+(((-1.0)*x814))+(((-1.0)*px*x813)));
evalcond[4]=((-0.0207576681102795)+(((0.785876740156401)*sj13*x814))+(((0.785876740156401)*x812))+(((0.785876740156401)*x815))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x818 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x818.valid){
continue;
}
IkReal x816=((1.0)*(x818.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x819=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x819.valid){
continue;
}
if( (((0.365572010101202)*sj15*(x819.value))) < -1-IKFAST_SINCOS_THRESH || (((0.365572010101202)*sj15*(x819.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x817=IKasin(((0.365572010101202)*sj15*(x819.value)));
j12array[0]=((((-1.0)*x816))+(((-1.0)*x817)));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x816))+x817);
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

{
IkReal j13eval[3];
sj14=1.0;
cj14=0;
j14=1.57079633263667;
j13eval[0]=((1.07485901332934)+cj15);
j13eval[1]=IKsign(((0.392938370078201)+(((0.365572010101202)*cj15))));
j13eval[2]=((IKabs(pz))+(IKabs((((cj12*px))+((py*sj12))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
sj14=1.0;
cj14=0;
j14=1.57079633263667;
j13eval[0]=((-1.07485901332934)+(((-1.0)*cj15)));
j13eval[1]=((IKabs(((((-1.0)*py*sj12))+(((-1.0)*cj12*px)))))+(IKabs(pz)));
j13eval[2]=IKsign(((-0.392938370078201)+(((-0.365572010101202)*cj15))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[2];
sj14=1.0;
cj14=0;
j14=1.57079633263667;
IkReal x820=(py*sj12);
IkReal x821=((1.0)*cj15);
IkReal x822=(cj12*px);
j13eval[0]=((((-1.07485901332934)*x820))+(((-1.07485901332934)*x822))+(((-1.0)*x821*x822))+(((-1.0)*x820*x821)));
j13eval[1]=((-1.07485901332934)+(((-1.0)*x821)));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j13]

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x823=(cj12*px);
IkReal x824=((0.365572010101202)*cj15);
IkReal x825=(py*sj12);
CheckValue<IkReal> x826=IKPowWithIntegerCheck(((((-1.0)*x823*x824))+(((-1.0)*x824*x825))+(((-0.392938370078201)*x825))+(((-0.392938370078201)*x823))),-1);
if(!x826.valid){
continue;
}
CheckValue<IkReal> x827=IKPowWithIntegerCheck(((-0.392938370078201)+(((-1.0)*x824))),-1);
if(!x827.valid){
continue;
}
if( IKabs(((x826.value)*(((-0.154400562679713)+(((-0.287294539590756)*cj15))+(pz*pz)+(((-0.133642894569433)*(cj15*cj15))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*pz*(x827.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x826.value)*(((-0.154400562679713)+(((-0.287294539590756)*cj15))+(pz*pz)+(((-0.133642894569433)*(cj15*cj15)))))))+IKsqr(((-1.0)*pz*(x827.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x826.value)*(((-0.154400562679713)+(((-0.287294539590756)*cj15))+(pz*pz)+(((-0.133642894569433)*(cj15*cj15)))))), ((-1.0)*pz*(x827.value)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x828=IKcos(j13);
IkReal x829=IKsin(j13);
IkReal x830=((0.365572010101202)*cj15);
IkReal x831=(py*sj12);
IkReal x832=(cj12*px);
IkReal x833=(pz*x828);
IkReal x834=(x829*x832);
evalcond[0]=((((-1.0)*x828*x830))+pz+(((-0.392938370078201)*x828)));
evalcond[1]=(((x828*x832))+((x828*x831))+(((-1.0)*pz*x829)));
evalcond[2]=((((0.392938370078201)*x829))+((x829*x830))+(((-1.0)*x831))+(((-1.0)*x832)));
evalcond[3]=((-0.392938370078201)+((x829*x831))+(((-1.0)*x830))+x834+x833);
evalcond[4]=((-0.0207576681102795)+(((0.785876740156401)*x834))+(((0.785876740156401)*x833))+(((0.785876740156401)*x829*x831))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x835 = IKatan2WithCheck(IkReal(((((-1.0)*py*sj12))+(((-1.0)*cj12*px)))),IkReal(((-1.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x835.valid){
continue;
}
CheckValue<IkReal> x836=IKPowWithIntegerCheck(IKsign(((-0.392938370078201)+(((-0.365572010101202)*cj15)))),-1);
if(!x836.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x835.value)+(((1.5707963267949)*(x836.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x837=IKcos(j13);
IkReal x838=IKsin(j13);
IkReal x839=((0.365572010101202)*cj15);
IkReal x840=(py*sj12);
IkReal x841=(cj12*px);
IkReal x842=(pz*x837);
IkReal x843=(x838*x841);
evalcond[0]=((((-1.0)*x837*x839))+pz+(((-0.392938370078201)*x837)));
evalcond[1]=(((x837*x840))+((x837*x841))+(((-1.0)*pz*x838)));
evalcond[2]=(((x838*x839))+(((0.392938370078201)*x838))+(((-1.0)*x841))+(((-1.0)*x840)));
evalcond[3]=((-0.392938370078201)+((x838*x840))+(((-1.0)*x839))+x843+x842);
evalcond[4]=((-0.0207576681102795)+(((0.785876740156401)*x843))+(((0.785876740156401)*x842))+(((-1.0)*pp))+(((0.785876740156401)*x838*x840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x844=IKPowWithIntegerCheck(IKsign(((0.392938370078201)+(((0.365572010101202)*cj15)))),-1);
if(!x844.valid){
continue;
}
CheckValue<IkReal> x845 = IKatan2WithCheck(IkReal((((cj12*px))+((py*sj12)))),IkReal(pz),IKFAST_ATAN2_MAGTHRESH);
if(!x845.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x844.value)))+(x845.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x846=IKcos(j13);
IkReal x847=IKsin(j13);
IkReal x848=((0.365572010101202)*cj15);
IkReal x849=(py*sj12);
IkReal x850=(cj12*px);
IkReal x851=(pz*x846);
IkReal x852=(x847*x850);
evalcond[0]=((((-1.0)*x846*x848))+pz+(((-0.392938370078201)*x846)));
evalcond[1]=(((x846*x849))+((x846*x850))+(((-1.0)*pz*x847)));
evalcond[2]=((((-1.0)*x850))+(((0.392938370078201)*x847))+(((-1.0)*x849))+((x847*x848)));
evalcond[3]=((-0.392938370078201)+(((-1.0)*x848))+((x847*x849))+x852+x851);
evalcond[4]=((-0.0207576681102795)+(((0.785876740156401)*x847*x849))+(((-1.0)*pp))+(((0.785876740156401)*x852))+(((0.785876740156401)*x851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj14)))))+(IKabs(cj14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[2];
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
j12eval[0]=((px*px)+(py*py));
j12eval[1]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
j13eval[0]=((-1.07485901332934)+(((-1.0)*cj15)));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j12, j13]

} else
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
CheckValue<IkReal> x853=IKPowWithIntegerCheck(((-0.392938370078201)+(((-0.365572010101202)*cj15))),-1);
if(!x853.valid){
continue;
}
cj13array[0]=((-1.0)*pz*(x853.value));
if( cj13array[0] >= -1-IKFAST_SINCOS_THRESH && cj13array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j13valid[0] = j13valid[1] = true;
    j13array[0] = IKacos(cj13array[0]);
    sj13array[0] = IKsin(j13array[0]);
    cj13array[1] = cj13array[0];
    j13array[1] = -j13array[0];
    sj13array[1] = -sj13array[0];
}
else if( isnan(cj13array[0]) )
{
    // probably any value will work
    j13valid[0] = true;
    cj13array[0] = 1; sj13array[0] = 0; j13array[0] = 0;
}
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
IkReal j12eval[3];
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
IkReal x854=pz*pz;
IkReal x855=(cj13*pp);
IkReal x856=(cj13*x854);
IkReal x857=((32389191142403.0)*cj13*sj15);
IkReal x858=((88598662500000.0)*pz*sj13);
j12eval[0]=((((-1.0)*x856))+x855);
j12eval[1]=IKsign(((((-88598662500000.0)*x856))+(((88598662500000.0)*x855))));
j12eval[2]=((IKabs((((px*x857))+((py*x858)))))+(IKabs((((px*x858))+(((-1.0)*py*x857))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
IkReal x859=pz*pz;
IkReal x860=(py*sj13);
IkReal x861=((32389191142403.0)*px);
j12eval[0]=((((-1.0)*x859))+pp);
j12eval[1]=((IKabs((((cj15*sj13*x861))+(((-32389191142403.0)*py*sj15))+(((34813814033858.6)*px*sj13)))))+(IKabs(((((34813814033858.6)*x860))+(((32389191142403.0)*cj15*x860))+((sj15*x861))))));
j12eval[2]=IKsign(((((-88598662500000.0)*x859))+(((88598662500000.0)*pp))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
IkReal x862=pz*pz;
IkReal x863=((32389191142403.0)*py);
IkReal x864=(pp*sj13);
IkReal x865=(sj13*sj15);
IkReal x866=((32389191142403.0)*px);
IkReal x867=((88598662500000.0)*cj13*pz);
IkReal x868=(sj13*x862);
j12eval[0]=((((-1.0)*x868))+x864);
j12eval[1]=((IKabs(((((34813814033858.6)*py))+(((-1.0)*py*x867))+((x865*x866))+((cj15*x863)))))+(IKabs(((((34813814033858.6)*px))+((cj15*x866))+(((-1.0)*px*x867))+(((-1.0)*x863*x865))))));
j12eval[2]=IKsign(((((-88598662500000.0)*x868))+(((88598662500000.0)*x864))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[4];
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
sj13=0;
cj13=1.0;
j13=0;
IkReal x869=pz*pz;
j12eval[0]=((((-1.0)*x869))+pp);
j12eval[1]=1.04905970285912e+27;
j12eval[2]=sj15;
j12eval[3]=IKsign(((((88598662500000.0)*pp))+(((-88598662500000.0)*x869))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  || IKabs(j12eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
sj13=0;
cj13=1.0;
j13=0;
sj15=0;
cj15=1.0;
j15=0;
j12eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x871 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x871.valid){
continue;
}
IkReal x870=x871.value;
j12array[0]=((-1.0)*x870);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x870)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j12))))+(((-1.0)*py*(IKsin(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
sj13=0;
cj13=1.0;
j13=0;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j12eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x873 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x873.valid){
continue;
}
IkReal x872=x873.value;
j12array[0]=((-1.0)*x872);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x872)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j12))))+(((-1.0)*py*(IKsin(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x874 = IKatan2WithCheck(IkReal(((32389191142403.0)*px*sj15)),IkReal(((-32389191142403.0)*py*sj15)),IKFAST_ATAN2_MAGTHRESH);
if(!x874.valid){
continue;
}
CheckValue<IkReal> x875=IKPowWithIntegerCheck(IKsign(((((-88598662500000.0)*(pz*pz)))+(((88598662500000.0)*pp)))),-1);
if(!x875.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x874.value)+(((1.5707963267949)*(x875.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x876=IKsin(j12);
IkReal x877=IKcos(j12);
IkReal x878=((1.0)*py);
evalcond[0]=((((-1.0)*x876*x878))+(((-1.0)*px*x877)));
evalcond[1]=((((-1.0)*x877*x878))+(((-0.365572010101202)*sj15))+((px*x876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[4];
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x879=pz*pz;
j12eval[0]=((((-1.0)*x879))+pp);
j12eval[1]=1.04905970285912e+27;
j12eval[2]=sj15;
j12eval[3]=IKsign(((((88598662500000.0)*pp))+(((-88598662500000.0)*x879))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  || IKabs(j12eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=0;
cj15=1.0;
j15=0;
j12eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x881 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x881.valid){
continue;
}
IkReal x880=x881.value;
j12array[0]=((-1.0)*x880);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x880)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j12))))+(((-1.0)*py*(IKsin(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j12eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x883 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x883.valid){
continue;
}
IkReal x882=x883.value;
j12array[0]=((-1.0)*x882);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x882)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j12))))+(((-1.0)*py*(IKsin(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x884 = IKatan2WithCheck(IkReal(((32389191142403.0)*px*sj15)),IkReal(((-32389191142403.0)*py*sj15)),IKFAST_ATAN2_MAGTHRESH);
if(!x884.valid){
continue;
}
CheckValue<IkReal> x885=IKPowWithIntegerCheck(IKsign(((((-88598662500000.0)*(pz*pz)))+(((88598662500000.0)*pp)))),-1);
if(!x885.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x884.value)+(((1.5707963267949)*(x885.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x886=IKsin(j12);
IkReal x887=IKcos(j12);
IkReal x888=((1.0)*py);
evalcond[0]=((((-1.0)*x886*x888))+(((-1.0)*px*x887)));
evalcond[1]=((((-1.0)*x887*x888))+((px*x886))+(((-0.365572010101202)*sj15)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x889=pz*pz;
IkReal x890=((32389191142403.0)*cj15);
IkReal x891=((32389191142403.0)*sj15);
j12eval[0]=((((-1.0)*x889))+pp);
j12eval[1]=((IKabs(((((34813814033858.6)*px))+((px*x890))+(((-1.0)*py*x891)))))+(IKabs((((py*x890))+(((34813814033858.6)*py))+((px*x891))))));
j12eval[2]=IKsign(((((88598662500000.0)*pp))+(((-88598662500000.0)*x889))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x892=pz*pz;
IkReal x893=((1.11282777406866e+28)*pp);
IkReal x894=((3.1970934299486e+27)*sj15);
j12eval[0]=((((-1.0)*x892))+pp);
j12eval[1]=IKsign(((((-8.7454546344058e+27)*x892))+(((8.7454546344058e+27)*pp))));
j12eval[2]=((IKabs((((py*x893))+((px*x894))+(((2.30997095980183e+26)*py)))))+(IKabs((((px*x893))+(((-1.0)*py*x894))+(((2.30997095980183e+26)*px))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[4], cj12array[4], sj12array[4];
bool j12valid[4]={false};
_nj12 = 4;
j12array[0]=0;
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=1.5707963267949;
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
j12array[2]=3.14159265358979;
sj12array[2]=IKsin(j12array[2]);
cj12array[2]=IKcos(j12array[2]);
j12array[3]=-1.5707963267949;
sj12array[3]=IKsin(j12array[3]);
cj12array[3]=IKcos(j12array[3]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
if( j12array[2] > IKPI )
{
    j12array[2]-=IK2PI;
}
else if( j12array[2] < -IKPI )
{    j12array[2]+=IK2PI;
}
j12valid[2] = true;
if( j12array[3] > IKPI )
{
    j12array[3]-=IK2PI;
}
else if( j12array[3] < -IKPI )
{    j12array[3]+=IK2PI;
}
j12valid[3] = true;
for(int ij12 = 0; ij12 < 4; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 4; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x895=((1.11282777406866e+28)*pp);
IkReal x896=((3.1970934299486e+27)*sj15);
CheckValue<IkReal> x897=IKPowWithIntegerCheck(IKsign(((((-8.7454546344058e+27)*(pz*pz)))+(((8.7454546344058e+27)*pp)))),-1);
if(!x897.valid){
continue;
}
CheckValue<IkReal> x898 = IKatan2WithCheck(IkReal((((py*x895))+((px*x896))+(((2.30997095980183e+26)*py)))),IkReal((((px*x895))+(((-1.0)*py*x896))+(((2.30997095980183e+26)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x898.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x897.value)))+(x898.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[3];
IkReal x899=IKcos(j12);
IkReal x900=IKsin(j12);
IkReal x901=(py*x900);
IkReal x902=(px*x899);
evalcond[0]=(((px*x900))+(((-0.365572010101202)*sj15))+(((-1.0)*py*x899)));
evalcond[1]=((-0.392938370078201)+(((-0.365572010101202)*cj15))+x901+x902);
evalcond[2]=((-0.0207576681102795)+(((-1.0)*pp))+(((0.785876740156401)*x901))+(((0.785876740156401)*x902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x903=((32389191142403.0)*cj15);
IkReal x904=((32389191142403.0)*sj15);
CheckValue<IkReal> x905 = IKatan2WithCheck(IkReal(((((34813814033858.6)*py))+((px*x904))+((py*x903)))),IkReal(((((34813814033858.6)*px))+((px*x903))+(((-1.0)*py*x904)))),IKFAST_ATAN2_MAGTHRESH);
if(!x905.valid){
continue;
}
CheckValue<IkReal> x906=IKPowWithIntegerCheck(IKsign(((((-88598662500000.0)*(pz*pz)))+(((88598662500000.0)*pp)))),-1);
if(!x906.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x905.value)+(((1.5707963267949)*(x906.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[3];
IkReal x907=IKcos(j12);
IkReal x908=IKsin(j12);
IkReal x909=(py*x908);
IkReal x910=(px*x907);
evalcond[0]=((((-1.0)*py*x907))+((px*x908))+(((-0.365572010101202)*sj15)));
evalcond[1]=((-0.392938370078201)+(((-0.365572010101202)*cj15))+x910+x909);
evalcond[2]=((-0.0207576681102795)+(((0.785876740156401)*x910))+(((-1.0)*pp))+(((0.785876740156401)*x909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x911=pz*pz;
IkReal x912=((32389191142403.0)*cj15);
IkReal x913=((32389191142403.0)*sj15);
j12eval[0]=(pp+(((-1.0)*x911)));
j12eval[1]=((IKabs(((((-1.0)*px*x912))+(((-1.0)*py*x913))+(((-34813814033858.6)*px)))))+(IKabs((((px*x913))+(((-1.0)*py*x912))+(((-34813814033858.6)*py))))));
j12eval[2]=IKsign(((((88598662500000.0)*pp))+(((-88598662500000.0)*x911))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x914=pz*pz;
IkReal x915=((1.11282777406866e+28)*pp);
IkReal x916=((3.1970934299486e+27)*sj15);
j12eval[0]=(pp+(((-1.0)*x914)));
j12eval[1]=((IKabs(((((-2.30997095980183e+26)*py))+((px*x916))+(((-1.0)*py*x915)))))+(IKabs(((((-2.30997095980183e+26)*px))+(((-1.0)*px*x915))+(((-1.0)*py*x916))))));
j12eval[2]=IKsign(((((-8.7454546344058e+27)*x914))+(((8.7454546344058e+27)*pp))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[4], cj12array[4], sj12array[4];
bool j12valid[4]={false};
_nj12 = 4;
j12array[0]=0;
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=1.5707963267949;
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
j12array[2]=3.14159265358979;
sj12array[2]=IKsin(j12array[2]);
cj12array[2]=IKcos(j12array[2]);
j12array[3]=-1.5707963267949;
sj12array[3]=IKsin(j12array[3]);
cj12array[3]=IKcos(j12array[3]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
if( j12array[2] > IKPI )
{
    j12array[2]-=IK2PI;
}
else if( j12array[2] < -IKPI )
{    j12array[2]+=IK2PI;
}
j12valid[2] = true;
if( j12array[3] > IKPI )
{
    j12array[3]-=IK2PI;
}
else if( j12array[3] < -IKPI )
{    j12array[3]+=IK2PI;
}
j12valid[3] = true;
for(int ij12 = 0; ij12 < 4; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 4; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x917=((1.11282777406866e+28)*pp);
IkReal x918=((3.1970934299486e+27)*sj15);
CheckValue<IkReal> x919=IKPowWithIntegerCheck(IKsign(((((-8.7454546344058e+27)*(pz*pz)))+(((8.7454546344058e+27)*pp)))),-1);
if(!x919.valid){
continue;
}
CheckValue<IkReal> x920 = IKatan2WithCheck(IkReal(((((-2.30997095980183e+26)*py))+((px*x918))+(((-1.0)*py*x917)))),IkReal(((((-2.30997095980183e+26)*px))+(((-1.0)*px*x917))+(((-1.0)*py*x918)))),IKFAST_ATAN2_MAGTHRESH);
if(!x920.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x919.value)))+(x920.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[3];
IkReal x921=IKsin(j12);
IkReal x922=IKcos(j12);
IkReal x923=(py*x921);
IkReal x924=((1.0)*x922);
evalcond[0]=((((-0.365572010101202)*sj15))+(((-1.0)*py*x924))+((px*x921)));
evalcond[1]=((-0.392938370078201)+(((-1.0)*px*x924))+(((-0.365572010101202)*cj15))+(((-1.0)*x923)));
evalcond[2]=((-0.0207576681102795)+(((-0.785876740156401)*px*x922))+(((-0.785876740156401)*x923))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x925=((32389191142403.0)*cj15);
IkReal x926=((32389191142403.0)*sj15);
CheckValue<IkReal> x927 = IKatan2WithCheck(IkReal(((((-34813814033858.6)*py))+(((-1.0)*py*x925))+((px*x926)))),IkReal(((((-1.0)*px*x925))+(((-34813814033858.6)*px))+(((-1.0)*py*x926)))),IKFAST_ATAN2_MAGTHRESH);
if(!x927.valid){
continue;
}
CheckValue<IkReal> x928=IKPowWithIntegerCheck(IKsign(((((-88598662500000.0)*(pz*pz)))+(((88598662500000.0)*pp)))),-1);
if(!x928.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x927.value)+(((1.5707963267949)*(x928.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[3];
IkReal x929=IKsin(j12);
IkReal x930=IKcos(j12);
IkReal x931=(py*x929);
IkReal x932=((1.0)*x930);
evalcond[0]=((((-0.365572010101202)*sj15))+(((-1.0)*py*x932))+((px*x929)));
evalcond[1]=((-0.392938370078201)+(((-1.0)*px*x932))+(((-0.365572010101202)*cj15))+(((-1.0)*x931)));
evalcond[2]=((-0.0207576681102795)+(((-0.785876740156401)*px*x930))+(((-0.785876740156401)*x931))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j15), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
IkReal x933=((-1.0)*py);
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
pz=0;
j15=0;
sj15=0;
cj15=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x933);
rxp0_1=(px*r20);
rxp1_0=(r21*x933);
rxp1_1=(px*r21);
rxp2_0=(r22*x933);
rxp2_1=(px*r22);
IkReal x934=(((sj13*(px*px)))+((sj13*(py*py))));
j12eval[0]=x934;
j12eval[1]=IKsign(x934);
j12eval[2]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[4];
IkReal x935=((-1.0)*py);
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
pz=0;
j15=0;
sj15=0;
cj15=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x935);
rxp0_1=(px*r20);
rxp1_0=(r21*x935);
rxp1_1=(px*r21);
rxp2_0=(r22*x935);
rxp2_1=(px*r22);
IkReal x936=py*py;
IkReal x937=px*px;
j12eval[0]=(x937+x936);
j12eval[1]=IKsign(((((1.78052443850985e+21)*x937))+(((1.78052443850985e+21)*x936))));
j12eval[2]=1.8239752240962e+42;
j12eval[3]=sj13;
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  || IKabs(j12eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x938=((-1.0)*py);
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
pz=0;
j15=0;
sj15=0;
cj15=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x938);
rxp0_1=(px*r20);
rxp1_0=(r21*x938);
rxp1_1=(px*r21);
rxp2_0=(r22*x938);
rxp2_1=(px*r22);
sj13=0;
cj13=1.0;
j13=0;
j12eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x940 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x940.valid){
continue;
}
IkReal x939=x940.value;
j12array[0]=((-1.0)*x939);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x939)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j12))))+(((-1.0)*py*(IKsin(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x941=((-1.0)*py);
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
pz=0;
j15=0;
sj15=0;
cj15=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x941);
rxp0_1=(px*r20);
rxp1_0=(r21*x941);
rxp1_1=(px*r21);
rxp2_0=(r22*x941);
rxp2_1=(px*r22);
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j12eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x943 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x943.valid){
continue;
}
IkReal x942=x943.value;
j12array[0]=((-1.0)*x942);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x942)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j12))))+(((-1.0)*py*(IKsin(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x944=((1.35054626877282e+21)*sj13);
CheckValue<IkReal> x945=IKPowWithIntegerCheck(IKsign(((((1.78052443850985e+21)*(py*py)))+(((1.78052443850985e+21)*(px*px))))),-1);
if(!x945.valid){
continue;
}
CheckValue<IkReal> x946 = IKatan2WithCheck(IkReal((py*x944)),IkReal((px*x944)),IKFAST_ATAN2_MAGTHRESH);
if(!x946.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x945.value)))+(x946.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[4];
IkReal x947=IKsin(j12);
IkReal x948=IKcos(j12);
IkReal x949=(py*x947);
IkReal x950=((1.0)*x948);
IkReal x951=(px*sj13*x948);
evalcond[0]=((((-1.0)*py*x950))+((px*x947)));
evalcond[1]=((-0.758510380179403)+((sj13*x949))+x951);
evalcond[2]=((-0.596095664950182)+(((0.785876740156401)*sj13*x949))+(((0.785876740156401)*x951)));
evalcond[3]=((((0.758510380179403)*sj13))+(((-1.0)*x949))+(((-1.0)*px*x950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x952=IKPowWithIntegerCheck(IKsign((((sj13*(px*px)))+((sj13*(py*py))))),-1);
if(!x952.valid){
continue;
}
CheckValue<IkReal> x953 = IKatan2WithCheck(IkReal(((0.758510380179403)*py)),IkReal(((0.758510380179403)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x953.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x952.value)))+(x953.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[4];
IkReal x954=IKsin(j12);
IkReal x955=IKcos(j12);
IkReal x956=(py*x954);
IkReal x957=((1.0)*x955);
IkReal x958=(px*sj13*x955);
evalcond[0]=((((-1.0)*py*x957))+((px*x954)));
evalcond[1]=((-0.758510380179403)+((sj13*x956))+x958);
evalcond[2]=((-0.596095664950182)+(((0.785876740156401)*sj13*x956))+(((0.785876740156401)*x958)));
evalcond[3]=((((0.758510380179403)*sj13))+(((-1.0)*x956))+(((-1.0)*px*x957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(j15, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
IkReal x959=((-1.0)*py);
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
pz=0;
j15=3.14159265358979;
sj15=0;
cj15=-1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x959);
rxp0_1=(px*r20);
rxp1_0=(r21*x959);
rxp1_1=(px*r21);
rxp2_0=(r22*x959);
rxp2_1=(px*r22);
IkReal x960=(((sj13*(px*px)))+((sj13*(py*py))));
j12eval[0]=x960;
j12eval[1]=IKsign(x960);
j12eval[2]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[4];
IkReal x961=((-1.0)*py);
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
pz=0;
j15=3.14159265358979;
sj15=0;
cj15=-1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x961);
rxp0_1=(px*r20);
rxp1_0=(r21*x961);
rxp1_1=(px*r21);
rxp2_0=(r22*x961);
rxp2_1=(px*r22);
IkReal x962=py*py;
IkReal x963=px*px;
j12eval[0]=(x962+x963);
j12eval[1]=9.49707657964976e+37;
j12eval[2]=sj13;
j12eval[3]=IKsign(((((3.5610488770197e+20)*x963))+(((3.5610488770197e+20)*x962))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  || IKabs(j12eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x964=((-1.0)*py);
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
pz=0;
j15=3.14159265358979;
sj15=0;
cj15=-1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x964);
rxp0_1=(px*r20);
rxp1_0=(r21*x964);
rxp1_1=(px*r21);
rxp2_0=(r22*x964);
rxp2_1=(px*r22);
sj13=0;
cj13=1.0;
j13=0;
j12eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x966 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x966.valid){
continue;
}
IkReal x965=x966.value;
j12array[0]=((-1.0)*x965);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x965)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j12))))+(((-1.0)*py*(IKsin(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x967=((-1.0)*py);
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
pz=0;
j15=3.14159265358979;
sj15=0;
cj15=-1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x967);
rxp0_1=(px*r20);
rxp1_0=(r21*x967);
rxp1_1=(px*r21);
rxp2_0=(r22*x967);
rxp2_1=(px*r22);
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j12eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x969 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x969.valid){
continue;
}
IkReal x968=x969.value;
j12array[0]=((-1.0)*x968);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x968)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j12))))+(((-1.0)*py*(IKsin(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x970=((9.74529454642073e+18)*sj13);
CheckValue<IkReal> x971=IKPowWithIntegerCheck(IKsign(((((3.5610488770197e+20)*(py*py)))+(((3.5610488770197e+20)*(px*px))))),-1);
if(!x971.valid){
continue;
}
CheckValue<IkReal> x972 = IKatan2WithCheck(IkReal((py*x970)),IkReal((px*x970)),IKFAST_ATAN2_MAGTHRESH);
if(!x972.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x971.value)))+(x972.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[4];
IkReal x973=IKsin(j12);
IkReal x974=IKcos(j12);
IkReal x975=((0.785876740156401)*sj13);
IkReal x976=(px*x974);
IkReal x977=(py*x973);
evalcond[0]=((((-1.0)*py*x974))+((px*x973)));
evalcond[1]=((-0.0273663599769985)+((sj13*x977))+((sj13*x976)));
evalcond[2]=((-0.0215065857686702)+((x975*x976))+((x975*x977)));
evalcond[3]=((((-1.0)*x977))+(((-1.0)*x976))+(((0.0273663599769985)*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x978 = IKatan2WithCheck(IkReal(((0.0273663599769985)*py)),IkReal(((0.0273663599769985)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x978.valid){
continue;
}
CheckValue<IkReal> x979=IKPowWithIntegerCheck(IKsign((((sj13*(px*px)))+((sj13*(py*py))))),-1);
if(!x979.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x978.value)+(((1.5707963267949)*(x979.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[4];
IkReal x980=IKsin(j12);
IkReal x981=IKcos(j12);
IkReal x982=((0.785876740156401)*sj13);
IkReal x983=(px*x981);
IkReal x984=(py*x980);
evalcond[0]=((((-1.0)*py*x981))+((px*x980)));
evalcond[1]=((-0.0273663599769985)+((sj13*x984))+((sj13*x983)));
evalcond[2]=((-0.0215065857686702)+((x982*x984))+((x982*x983)));
evalcond[3]=((((-1.0)*x983))+(((-1.0)*x984))+(((0.0273663599769985)*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x985=((32389191142403.0)*py);
IkReal x986=(sj13*sj15);
IkReal x987=((32389191142403.0)*px);
IkReal x988=((88598662500000.0)*sj13);
IkReal x989=((88598662500000.0)*cj13*pz);
CheckValue<IkReal> x990 = IKatan2WithCheck(IkReal((((cj15*x985))+(((34813814033858.6)*py))+((x986*x987))+(((-1.0)*py*x989)))),IkReal((((cj15*x987))+(((-1.0)*px*x989))+(((34813814033858.6)*px))+(((-1.0)*x985*x986)))),IKFAST_ATAN2_MAGTHRESH);
if(!x990.valid){
continue;
}
CheckValue<IkReal> x991=IKPowWithIntegerCheck(IKsign(((((-1.0)*x988*(pz*pz)))+((pp*x988)))),-1);
if(!x991.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x990.value)+(((1.5707963267949)*(x991.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x992=IKsin(j12);
IkReal x993=IKcos(j12);
IkReal x994=((0.365572010101202)*cj15);
IkReal x995=(cj13*pz);
IkReal x996=((1.0)*x993);
IkReal x997=(py*x992);
IkReal x998=(px*sj13*x993);
evalcond[0]=((((-1.0)*py*x996))+((px*x992))+(((-0.365572010101202)*sj15)));
evalcond[1]=((((-1.0)*cj13*px*x996))+((pz*sj13))+(((-1.0)*cj13*x997)));
evalcond[2]=((-0.392938370078201)+((sj13*x997))+(((-1.0)*x994))+x995+x998);
evalcond[3]=((((-1.0)*x997))+((sj13*x994))+(((-1.0)*px*x996))+(((0.392938370078201)*sj13)));
evalcond[4]=((-0.0207576681102795)+(((-1.0)*pp))+(((0.785876740156401)*sj13*x997))+(((0.785876740156401)*x995))+(((0.785876740156401)*x998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x999=(py*sj13);
IkReal x1000=((32389191142403.0)*px);
CheckValue<IkReal> x1001 = IKatan2WithCheck(IkReal(((((32389191142403.0)*cj15*x999))+((sj15*x1000))+(((34813814033858.6)*x999)))),IkReal(((((-32389191142403.0)*py*sj15))+(((34813814033858.6)*px*sj13))+((cj15*sj13*x1000)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1001.valid){
continue;
}
CheckValue<IkReal> x1002=IKPowWithIntegerCheck(IKsign(((((-88598662500000.0)*(pz*pz)))+(((88598662500000.0)*pp)))),-1);
if(!x1002.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1001.value)+(((1.5707963267949)*(x1002.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x1003=IKsin(j12);
IkReal x1004=IKcos(j12);
IkReal x1005=((0.365572010101202)*cj15);
IkReal x1006=(cj13*pz);
IkReal x1007=((1.0)*x1004);
IkReal x1008=(py*x1003);
IkReal x1009=(px*sj13*x1004);
evalcond[0]=(((px*x1003))+(((-1.0)*py*x1007))+(((-0.365572010101202)*sj15)));
evalcond[1]=((((-1.0)*cj13*x1008))+((pz*sj13))+(((-1.0)*cj13*px*x1007)));
evalcond[2]=((-0.392938370078201)+x1009+x1006+(((-1.0)*x1005))+((sj13*x1008)));
evalcond[3]=((((-1.0)*x1008))+(((0.392938370078201)*sj13))+((sj13*x1005))+(((-1.0)*px*x1007)));
evalcond[4]=((-0.0207576681102795)+(((0.785876740156401)*sj13*x1008))+(((-1.0)*pp))+(((0.785876740156401)*x1009))+(((0.785876740156401)*x1006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1010=((88598662500000.0)*cj13);
IkReal x1011=((32389191142403.0)*cj13*sj15);
IkReal x1012=((88598662500000.0)*pz*sj13);
CheckValue<IkReal> x1013=IKPowWithIntegerCheck(IKsign((((pp*x1010))+(((-1.0)*x1010*(pz*pz))))),-1);
if(!x1013.valid){
continue;
}
CheckValue<IkReal> x1014 = IKatan2WithCheck(IkReal((((py*x1012))+((px*x1011)))),IkReal(((((-1.0)*py*x1011))+((px*x1012)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1014.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1013.value)))+(x1014.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x1015=IKsin(j12);
IkReal x1016=IKcos(j12);
IkReal x1017=((0.365572010101202)*cj15);
IkReal x1018=(cj13*pz);
IkReal x1019=((1.0)*x1016);
IkReal x1020=(py*x1015);
IkReal x1021=(px*sj13*x1016);
evalcond[0]=((((-1.0)*py*x1019))+(((-0.365572010101202)*sj15))+((px*x1015)));
evalcond[1]=(((pz*sj13))+(((-1.0)*cj13*px*x1019))+(((-1.0)*cj13*x1020)));
evalcond[2]=((-0.392938370078201)+((sj13*x1020))+x1018+x1021+(((-1.0)*x1017)));
evalcond[3]=(((sj13*x1017))+(((-1.0)*px*x1019))+(((-1.0)*x1020))+(((0.392938370078201)*sj13)));
evalcond[4]=((-0.0207576681102795)+(((0.785876740156401)*x1018))+(((0.785876740156401)*sj13*x1020))+(((-1.0)*pp))+(((0.785876740156401)*x1021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x1024 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x1024.valid){
continue;
}
IkReal x1022=((1.0)*(x1024.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x1025=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x1025.valid){
continue;
}
if( (((0.365572010101202)*sj15*(x1025.value))) < -1-IKFAST_SINCOS_THRESH || (((0.365572010101202)*sj15*(x1025.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1023=IKasin(((0.365572010101202)*sj15*(x1025.value)));
j12array[0]=(x1023+(((-1.0)*x1022)));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1023))+(((-1.0)*x1022)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

{
IkReal j13eval[3];
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
j13eval[0]=((1.07485901332934)+cj15);
j13eval[1]=IKsign(((0.392938370078201)+(((0.365572010101202)*cj15))));
j13eval[2]=((IKabs(pz))+(IKabs((((cj12*px))+((py*sj12))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
j13eval[0]=((-1.07485901332934)+(((-1.0)*cj15)));
j13eval[1]=((IKabs(((((-1.0)*py*sj12))+(((-1.0)*cj12*px)))))+(IKabs(pz)));
j13eval[2]=IKsign(((-0.392938370078201)+(((-0.365572010101202)*cj15))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[2];
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
IkReal x1026=(py*sj12);
IkReal x1027=((1.0)*cj15);
IkReal x1028=(cj12*px);
j13eval[0]=((((-1.0)*x1026*x1027))+(((-1.07485901332934)*x1028))+(((-1.07485901332934)*x1026))+(((-1.0)*x1027*x1028)));
j13eval[1]=((-1.07485901332934)+(((-1.0)*x1027)));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j13]

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1029=(cj12*px);
IkReal x1030=((0.365572010101202)*cj15);
IkReal x1031=(py*sj12);
CheckValue<IkReal> x1032=IKPowWithIntegerCheck(((((-1.0)*x1029*x1030))+(((-1.0)*x1030*x1031))+(((-0.392938370078201)*x1031))+(((-0.392938370078201)*x1029))),-1);
if(!x1032.valid){
continue;
}
CheckValue<IkReal> x1033=IKPowWithIntegerCheck(((-0.392938370078201)+(((-1.0)*x1030))),-1);
if(!x1033.valid){
continue;
}
if( IKabs(((x1032.value)*(((-0.154400562679713)+(((-0.287294539590756)*cj15))+(pz*pz)+(((-0.133642894569433)*(cj15*cj15))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*pz*(x1033.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1032.value)*(((-0.154400562679713)+(((-0.287294539590756)*cj15))+(pz*pz)+(((-0.133642894569433)*(cj15*cj15)))))))+IKsqr(((-1.0)*pz*(x1033.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x1032.value)*(((-0.154400562679713)+(((-0.287294539590756)*cj15))+(pz*pz)+(((-0.133642894569433)*(cj15*cj15)))))), ((-1.0)*pz*(x1033.value)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x1034=IKcos(j13);
IkReal x1035=IKsin(j13);
IkReal x1036=((0.365572010101202)*cj15);
IkReal x1037=(pz*x1034);
IkReal x1038=((1.0)*py*sj12);
IkReal x1039=((1.0)*cj12*px);
IkReal x1040=(cj12*px*x1035);
IkReal x1041=(py*sj12*x1035);
evalcond[0]=((((-1.0)*x1034*x1036))+pz+(((-0.392938370078201)*x1034)));
evalcond[1]=((((-1.0)*x1039))+(((-1.0)*x1038))+((x1035*x1036))+(((0.392938370078201)*x1035)));
evalcond[2]=((((-1.0)*x1034*x1038))+(((-1.0)*x1034*x1039))+((pz*x1035)));
evalcond[3]=((-0.392938370078201)+(((-1.0)*x1036))+x1041+x1040+x1037);
evalcond[4]=((-0.0207576681102795)+(((0.785876740156401)*x1040))+(((0.785876740156401)*x1041))+(((-1.0)*pp))+(((0.785876740156401)*x1037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x1042 = IKatan2WithCheck(IkReal(((((-1.0)*py*sj12))+(((-1.0)*cj12*px)))),IkReal(((-1.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1042.valid){
continue;
}
CheckValue<IkReal> x1043=IKPowWithIntegerCheck(IKsign(((-0.392938370078201)+(((-0.365572010101202)*cj15)))),-1);
if(!x1043.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x1042.value)+(((1.5707963267949)*(x1043.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x1044=IKcos(j13);
IkReal x1045=IKsin(j13);
IkReal x1046=((0.365572010101202)*cj15);
IkReal x1047=(pz*x1044);
IkReal x1048=((1.0)*py*sj12);
IkReal x1049=((1.0)*cj12*px);
IkReal x1050=(cj12*px*x1045);
IkReal x1051=(py*sj12*x1045);
evalcond[0]=((((-1.0)*x1044*x1046))+(((-0.392938370078201)*x1044))+pz);
evalcond[1]=((((0.392938370078201)*x1045))+((x1045*x1046))+(((-1.0)*x1048))+(((-1.0)*x1049)));
evalcond[2]=((((-1.0)*x1044*x1048))+(((-1.0)*x1044*x1049))+((pz*x1045)));
evalcond[3]=((-0.392938370078201)+x1050+x1051+x1047+(((-1.0)*x1046)));
evalcond[4]=((-0.0207576681102795)+(((0.785876740156401)*x1051))+(((0.785876740156401)*x1050))+(((0.785876740156401)*x1047))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x1052=IKPowWithIntegerCheck(IKsign(((0.392938370078201)+(((0.365572010101202)*cj15)))),-1);
if(!x1052.valid){
continue;
}
CheckValue<IkReal> x1053 = IKatan2WithCheck(IkReal((((cj12*px))+((py*sj12)))),IkReal(pz),IKFAST_ATAN2_MAGTHRESH);
if(!x1053.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1052.value)))+(x1053.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x1054=IKcos(j13);
IkReal x1055=IKsin(j13);
IkReal x1056=((0.365572010101202)*cj15);
IkReal x1057=(pz*x1054);
IkReal x1058=((1.0)*py*sj12);
IkReal x1059=((1.0)*cj12*px);
IkReal x1060=(cj12*px*x1055);
IkReal x1061=(py*sj12*x1055);
evalcond[0]=((((-0.392938370078201)*x1054))+(((-1.0)*x1054*x1056))+pz);
evalcond[1]=((((-1.0)*x1059))+(((-1.0)*x1058))+(((0.392938370078201)*x1055))+((x1055*x1056)));
evalcond[2]=(((pz*x1055))+(((-1.0)*x1054*x1058))+(((-1.0)*x1054*x1059)));
evalcond[3]=((-0.392938370078201)+(((-1.0)*x1056))+x1057+x1061+x1060);
evalcond[4]=((-0.0207576681102795)+(((0.785876740156401)*x1061))+(((0.785876740156401)*x1060))+(((0.785876740156401)*x1057))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12, j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
IkReal x1062=sj14*sj14;
IkReal x1063=cj14*cj14;
IkReal x1064=py*py;
IkReal x1065=((1.0)*px*py);
IkReal x1066=(((x1062*x1064))+((x1063*x1064)));
IkReal x1067=((((-1.0)*x1063*x1065))+(((-1.0)*x1062*x1065)));
CheckValue<IkReal> x1070 = IKatan2WithCheck(IkReal(x1066),IkReal(x1067),IKFAST_ATAN2_MAGTHRESH);
if(!x1070.valid){
continue;
}
IkReal x1068=((1.0)*(x1070.value));
if((((x1067*x1067)+(x1066*x1066))) < -0.00001)
continue;
CheckValue<IkReal> x1071=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1067*x1067)+(x1066*x1066)))),-1);
if(!x1071.valid){
continue;
}
if( (((0.365572010101202)*py*sj14*sj15*(x1071.value))) < -1-IKFAST_SINCOS_THRESH || (((0.365572010101202)*py*sj14*sj15*(x1071.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1069=IKasin(((0.365572010101202)*py*sj14*sj15*(x1071.value)));
j12array[0]=(x1069+(((-1.0)*x1068)));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1068))+(((-1.0)*x1069)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x1072=IKsin(j12);
IkReal x1073=px*px;
IkReal x1074=sj14*sj14;
IkReal x1075=cj14*cj14;
IkReal x1076=IKcos(j12);
IkReal x1077=(px*py);
IkReal x1078=((0.365572010101202)*sj14*sj15);
IkReal x1079=((1.0)*x1073);
evalcond[0]=(x1078+(((-1.0)*py*x1076))+((px*x1072)));
evalcond[1]=(((x1072*(((((-1.0)*x1075*x1079))+(((-1.0)*x1074*x1079))))))+(((-1.0)*px*x1078))+((x1076*((((x1074*x1077))+((x1075*x1077)))))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j13eval[3];
IkReal x1080=(py*sj12);
IkReal x1081=(cj12*px);
IkReal x1082=(cj14*sj15);
IkReal x1083=((32389191142403.0)*cj15);
IkReal x1084=((88598662500000.0)*pz);
j13eval[0]=(((pz*x1082))+((cj15*x1081))+((cj15*x1080))+(((1.07485901332934)*x1081))+(((1.07485901332934)*x1080)));
j13eval[1]=IKsign((((x1081*x1083))+(((34813814033858.6)*x1080))+(((34813814033858.6)*x1081))+((x1080*x1083))+(((32389191142403.0)*pz*x1082))));
j13eval[2]=((IKabs((((x1081*x1084))+(((11840581711480.3)*cj15*x1082))+((x1080*x1084))+(((12726955975647.1)*x1082)))))+(IKabs(((13679683342670.0)+(((-1.0)*pz*x1084))+(((11840581711480.3)*(cj15*cj15)))+(((25453911951294.3)*cj15))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
IkReal x1085=(py*sj12);
IkReal x1086=((8.7454546344058e+27)*pz);
IkReal x1087=(cj12*px);
IkReal x1088=(cj14*sj15);
IkReal x1089=((4.06818686262725e+27)*pp);
IkReal x1090=((3.1970934299486e+27)*cj15);
j13eval[0]=(((pz*x1088))+((cj15*x1087))+((cj15*x1085))+(((1.07485901332934)*x1085))+(((1.07485901332934)*x1087)));
j13eval[1]=IKsign((((x1087*x1090))+(((3.1970934299486e+27)*pz*x1088))+((x1085*x1090))+(((3.43642468963626e+27)*x1085))+(((3.43642468963626e+27)*x1087))));
j13eval[2]=((IKabs(((((8.44460727050157e+25)*x1088))+((x1086*x1087))+((x1085*x1086))+((x1088*x1089)))))+(IKabs(((9.07676223872507e+25)+(((-1.0)*pz*x1086))+((cj15*x1089))+(((4.3727273172029e+27)*pp))+(((8.44460727050157e+25)*cj15))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
IkReal x1091=cj14*cj14;
IkReal x1092=cj15*cj15;
IkReal x1093=(py*sj12);
IkReal x1094=(cj12*px);
IkReal x1095=((2.86963901467375e+27)*cj15);
IkReal x1096=((1.04905970285912e+27)*x1091);
IkReal x1097=((2.86963901467375e+27)*cj14*sj15);
j13eval[0]=((1.15532189853532)+x1091+x1092+(((-1.0)*x1091*x1092))+(((2.14971802665867)*cj15)));
j13eval[1]=((IKabs((((x1094*x1097))+(((3.0844573599236e+27)*pz))+((x1093*x1097))+((pz*x1095)))))+(IKabs(((((-1.0)*pz*x1097))+((x1094*x1095))+(((3.0844573599236e+27)*x1094))+(((3.0844573599236e+27)*x1093))+((x1093*x1095))))));
j13eval[2]=IKsign(((1.21200164758409e+27)+(((1.04905970285912e+27)*x1092))+x1096+(((-1.0)*x1092*x1096))+(((2.25518255427744e+27)*cj15))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj14)))))+(IKabs(cj14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[3];
sj14=1.0;
cj14=0;
j14=1.57079633263667;
j13eval[0]=((1.07485901332934)+cj15);
j13eval[1]=IKsign(((0.392938370078201)+(((0.365572010101202)*cj15))));
j13eval[2]=((IKabs(pz))+(IKabs((((cj12*px))+((py*sj12))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
sj14=1.0;
cj14=0;
j14=1.57079633263667;
j13eval[0]=((-1.07485901332934)+(((-1.0)*cj15)));
j13eval[1]=((IKabs(((((-1.0)*py*sj12))+(((-1.0)*cj12*px)))))+(IKabs(pz)));
j13eval[2]=IKsign(((-0.392938370078201)+(((-0.365572010101202)*cj15))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[2];
sj14=1.0;
cj14=0;
j14=1.57079633263667;
IkReal x1098=(py*sj12);
IkReal x1099=((1.0)*cj15);
IkReal x1100=(cj12*px);
j13eval[0]=((((-1.0)*x1099*x1100))+(((-1.07485901332934)*x1100))+(((-1.07485901332934)*x1098))+(((-1.0)*x1098*x1099)));
j13eval[1]=((-1.07485901332934)+(((-1.0)*x1099)));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j13]

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1101=(cj12*px);
IkReal x1102=((0.365572010101202)*cj15);
IkReal x1103=(py*sj12);
CheckValue<IkReal> x1104=IKPowWithIntegerCheck(((((-0.392938370078201)*x1101))+(((-0.392938370078201)*x1103))+(((-1.0)*x1102*x1103))+(((-1.0)*x1101*x1102))),-1);
if(!x1104.valid){
continue;
}
CheckValue<IkReal> x1105=IKPowWithIntegerCheck(((-0.392938370078201)+(((-1.0)*x1102))),-1);
if(!x1105.valid){
continue;
}
if( IKabs(((x1104.value)*(((-0.154400562679713)+(((-0.287294539590756)*cj15))+(pz*pz)+(((-0.133642894569433)*(cj15*cj15))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*pz*(x1105.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1104.value)*(((-0.154400562679713)+(((-0.287294539590756)*cj15))+(pz*pz)+(((-0.133642894569433)*(cj15*cj15)))))))+IKsqr(((-1.0)*pz*(x1105.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x1104.value)*(((-0.154400562679713)+(((-0.287294539590756)*cj15))+(pz*pz)+(((-0.133642894569433)*(cj15*cj15)))))), ((-1.0)*pz*(x1105.value)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x1106=IKcos(j13);
IkReal x1107=IKsin(j13);
IkReal x1108=((0.365572010101202)*cj15);
IkReal x1109=(py*sj12);
IkReal x1110=(cj12*px);
IkReal x1111=(pz*x1106);
IkReal x1112=(x1107*x1110);
evalcond[0]=((((-0.392938370078201)*x1106))+pz+(((-1.0)*x1106*x1108)));
evalcond[1]=(((x1106*x1109))+(((-1.0)*pz*x1107))+((x1106*x1110)));
evalcond[2]=((((-1.0)*x1109))+(((-1.0)*x1110))+((x1107*x1108))+(((0.392938370078201)*x1107)));
evalcond[3]=((-0.392938370078201)+x1111+x1112+(((-1.0)*x1108))+((x1107*x1109)));
evalcond[4]=((-0.0207576681102795)+(((0.785876740156401)*x1111))+(((0.785876740156401)*x1112))+(((0.785876740156401)*x1107*x1109))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x1113 = IKatan2WithCheck(IkReal(((((-1.0)*py*sj12))+(((-1.0)*cj12*px)))),IkReal(((-1.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1113.valid){
continue;
}
CheckValue<IkReal> x1114=IKPowWithIntegerCheck(IKsign(((-0.392938370078201)+(((-0.365572010101202)*cj15)))),-1);
if(!x1114.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x1113.value)+(((1.5707963267949)*(x1114.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x1115=IKcos(j13);
IkReal x1116=IKsin(j13);
IkReal x1117=((0.365572010101202)*cj15);
IkReal x1118=(py*sj12);
IkReal x1119=(cj12*px);
IkReal x1120=(pz*x1115);
IkReal x1121=(x1116*x1119);
evalcond[0]=((((-0.392938370078201)*x1115))+pz+(((-1.0)*x1115*x1117)));
evalcond[1]=((((-1.0)*pz*x1116))+((x1115*x1119))+((x1115*x1118)));
evalcond[2]=((((-1.0)*x1119))+(((-1.0)*x1118))+((x1116*x1117))+(((0.392938370078201)*x1116)));
evalcond[3]=((-0.392938370078201)+x1120+x1121+((x1116*x1118))+(((-1.0)*x1117)));
evalcond[4]=((-0.0207576681102795)+(((0.785876740156401)*x1116*x1118))+(((0.785876740156401)*x1120))+(((0.785876740156401)*x1121))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x1122=IKPowWithIntegerCheck(IKsign(((0.392938370078201)+(((0.365572010101202)*cj15)))),-1);
if(!x1122.valid){
continue;
}
CheckValue<IkReal> x1123 = IKatan2WithCheck(IkReal((((cj12*px))+((py*sj12)))),IkReal(pz),IKFAST_ATAN2_MAGTHRESH);
if(!x1123.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1122.value)))+(x1123.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x1124=IKcos(j13);
IkReal x1125=IKsin(j13);
IkReal x1126=((0.365572010101202)*cj15);
IkReal x1127=(py*sj12);
IkReal x1128=(cj12*px);
IkReal x1129=(pz*x1124);
IkReal x1130=(x1125*x1128);
evalcond[0]=(pz+(((-0.392938370078201)*x1124))+(((-1.0)*x1124*x1126)));
evalcond[1]=((((-1.0)*pz*x1125))+((x1124*x1127))+((x1124*x1128)));
evalcond[2]=((((0.392938370078201)*x1125))+((x1125*x1126))+(((-1.0)*x1128))+(((-1.0)*x1127)));
evalcond[3]=((-0.392938370078201)+x1129+x1130+((x1125*x1127))+(((-1.0)*x1126)));
evalcond[4]=((-0.0207576681102795)+(((0.785876740156401)*x1129))+(((0.785876740156401)*x1130))+(((0.785876740156401)*x1125*x1127))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj14)))))+(IKabs(cj14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[3];
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
j13eval[0]=((1.07485901332934)+cj15);
j13eval[1]=IKsign(((0.392938370078201)+(((0.365572010101202)*cj15))));
j13eval[2]=((IKabs(pz))+(IKabs((((cj12*px))+((py*sj12))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
j13eval[0]=((-1.07485901332934)+(((-1.0)*cj15)));
j13eval[1]=((IKabs(((((-1.0)*py*sj12))+(((-1.0)*cj12*px)))))+(IKabs(pz)));
j13eval[2]=IKsign(((-0.392938370078201)+(((-0.365572010101202)*cj15))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[2];
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
IkReal x1131=(py*sj12);
IkReal x1132=((1.0)*cj15);
IkReal x1133=(cj12*px);
j13eval[0]=((((-1.0)*x1131*x1132))+(((-1.0)*x1132*x1133))+(((-1.07485901332934)*x1131))+(((-1.07485901332934)*x1133)));
j13eval[1]=((-1.07485901332934)+(((-1.0)*x1132)));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j13]

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1134=(cj12*px);
IkReal x1135=((0.365572010101202)*cj15);
IkReal x1136=(py*sj12);
CheckValue<IkReal> x1137=IKPowWithIntegerCheck(((((-1.0)*x1134*x1135))+(((-0.392938370078201)*x1134))+(((-0.392938370078201)*x1136))+(((-1.0)*x1135*x1136))),-1);
if(!x1137.valid){
continue;
}
CheckValue<IkReal> x1138=IKPowWithIntegerCheck(((-0.392938370078201)+(((-1.0)*x1135))),-1);
if(!x1138.valid){
continue;
}
if( IKabs(((x1137.value)*(((-0.154400562679713)+(((-0.287294539590756)*cj15))+(pz*pz)+(((-0.133642894569433)*(cj15*cj15))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*pz*(x1138.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1137.value)*(((-0.154400562679713)+(((-0.287294539590756)*cj15))+(pz*pz)+(((-0.133642894569433)*(cj15*cj15)))))))+IKsqr(((-1.0)*pz*(x1138.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x1137.value)*(((-0.154400562679713)+(((-0.287294539590756)*cj15))+(pz*pz)+(((-0.133642894569433)*(cj15*cj15)))))), ((-1.0)*pz*(x1138.value)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x1139=IKcos(j13);
IkReal x1140=IKsin(j13);
IkReal x1141=((0.365572010101202)*cj15);
IkReal x1142=(pz*x1139);
IkReal x1143=((1.0)*py*sj12);
IkReal x1144=((1.0)*cj12*px);
IkReal x1145=(cj12*px*x1140);
IkReal x1146=(py*sj12*x1140);
evalcond[0]=(pz+(((-0.392938370078201)*x1139))+(((-1.0)*x1139*x1141)));
evalcond[1]=(((x1140*x1141))+(((-1.0)*x1144))+(((-1.0)*x1143))+(((0.392938370078201)*x1140)));
evalcond[2]=(((pz*x1140))+(((-1.0)*x1139*x1144))+(((-1.0)*x1139*x1143)));
evalcond[3]=((-0.392938370078201)+x1142+x1146+x1145+(((-1.0)*x1141)));
evalcond[4]=((-0.0207576681102795)+(((0.785876740156401)*x1146))+(((0.785876740156401)*x1145))+(((0.785876740156401)*x1142))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x1147 = IKatan2WithCheck(IkReal(((((-1.0)*py*sj12))+(((-1.0)*cj12*px)))),IkReal(((-1.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1147.valid){
continue;
}
CheckValue<IkReal> x1148=IKPowWithIntegerCheck(IKsign(((-0.392938370078201)+(((-0.365572010101202)*cj15)))),-1);
if(!x1148.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x1147.value)+(((1.5707963267949)*(x1148.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x1149=IKcos(j13);
IkReal x1150=IKsin(j13);
IkReal x1151=((0.365572010101202)*cj15);
IkReal x1152=(pz*x1149);
IkReal x1153=((1.0)*py*sj12);
IkReal x1154=((1.0)*cj12*px);
IkReal x1155=(cj12*px*x1150);
IkReal x1156=(py*sj12*x1150);
evalcond[0]=((((-1.0)*x1149*x1151))+pz+(((-0.392938370078201)*x1149)));
evalcond[1]=((((-1.0)*x1154))+(((-1.0)*x1153))+(((0.392938370078201)*x1150))+((x1150*x1151)));
evalcond[2]=(((pz*x1150))+(((-1.0)*x1149*x1153))+(((-1.0)*x1149*x1154)));
evalcond[3]=((-0.392938370078201)+x1155+x1156+x1152+(((-1.0)*x1151)));
evalcond[4]=((-0.0207576681102795)+(((0.785876740156401)*x1155))+(((0.785876740156401)*x1156))+(((0.785876740156401)*x1152))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x1157=IKPowWithIntegerCheck(IKsign(((0.392938370078201)+(((0.365572010101202)*cj15)))),-1);
if(!x1157.valid){
continue;
}
CheckValue<IkReal> x1158 = IKatan2WithCheck(IkReal((((cj12*px))+((py*sj12)))),IkReal(pz),IKFAST_ATAN2_MAGTHRESH);
if(!x1158.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1157.value)))+(x1158.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x1159=IKcos(j13);
IkReal x1160=IKsin(j13);
IkReal x1161=((0.365572010101202)*cj15);
IkReal x1162=(pz*x1159);
IkReal x1163=((1.0)*py*sj12);
IkReal x1164=((1.0)*cj12*px);
IkReal x1165=(cj12*px*x1160);
IkReal x1166=(py*sj12*x1160);
evalcond[0]=((((-1.0)*x1159*x1161))+pz+(((-0.392938370078201)*x1159)));
evalcond[1]=((((-1.0)*x1164))+(((-1.0)*x1163))+((x1160*x1161))+(((0.392938370078201)*x1160)));
evalcond[2]=((((-1.0)*x1159*x1163))+(((-1.0)*x1159*x1164))+((pz*x1160)));
evalcond[3]=((-0.392938370078201)+x1165+x1166+x1162+(((-1.0)*x1161)));
evalcond[4]=((-0.0207576681102795)+(((-1.0)*pp))+(((0.785876740156401)*x1166))+(((0.785876740156401)*x1165))+(((0.785876740156401)*x1162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1167=cj14*cj14;
IkReal x1168=cj15*cj15;
IkReal x1169=(py*sj12);
IkReal x1170=(cj12*px);
IkReal x1171=((2.86963901467375e+27)*cj15);
IkReal x1172=((1.04905970285912e+27)*x1167);
IkReal x1173=((2.86963901467375e+27)*cj14*sj15);
CheckValue<IkReal> x1174=IKPowWithIntegerCheck(IKsign(((1.21200164758409e+27)+x1172+(((1.04905970285912e+27)*x1168))+(((-1.0)*x1168*x1172))+(((2.25518255427744e+27)*cj15)))),-1);
if(!x1174.valid){
continue;
}
CheckValue<IkReal> x1175 = IKatan2WithCheck(IkReal(((((-1.0)*pz*x1173))+((x1170*x1171))+(((3.0844573599236e+27)*x1170))+((x1169*x1171))+(((3.0844573599236e+27)*x1169)))),IkReal(((((3.0844573599236e+27)*pz))+((pz*x1171))+((x1170*x1173))+((x1169*x1173)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1175.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1174.value)))+(x1175.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1176=IKcos(j13);
IkReal x1177=IKsin(j13);
IkReal x1178=((1.0)*py);
IkReal x1179=(cj12*px);
IkReal x1180=(sj12*sj14);
IkReal x1181=(cj14*sj15);
IkReal x1182=(py*sj12);
IkReal x1183=(cj14*sj12);
IkReal x1184=((0.785876740156401)*x1177);
IkReal x1185=((0.365572010101202)*x1177);
IkReal x1186=((0.365572010101202)*x1176);
IkReal x1187=(pz*x1177);
IkReal x1188=(pz*x1176);
evalcond[0]=((((-0.392938370078201)*x1176))+pz+((x1181*x1185))+(((-1.0)*cj15*x1186)));
evalcond[1]=((-0.392938370078201)+x1188+(((-0.365572010101202)*cj15))+((x1177*x1182))+((x1177*x1179)));
evalcond[2]=((-0.0207576681102795)+(((0.785876740156401)*x1188))+((x1182*x1184))+((x1179*x1184))+(((-1.0)*pp)));
evalcond[3]=((((-1.0)*sj12*x1178))+((cj15*x1185))+((x1181*x1186))+(((0.392938370078201)*x1177))+(((-1.0)*x1179)));
evalcond[4]=(((sj14*x1176*x1179))+((py*x1176*x1180))+(((-1.0)*sj14*x1187))+(((-1.0)*cj12*cj14*x1178))+((px*x1183)));
evalcond[5]=((((-1.0)*cj12*sj14*x1178))+(((-1.0)*cj14*x1176*x1179))+((cj14*x1187))+(((-1.0)*x1176*x1178*x1183))+((px*x1180))+(((0.365572010101202)*sj15)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1189=(py*sj12);
IkReal x1190=((8.7454546344058e+27)*pz);
IkReal x1191=(cj12*px);
IkReal x1192=((3.1970934299486e+27)*cj15);
IkReal x1193=(cj14*sj15);
IkReal x1194=((4.06818686262725e+27)*pp);
CheckValue<IkReal> x1195=IKPowWithIntegerCheck(IKsign((((x1189*x1192))+(((3.43642468963626e+27)*x1189))+(((3.43642468963626e+27)*x1191))+((x1191*x1192))+(((3.1970934299486e+27)*pz*x1193)))),-1);
if(!x1195.valid){
continue;
}
CheckValue<IkReal> x1196 = IKatan2WithCheck(IkReal(((9.07676223872507e+25)+(((-1.0)*pz*x1190))+(((4.3727273172029e+27)*pp))+((cj15*x1194))+(((8.44460727050157e+25)*cj15)))),IkReal((((x1189*x1190))+((x1193*x1194))+((x1190*x1191))+(((8.44460727050157e+25)*x1193)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1196.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1195.value)))+(x1196.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1197=IKcos(j13);
IkReal x1198=IKsin(j13);
IkReal x1199=((1.0)*py);
IkReal x1200=(cj12*px);
IkReal x1201=(sj12*sj14);
IkReal x1202=(cj14*sj15);
IkReal x1203=(py*sj12);
IkReal x1204=(cj14*sj12);
IkReal x1205=((0.785876740156401)*x1198);
IkReal x1206=((0.365572010101202)*x1198);
IkReal x1207=((0.365572010101202)*x1197);
IkReal x1208=(pz*x1198);
IkReal x1209=(pz*x1197);
evalcond[0]=((((-1.0)*cj15*x1207))+((x1202*x1206))+(((-0.392938370078201)*x1197))+pz);
evalcond[1]=((-0.392938370078201)+x1209+(((-0.365572010101202)*cj15))+((x1198*x1203))+((x1198*x1200)));
evalcond[2]=((-0.0207576681102795)+(((-1.0)*pp))+((x1200*x1205))+((x1203*x1205))+(((0.785876740156401)*x1209)));
evalcond[3]=((((0.392938370078201)*x1198))+(((-1.0)*sj12*x1199))+((x1202*x1207))+(((-1.0)*x1200))+((cj15*x1206)));
evalcond[4]=(((px*x1204))+(((-1.0)*cj12*cj14*x1199))+((py*x1197*x1201))+(((-1.0)*sj14*x1208))+((sj14*x1197*x1200)));
evalcond[5]=(((px*x1201))+(((-1.0)*cj12*sj14*x1199))+(((-1.0)*cj14*x1197*x1200))+((cj14*x1208))+(((-1.0)*x1197*x1199*x1204))+(((0.365572010101202)*sj15)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1210=((32389191142403.0)*cj15);
IkReal x1211=(py*sj12);
IkReal x1212=(cj14*sj15);
IkReal x1213=(cj12*px);
IkReal x1214=((88598662500000.0)*pz);
CheckValue<IkReal> x1215 = IKatan2WithCheck(IkReal(((13679683342670.0)+(((11840581711480.3)*(cj15*cj15)))+(((25453911951294.3)*cj15))+(((-1.0)*pz*x1214)))),IkReal(((((11840581711480.3)*cj15*x1212))+((x1213*x1214))+(((12726955975647.1)*x1212))+((x1211*x1214)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1215.valid){
continue;
}
CheckValue<IkReal> x1216=IKPowWithIntegerCheck(IKsign((((x1210*x1211))+((x1210*x1213))+(((34813814033858.6)*x1213))+(((34813814033858.6)*x1211))+(((32389191142403.0)*pz*x1212)))),-1);
if(!x1216.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x1215.value)+(((1.5707963267949)*(x1216.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1217=IKcos(j13);
IkReal x1218=IKsin(j13);
IkReal x1219=((1.0)*py);
IkReal x1220=(cj12*px);
IkReal x1221=(sj12*sj14);
IkReal x1222=(cj14*sj15);
IkReal x1223=(py*sj12);
IkReal x1224=(cj14*sj12);
IkReal x1225=((0.785876740156401)*x1218);
IkReal x1226=((0.365572010101202)*x1218);
IkReal x1227=((0.365572010101202)*x1217);
IkReal x1228=(pz*x1218);
IkReal x1229=(pz*x1217);
evalcond[0]=((((-0.392938370078201)*x1217))+pz+((x1222*x1226))+(((-1.0)*cj15*x1227)));
evalcond[1]=((-0.392938370078201)+x1229+(((-0.365572010101202)*cj15))+((x1218*x1223))+((x1218*x1220)));
evalcond[2]=((-0.0207576681102795)+((x1223*x1225))+(((0.785876740156401)*x1229))+(((-1.0)*pp))+((x1220*x1225)));
evalcond[3]=((((-1.0)*x1220))+((cj15*x1226))+(((-1.0)*sj12*x1219))+(((0.392938370078201)*x1218))+((x1222*x1227)));
evalcond[4]=((((-1.0)*sj14*x1228))+(((-1.0)*cj12*cj14*x1219))+((py*x1217*x1221))+((px*x1224))+((sj14*x1217*x1220)));
evalcond[5]=(((cj14*x1228))+(((-1.0)*cj14*x1217*x1220))+(((-1.0)*cj12*sj14*x1219))+((px*x1221))+(((-1.0)*x1217*x1219*x1224))+(((0.365572010101202)*sj15)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
IkReal x1230=((-0.392938370078201)+(((-0.365572010101202)*cj15)));
CheckValue<IkReal> x1233 = IKatan2WithCheck(IkReal(x1230),IkReal(((0.365572010101202)*cj14*sj15)),IKFAST_ATAN2_MAGTHRESH);
if(!x1233.valid){
continue;
}
IkReal x1231=((1.0)*(x1233.value));
if((((x1230*x1230)+(((0.133642894569433)*(cj14*cj14)*(sj15*sj15))))) < -0.00001)
continue;
CheckValue<IkReal> x1234=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1230*x1230)+(((0.133642894569433)*(cj14*cj14)*(sj15*sj15)))))),-1);
if(!x1234.valid){
continue;
}
if( ((pz*(x1234.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x1234.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1232=IKasin((pz*(x1234.value)));
j13array[0]=((((-1.0)*x1232))+(((-1.0)*x1231)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
j13array[1]=((3.14159265358979)+x1232+(((-1.0)*x1231)));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
if( j13array[1] > IKPI )
{
    j13array[1]-=IK2PI;
}
else if( j13array[1] < -IKPI )
{    j13array[1]+=IK2PI;
}
j13valid[1] = true;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
IkReal j12eval[3];
IkReal x1235=pz*pz;
IkReal x1236=((32389191142403.0)*py);
IkReal x1237=((32389191142403.0)*px);
IkReal x1238=(pp*sj13);
IkReal x1239=((88598662500000.0)*cj13*pz);
IkReal x1240=(sj13*sj14*sj15);
IkReal x1241=(sj13*x1235);
j12eval[0]=(x1238+(((-1.0)*x1241)));
j12eval[1]=((IKabs((((x1236*x1240))+(((-1.0)*px*x1239))+(((34813814033858.6)*px))+((cj15*x1237)))))+(IKabs(((((34813814033858.6)*py))+((cj15*x1236))+(((-1.0)*py*x1239))+(((-1.0)*x1237*x1240))))));
j12eval[2]=IKsign(((((-88598662500000.0)*x1241))+(((88598662500000.0)*x1238))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
IkReal x1242=pz*pz;
IkReal x1243=((1.11282777406866e+28)*pp);
IkReal x1244=(pp*sj13);
IkReal x1245=((8.7454546344058e+27)*cj13*pz);
IkReal x1246=(sj13*x1242);
IkReal x1247=((3.1970934299486e+27)*sj13*sj14*sj15);
j12eval[0]=(x1244+(((-1.0)*x1246)));
j12eval[1]=((IKabs(((((-1.0)*px*x1247))+(((-1.0)*py*x1245))+(((2.30997095980183e+26)*py))+((py*x1243)))))+(IKabs(((((-1.0)*px*x1245))+(((2.30997095980183e+26)*px))+((py*x1247))+((px*x1243))))));
j12eval[2]=IKsign(((((8.7454546344058e+27)*x1244))+(((-8.7454546344058e+27)*x1246))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
IkReal x1248=pz*pz;
IkReal x1249=(cj13*cj14);
IkReal x1250=(py*sj13);
IkReal x1251=((32389191142403.0)*cj15);
IkReal x1252=(px*sj13);
IkReal x1253=((32389191142403.0)*py*sj15);
IkReal x1254=((32389191142403.0)*px*sj15);
j12eval[0]=((((-1.0)*x1248))+pp);
j12eval[1]=((IKabs(((((34813814033858.6)*x1250))+((x1250*x1251))+(((-1.0)*sj14*x1254))+((x1249*x1253)))))+(IKabs(((((34813814033858.6)*x1252))+((x1251*x1252))+((x1249*x1254))+((sj14*x1253))))));
j12eval[2]=IKsign(((((88598662500000.0)*pp))+(((-88598662500000.0)*x1248))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x1255=pz*pz;
IkReal x1256=(px*sj15);
IkReal x1257=(py*sj15);
j12eval[0]=(pp+(((-1.0)*x1255)));
j12eval[1]=((IKabs((((cj14*x1257))+(((-1.0)*sj14*x1256)))))+(IKabs((((cj14*x1256))+((sj14*x1257))))));
j12eval[2]=IKsign(((((-88598662500000.0)*x1255))+(((88598662500000.0)*pp))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x1258=cj14*cj14;
IkReal x1259=pz*pz;
IkReal x1260=((88598662500000.0)*cj14);
IkReal x1261=(cj14*sj14);
IkReal x1262=(px*sj15);
IkReal x1263=((1.0)*py*sj15);
j12eval[0]=((((-1.0)*cj14*pp))+((cj14*x1259)));
j12eval[1]=((IKabs(((((-1.0)*x1261*x1263))+(((-1.0)*x1258*x1262)))))+(IKabs(((((-1.0)*x1258*x1263))+((x1261*x1262))))));
j12eval[2]=IKsign(((((-1.0)*pp*x1260))+((x1259*x1260))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x1264=cj14*cj14;
IkReal x1265=pz*pz;
IkReal x1266=((88598662500000.0)*cj14);
IkReal x1267=(px*sj15);
IkReal x1268=((1.0)*cj14);
IkReal x1269=(py*sj15);
j12eval[0]=(((cj14*pp))+(((-1.0)*x1265*x1268)));
j12eval[1]=((IKabs((((x1264*x1267))+((cj14*sj14*x1269)))))+(IKabs(((((-1.0)*sj14*x1267*x1268))+((x1264*x1269))))));
j12eval[2]=IKsign(((((-1.0)*x1265*x1266))+((pp*x1266))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[4];
sj13=0;
cj13=1.0;
j13=0;
sj14=1.0;
cj14=0;
j14=1.5707963267949;
IkReal x1270=pz*pz;
j12eval[0]=(x1270+(((-1.0)*pp)));
j12eval[1]=1.04905970285912e+27;
j12eval[2]=sj15;
j12eval[3]=IKsign(((((88598662500000.0)*x1270))+(((-88598662500000.0)*pp))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  || IKabs(j12eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
sj13=0;
cj13=1.0;
j13=0;
sj14=1.0;
cj14=0;
j14=1.5707963267949;
sj15=0;
cj15=1.0;
j15=0;
j12eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x1272 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x1272.valid){
continue;
}
IkReal x1271=x1272.value;
j12array[0]=((-1.0)*x1271);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1271)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j12))))+(((-1.0)*py*(IKsin(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
sj13=0;
cj13=1.0;
j13=0;
sj14=1.0;
cj14=0;
j14=1.5707963267949;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j12eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x1274 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x1274.valid){
continue;
}
IkReal x1273=x1274.value;
j12array[0]=((-1.0)*x1273);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1273)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j12))))+(((-1.0)*py*(IKsin(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1275 = IKatan2WithCheck(IkReal(((32389191142403.0)*px*sj15)),IkReal(((-32389191142403.0)*py*sj15)),IKFAST_ATAN2_MAGTHRESH);
if(!x1275.valid){
continue;
}
CheckValue<IkReal> x1276=IKPowWithIntegerCheck(IKsign(((((-88598662500000.0)*pp))+(((88598662500000.0)*(pz*pz))))),-1);
if(!x1276.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1275.value)+(((1.5707963267949)*(x1276.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x1277=IKsin(j12);
IkReal x1278=IKcos(j12);
IkReal x1279=((1.0)*py);
evalcond[0]=((((-1.0)*x1277*x1279))+(((-1.0)*px*x1278)));
evalcond[1]=((((-1.0)*x1278*x1279))+((px*x1277))+(((0.365572010101202)*sj15)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[4];
sj13=0;
cj13=1.0;
j13=0;
sj14=-1.0;
cj14=0;
j14=-1.5707963267949;
IkReal x1280=pz*pz;
j12eval[0]=((((-1.0)*x1280))+pp);
j12eval[1]=1.04905970285912e+27;
j12eval[2]=sj15;
j12eval[3]=IKsign(((((-88598662500000.0)*x1280))+(((88598662500000.0)*pp))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  || IKabs(j12eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
sj13=0;
cj13=1.0;
j13=0;
sj14=-1.0;
cj14=0;
j14=-1.5707963267949;
sj15=0;
cj15=1.0;
j15=0;
j12eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x1282 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x1282.valid){
continue;
}
IkReal x1281=x1282.value;
j12array[0]=((-1.0)*x1281);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1281)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j12))))+(((-1.0)*py*(IKsin(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
sj13=0;
cj13=1.0;
j13=0;
sj14=-1.0;
cj14=0;
j14=-1.5707963267949;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j12eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x1284 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x1284.valid){
continue;
}
IkReal x1283=x1284.value;
j12array[0]=((-1.0)*x1283);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1283)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j12))))+(((-1.0)*py*(IKsin(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1285 = IKatan2WithCheck(IkReal(((32389191142403.0)*px*sj15)),IkReal(((-32389191142403.0)*py*sj15)),IKFAST_ATAN2_MAGTHRESH);
if(!x1285.valid){
continue;
}
CheckValue<IkReal> x1286=IKPowWithIntegerCheck(IKsign(((((-88598662500000.0)*(pz*pz)))+(((88598662500000.0)*pp)))),-1);
if(!x1286.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1285.value)+(((1.5707963267949)*(x1286.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x1287=IKsin(j12);
IkReal x1288=IKcos(j12);
IkReal x1289=((1.0)*py);
evalcond[0]=((((-1.0)*px*x1288))+(((-1.0)*x1287*x1289)));
evalcond[1]=((((-0.365572010101202)*sj15))+((px*x1287))+(((-1.0)*x1288*x1289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
sj13=0;
cj13=1.0;
j13=0;
sj15=0;
cj15=1.0;
j15=0;
j12eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
sj13=0;
cj13=1.0;
j13=0;
sj15=0;
cj15=1.0;
j15=0;
j12eval[0]=((IKabs((((py*sj14))+((cj14*px)))))+(IKabs((((px*sj14))+(((-1.0)*cj14*py))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
sj13=0;
cj13=1.0;
j13=0;
sj15=0;
cj15=1.0;
j15=0;
IkReal x1290=((1.0)*py);
j12eval[0]=((IKabs(((((-1.0)*sj14*x1290))+(((-1.0)*cj14*px)))))+(IKabs(((((-1.0)*cj14*x1290))+((px*sj14))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[4], cj12array[4], sj12array[4];
bool j12valid[4]={false};
_nj12 = 4;
j12array[0]=0;
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=1.5707963267949;
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
j12array[2]=3.14159265358979;
sj12array[2]=IKsin(j12array[2]);
cj12array[2]=IKcos(j12array[2]);
j12array[3]=-1.5707963267949;
sj12array[3]=IKsin(j12array[3]);
cj12array[3]=IKcos(j12array[3]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
if( j12array[2] > IKPI )
{
    j12array[2]-=IK2PI;
}
else if( j12array[2] < -IKPI )
{    j12array[2]+=IK2PI;
}
j12valid[2] = true;
if( j12array[3] > IKPI )
{
    j12array[3]-=IK2PI;
}
else if( j12array[3] < -IKPI )
{    j12array[3]+=IK2PI;
}
j12valid[3] = true;
for(int ij12 = 0; ij12 < 4; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 4; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
IkReal x1291=((1.0)*cj14);
CheckValue<IkReal> x1293 = IKatan2WithCheck(IkReal(((((-1.0)*py*sj14))+(((-1.0)*px*x1291)))),IkReal((((px*sj14))+(((-1.0)*py*x1291)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1293.valid){
continue;
}
IkReal x1292=x1293.value;
j12array[0]=((-1.0)*x1292);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1292)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[3];
IkReal x1294=IKsin(j12);
IkReal x1295=IKcos(j12);
IkReal x1296=((1.0)*x1295);
IkReal x1297=(py*x1294);
IkReal x1298=(px*x1294);
evalcond[0]=(x1298+(((-1.0)*py*x1296)));
evalcond[1]=((((-1.0)*x1297))+(((-1.0)*px*x1296)));
evalcond[2]=((((-1.0)*cj14*py*x1296))+((sj14*x1297))+((px*sj14*x1295))+((cj14*x1298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x1300 = IKatan2WithCheck(IkReal((((px*sj14))+(((-1.0)*cj14*py)))),IkReal((((py*sj14))+((cj14*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1300.valid){
continue;
}
IkReal x1299=x1300.value;
j12array[0]=((-1.0)*x1299);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1299)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[3];
IkReal x1301=IKsin(j12);
IkReal x1302=IKcos(j12);
IkReal x1303=((1.0)*py);
IkReal x1304=(px*x1301);
IkReal x1305=((1.0)*px*x1302);
evalcond[0]=(x1304+(((-1.0)*x1302*x1303)));
evalcond[1]=((((-1.0)*x1305))+(((-1.0)*x1301*x1303)));
evalcond[2]=((((-1.0)*sj14*x1302*x1303))+(((-1.0)*cj14*x1301*x1303))+(((-1.0)*cj14*x1305))+((sj14*x1304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x1307 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x1307.valid){
continue;
}
IkReal x1306=x1307.value;
j12array[0]=((-1.0)*x1306);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1306)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[3];
IkReal x1308=IKsin(j12);
IkReal x1309=IKcos(j12);
IkReal x1310=(py*sj14);
IkReal x1311=((1.0)*cj14*py);
IkReal x1312=(px*x1308);
IkReal x1313=((1.0)*x1309);
evalcond[0]=((((-1.0)*py*x1308))+(((-1.0)*px*x1313)));
evalcond[1]=(((px*sj14*x1309))+((x1308*x1310))+((cj14*x1312))+(((-1.0)*x1309*x1311)));
evalcond[2]=((((-1.0)*x1308*x1311))+(((-1.0)*x1310*x1313))+(((-1.0)*cj14*px*x1313))+((sj14*x1312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
sj13=0;
cj13=1.0;
j13=0;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j12eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
sj13=0;
cj13=1.0;
j13=0;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j12eval[0]=((IKabs((((py*sj14))+((cj14*px)))))+(IKabs((((px*sj14))+(((-1.0)*cj14*py))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
sj13=0;
cj13=1.0;
j13=0;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal x1314=((1.0)*py);
j12eval[0]=((IKabs(((((-1.0)*cj14*px))+(((-1.0)*sj14*x1314)))))+(IKabs((((px*sj14))+(((-1.0)*cj14*x1314))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[4], cj12array[4], sj12array[4];
bool j12valid[4]={false};
_nj12 = 4;
j12array[0]=0;
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=1.5707963267949;
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
j12array[2]=3.14159265358979;
sj12array[2]=IKsin(j12array[2]);
cj12array[2]=IKcos(j12array[2]);
j12array[3]=-1.5707963267949;
sj12array[3]=IKsin(j12array[3]);
cj12array[3]=IKcos(j12array[3]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
if( j12array[2] > IKPI )
{
    j12array[2]-=IK2PI;
}
else if( j12array[2] < -IKPI )
{    j12array[2]+=IK2PI;
}
j12valid[2] = true;
if( j12array[3] > IKPI )
{
    j12array[3]-=IK2PI;
}
else if( j12array[3] < -IKPI )
{    j12array[3]+=IK2PI;
}
j12valid[3] = true;
for(int ij12 = 0; ij12 < 4; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 4; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
IkReal x1315=((1.0)*cj14);
CheckValue<IkReal> x1317 = IKatan2WithCheck(IkReal(((((-1.0)*py*sj14))+(((-1.0)*px*x1315)))),IkReal((((px*sj14))+(((-1.0)*py*x1315)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1317.valid){
continue;
}
IkReal x1316=x1317.value;
j12array[0]=((-1.0)*x1316);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1316)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[3];
IkReal x1318=IKsin(j12);
IkReal x1319=IKcos(j12);
IkReal x1320=((1.0)*x1319);
IkReal x1321=(py*x1318);
IkReal x1322=(px*x1318);
evalcond[0]=(x1322+(((-1.0)*py*x1320)));
evalcond[1]=((((-1.0)*x1321))+(((-1.0)*px*x1320)));
evalcond[2]=(((px*sj14*x1319))+(((-1.0)*cj14*py*x1320))+((sj14*x1321))+((cj14*x1322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x1324 = IKatan2WithCheck(IkReal((((px*sj14))+(((-1.0)*cj14*py)))),IkReal((((py*sj14))+((cj14*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1324.valid){
continue;
}
IkReal x1323=x1324.value;
j12array[0]=((-1.0)*x1323);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1323)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[3];
IkReal x1325=IKsin(j12);
IkReal x1326=IKcos(j12);
IkReal x1327=((1.0)*py);
IkReal x1328=(px*x1325);
IkReal x1329=((1.0)*px*x1326);
evalcond[0]=(x1328+(((-1.0)*x1326*x1327)));
evalcond[1]=((((-1.0)*x1329))+(((-1.0)*x1325*x1327)));
evalcond[2]=((((-1.0)*cj14*x1329))+(((-1.0)*cj14*x1325*x1327))+(((-1.0)*sj14*x1326*x1327))+((sj14*x1328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x1331 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x1331.valid){
continue;
}
IkReal x1330=x1331.value;
j12array[0]=((-1.0)*x1330);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1330)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[3];
IkReal x1332=IKsin(j12);
IkReal x1333=IKcos(j12);
IkReal x1334=(py*sj14);
IkReal x1335=((1.0)*cj14*py);
IkReal x1336=(px*x1332);
IkReal x1337=((1.0)*x1333);
evalcond[0]=((((-1.0)*px*x1337))+(((-1.0)*py*x1332)));
evalcond[1]=(((px*sj14*x1333))+(((-1.0)*x1333*x1335))+((cj14*x1336))+((x1332*x1334)));
evalcond[2]=((((-1.0)*x1334*x1337))+((sj14*x1336))+(((-1.0)*cj14*px*x1337))+(((-1.0)*x1332*x1335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1338=cj14*cj14;
IkReal x1339=((88598662500000.0)*cj14);
IkReal x1340=(cj14*sj14);
IkReal x1341=((32389191142403.0)*px*sj15);
IkReal x1342=((32389191142403.0)*py*sj15);
CheckValue<IkReal> x1343 = IKatan2WithCheck(IkReal(((((-1.0)*x1340*x1341))+((x1338*x1342)))),IkReal((((x1340*x1342))+((x1338*x1341)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1343.valid){
continue;
}
CheckValue<IkReal> x1344=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1339*(pz*pz)))+((pp*x1339)))),-1);
if(!x1344.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1343.value)+(((1.5707963267949)*(x1344.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[4];
IkReal x1345=IKsin(j12);
IkReal x1346=IKcos(j12);
IkReal x1347=((0.365572010101202)*sj15);
IkReal x1348=((1.0)*cj14);
IkReal x1349=(py*x1345);
IkReal x1350=(px*x1345);
IkReal x1351=(px*x1346);
IkReal x1352=((1.0)*py*x1346);
evalcond[0]=(x1350+(((-1.0)*x1352))+((sj14*x1347)));
evalcond[1]=((((-1.0)*x1351))+((cj14*x1347))+(((-1.0)*x1349)));
evalcond[2]=(((sj14*x1349))+((sj14*x1351))+((cj14*x1350))+(((-1.0)*py*x1346*x1348)));
evalcond[3]=(x1347+((sj14*x1350))+(((-1.0)*x1348*x1349))+(((-1.0)*x1348*x1351))+(((-1.0)*sj14*x1352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1353=cj14*cj14;
IkReal x1354=((88598662500000.0)*cj14);
IkReal x1355=(cj14*sj14);
IkReal x1356=((32389191142403.0)*px*sj15);
IkReal x1357=((32389191142403.0)*py*sj15);
CheckValue<IkReal> x1358=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*x1354))+((x1354*(pz*pz))))),-1);
if(!x1358.valid){
continue;
}
CheckValue<IkReal> x1359 = IKatan2WithCheck(IkReal((((x1355*x1356))+(((-1.0)*x1353*x1357)))),IkReal(((((-1.0)*x1355*x1357))+(((-1.0)*x1353*x1356)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1359.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1358.value)))+(x1359.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[4];
IkReal x1360=IKsin(j12);
IkReal x1361=IKcos(j12);
IkReal x1362=((0.365572010101202)*sj15);
IkReal x1363=((1.0)*cj14);
IkReal x1364=(py*x1360);
IkReal x1365=(px*x1360);
IkReal x1366=(px*x1361);
IkReal x1367=((1.0)*py*x1361);
evalcond[0]=(x1365+((sj14*x1362))+(((-1.0)*x1367)));
evalcond[1]=((((-1.0)*x1366))+(((-1.0)*x1364))+((cj14*x1362)));
evalcond[2]=((((-1.0)*py*x1361*x1363))+((sj14*x1364))+((sj14*x1366))+((cj14*x1365)));
evalcond[3]=(x1362+((sj14*x1365))+(((-1.0)*sj14*x1367))+(((-1.0)*x1363*x1366))+(((-1.0)*x1363*x1364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1368=((32389191142403.0)*sj15);
CheckValue<IkReal> x1369 = IKatan2WithCheck(IkReal(((((-1.0)*px*sj14*x1368))+((cj14*py*x1368)))),IkReal((((cj14*px*x1368))+((py*sj14*x1368)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1369.valid){
continue;
}
CheckValue<IkReal> x1370=IKPowWithIntegerCheck(IKsign(((((-88598662500000.0)*(pz*pz)))+(((88598662500000.0)*pp)))),-1);
if(!x1370.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1369.value)+(((1.5707963267949)*(x1370.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[4];
IkReal x1371=IKsin(j12);
IkReal x1372=IKcos(j12);
IkReal x1373=((0.365572010101202)*sj15);
IkReal x1374=((1.0)*cj14);
IkReal x1375=(py*x1371);
IkReal x1376=(px*x1371);
IkReal x1377=(px*x1372);
IkReal x1378=((1.0)*py*x1372);
evalcond[0]=(x1376+(((-1.0)*x1378))+((sj14*x1373)));
evalcond[1]=((((-1.0)*x1377))+(((-1.0)*x1375))+((cj14*x1373)));
evalcond[2]=((((-1.0)*py*x1372*x1374))+((sj14*x1377))+((sj14*x1375))+((cj14*x1376)));
evalcond[3]=(x1373+(((-1.0)*sj14*x1378))+(((-1.0)*x1374*x1377))+(((-1.0)*x1374*x1375))+((sj14*x1376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x1379=pz*pz;
IkReal x1380=(px*sj15);
IkReal x1381=(py*sj15);
j12eval[0]=(x1379+(((-1.0)*pp)));
j12eval[1]=((IKabs((((sj14*x1380))+((cj14*x1381)))))+(IKabs((((cj14*x1380))+(((-1.0)*sj14*x1381))))));
j12eval[2]=IKsign(((((88598662500000.0)*x1379))+(((-88598662500000.0)*pp))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x1382=pz*pz;
IkReal x1383=cj14*cj14;
IkReal x1384=((88598662500000.0)*cj14);
IkReal x1385=(px*sj15);
IkReal x1386=(cj14*sj14);
IkReal x1387=(py*sj15);
j12eval[0]=((((-1.0)*cj14*pp))+((cj14*x1382)));
j12eval[1]=IKsign(((((-1.0)*pp*x1384))+((x1382*x1384))));
j12eval[2]=((IKabs(((((-1.0)*x1386*x1387))+((x1383*x1385)))))+(IKabs((((x1385*x1386))+((x1383*x1387))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x1388=cj14*cj14;
IkReal x1389=pz*pz;
IkReal x1390=((88598662500000.0)*cj14);
IkReal x1391=((1.0)*sj15);
IkReal x1392=(cj14*sj14);
j12eval[0]=(((cj14*pp))+(((-1.0)*cj14*x1389)));
j12eval[1]=((IKabs((((py*sj15*x1392))+(((-1.0)*px*x1388*x1391)))))+(IKabs(((((-1.0)*py*x1388*x1391))+(((-1.0)*px*x1391*x1392))))));
j12eval[2]=IKsign(((((-1.0)*x1389*x1390))+((pp*x1390))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[4];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj14=1.0;
cj14=0;
j14=1.5707963267949;
IkReal x1393=pz*pz;
j12eval[0]=(x1393+(((-1.0)*pp)));
j12eval[1]=1.04905970285912e+27;
j12eval[2]=sj15;
j12eval[3]=IKsign(((((88598662500000.0)*x1393))+(((-88598662500000.0)*pp))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  || IKabs(j12eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj14=1.0;
cj14=0;
j14=1.5707963267949;
sj15=0;
cj15=1.0;
j15=0;
j12eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x1395 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x1395.valid){
continue;
}
IkReal x1394=x1395.value;
j12array[0]=((-1.0)*x1394);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1394)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j12))))+(((-1.0)*py*(IKsin(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj14=1.0;
cj14=0;
j14=1.5707963267949;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j12eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x1397 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x1397.valid){
continue;
}
IkReal x1396=x1397.value;
j12array[0]=((-1.0)*x1396);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1396)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j12))))+(((-1.0)*py*(IKsin(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1398 = IKatan2WithCheck(IkReal(((32389191142403.0)*px*sj15)),IkReal(((-32389191142403.0)*py*sj15)),IKFAST_ATAN2_MAGTHRESH);
if(!x1398.valid){
continue;
}
CheckValue<IkReal> x1399=IKPowWithIntegerCheck(IKsign(((((-88598662500000.0)*pp))+(((88598662500000.0)*(pz*pz))))),-1);
if(!x1399.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1398.value)+(((1.5707963267949)*(x1399.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x1400=IKsin(j12);
IkReal x1401=IKcos(j12);
IkReal x1402=((1.0)*py);
evalcond[0]=((((-1.0)*x1400*x1402))+(((-1.0)*px*x1401)));
evalcond[1]=(((px*x1400))+(((-1.0)*x1401*x1402))+(((0.365572010101202)*sj15)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[4];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj14=-1.0;
cj14=0;
j14=-1.5707963267949;
IkReal x1403=pz*pz;
j12eval[0]=((((-1.0)*x1403))+pp);
j12eval[1]=1.04905970285912e+27;
j12eval[2]=sj15;
j12eval[3]=IKsign(((((-88598662500000.0)*x1403))+(((88598662500000.0)*pp))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  || IKabs(j12eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj14=-1.0;
cj14=0;
j14=-1.5707963267949;
sj15=0;
cj15=1.0;
j15=0;
j12eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x1405 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x1405.valid){
continue;
}
IkReal x1404=x1405.value;
j12array[0]=((-1.0)*x1404);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1404)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j12))))+(((-1.0)*py*(IKsin(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj14=-1.0;
cj14=0;
j14=-1.5707963267949;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j12eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x1407 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x1407.valid){
continue;
}
IkReal x1406=x1407.value;
j12array[0]=((-1.0)*x1406);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1406)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j12))))+(((-1.0)*py*(IKsin(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1408 = IKatan2WithCheck(IkReal(((32389191142403.0)*px*sj15)),IkReal(((-32389191142403.0)*py*sj15)),IKFAST_ATAN2_MAGTHRESH);
if(!x1408.valid){
continue;
}
CheckValue<IkReal> x1409=IKPowWithIntegerCheck(IKsign(((((-88598662500000.0)*(pz*pz)))+(((88598662500000.0)*pp)))),-1);
if(!x1409.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1408.value)+(((1.5707963267949)*(x1409.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x1410=IKsin(j12);
IkReal x1411=IKcos(j12);
IkReal x1412=((1.0)*py);
evalcond[0]=((((-1.0)*x1410*x1412))+(((-1.0)*px*x1411)));
evalcond[1]=((((-0.365572010101202)*sj15))+(((-1.0)*x1411*x1412))+((px*x1410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=0;
cj15=1.0;
j15=0;
j12eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=0;
cj15=1.0;
j15=0;
j12eval[0]=((IKabs((((px*sj14))+((cj14*py)))))+(IKabs((((cj14*px))+(((-1.0)*py*sj14))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=0;
cj15=1.0;
j15=0;
IkReal x1413=((1.0)*sj14);
j12eval[0]=((IKabs(((((-1.0)*cj14*py))+(((-1.0)*px*x1413)))))+(IKabs((((cj14*px))+(((-1.0)*py*x1413))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[4], cj12array[4], sj12array[4];
bool j12valid[4]={false};
_nj12 = 4;
j12array[0]=0;
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=1.5707963267949;
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
j12array[2]=3.14159265358979;
sj12array[2]=IKsin(j12array[2]);
cj12array[2]=IKcos(j12array[2]);
j12array[3]=-1.5707963267949;
sj12array[3]=IKsin(j12array[3]);
cj12array[3]=IKcos(j12array[3]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
if( j12array[2] > IKPI )
{
    j12array[2]-=IK2PI;
}
else if( j12array[2] < -IKPI )
{    j12array[2]+=IK2PI;
}
j12valid[2] = true;
if( j12array[3] > IKPI )
{
    j12array[3]-=IK2PI;
}
else if( j12array[3] < -IKPI )
{    j12array[3]+=IK2PI;
}
j12valid[3] = true;
for(int ij12 = 0; ij12 < 4; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 4; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
IkReal x1414=((1.0)*py);
CheckValue<IkReal> x1416 = IKatan2WithCheck(IkReal(((((-1.0)*cj14*x1414))+(((-1.0)*px*sj14)))),IkReal((((cj14*px))+(((-1.0)*sj14*x1414)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1416.valid){
continue;
}
IkReal x1415=x1416.value;
j12array[0]=((-1.0)*x1415);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1415)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[3];
IkReal x1417=IKsin(j12);
IkReal x1418=IKcos(j12);
IkReal x1419=((1.0)*x1418);
IkReal x1420=(px*x1417);
IkReal x1421=(py*x1417);
evalcond[0]=(x1420+(((-1.0)*py*x1419)));
evalcond[1]=((((-1.0)*x1421))+(((-1.0)*px*x1419)));
evalcond[2]=(((cj14*x1421))+((sj14*x1420))+(((-1.0)*py*sj14*x1419))+((cj14*px*x1418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x1423 = IKatan2WithCheck(IkReal((((cj14*px))+(((-1.0)*py*sj14)))),IkReal((((px*sj14))+((cj14*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1423.valid){
continue;
}
IkReal x1422=x1423.value;
j12array[0]=((-1.0)*x1422);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1422)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[3];
IkReal x1424=IKsin(j12);
IkReal x1425=IKcos(j12);
IkReal x1426=((1.0)*x1425);
IkReal x1427=(px*x1424);
IkReal x1428=((1.0)*py*x1424);
evalcond[0]=((((-1.0)*py*x1426))+x1427);
evalcond[1]=((((-1.0)*px*x1426))+(((-1.0)*x1428)));
evalcond[2]=((((-1.0)*cj14*py*x1426))+((cj14*x1427))+(((-1.0)*px*sj14*x1426))+(((-1.0)*sj14*x1428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x1430 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x1430.valid){
continue;
}
IkReal x1429=x1430.value;
j12array[0]=((-1.0)*x1429);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1429)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[3];
IkReal x1431=IKsin(j12);
IkReal x1432=IKcos(j12);
IkReal x1433=((1.0)*py);
IkReal x1434=((1.0)*px);
IkReal x1435=(cj14*x1432);
IkReal x1436=(cj14*x1431);
IkReal x1437=(sj14*x1432);
IkReal x1438=(sj14*x1431);
evalcond[0]=((((-1.0)*x1431*x1433))+(((-1.0)*x1432*x1434)));
evalcond[1]=(((px*x1435))+((px*x1438))+((py*x1436))+(((-1.0)*x1433*x1437)));
evalcond[2]=(((px*x1436))+(((-1.0)*x1434*x1437))+(((-1.0)*x1433*x1435))+(((-1.0)*x1433*x1438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j12eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j12eval[0]=((IKabs((((px*sj14))+((cj14*py)))))+(IKabs((((cj14*px))+(((-1.0)*py*sj14))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal x1439=((1.0)*sj14);
j12eval[0]=((IKabs(((((-1.0)*cj14*py))+(((-1.0)*px*x1439)))))+(IKabs((((cj14*px))+(((-1.0)*py*x1439))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[4], cj12array[4], sj12array[4];
bool j12valid[4]={false};
_nj12 = 4;
j12array[0]=0;
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=1.5707963267949;
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
j12array[2]=3.14159265358979;
sj12array[2]=IKsin(j12array[2]);
cj12array[2]=IKcos(j12array[2]);
j12array[3]=-1.5707963267949;
sj12array[3]=IKsin(j12array[3]);
cj12array[3]=IKcos(j12array[3]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
if( j12array[2] > IKPI )
{
    j12array[2]-=IK2PI;
}
else if( j12array[2] < -IKPI )
{    j12array[2]+=IK2PI;
}
j12valid[2] = true;
if( j12array[3] > IKPI )
{
    j12array[3]-=IK2PI;
}
else if( j12array[3] < -IKPI )
{    j12array[3]+=IK2PI;
}
j12valid[3] = true;
for(int ij12 = 0; ij12 < 4; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 4; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
IkReal x1440=((1.0)*py);
CheckValue<IkReal> x1442 = IKatan2WithCheck(IkReal(((((-1.0)*cj14*x1440))+(((-1.0)*px*sj14)))),IkReal(((((-1.0)*sj14*x1440))+((cj14*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1442.valid){
continue;
}
IkReal x1441=x1442.value;
j12array[0]=((-1.0)*x1441);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1441)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[3];
IkReal x1443=IKsin(j12);
IkReal x1444=IKcos(j12);
IkReal x1445=((1.0)*x1444);
IkReal x1446=(px*x1443);
IkReal x1447=(py*x1443);
evalcond[0]=((((-1.0)*py*x1445))+x1446);
evalcond[1]=((((-1.0)*px*x1445))+(((-1.0)*x1447)));
evalcond[2]=((((-1.0)*py*sj14*x1445))+((cj14*px*x1444))+((cj14*x1447))+((sj14*x1446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x1449 = IKatan2WithCheck(IkReal((((cj14*px))+(((-1.0)*py*sj14)))),IkReal((((px*sj14))+((cj14*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1449.valid){
continue;
}
IkReal x1448=x1449.value;
j12array[0]=((-1.0)*x1448);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1448)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[3];
IkReal x1450=IKsin(j12);
IkReal x1451=IKcos(j12);
IkReal x1452=((1.0)*x1451);
IkReal x1453=(px*x1450);
IkReal x1454=((1.0)*py*x1450);
evalcond[0]=(x1453+(((-1.0)*py*x1452)));
evalcond[1]=((((-1.0)*x1454))+(((-1.0)*px*x1452)));
evalcond[2]=(((cj14*x1453))+(((-1.0)*sj14*x1454))+(((-1.0)*cj14*py*x1452))+(((-1.0)*px*sj14*x1452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x1456 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x1456.valid){
continue;
}
IkReal x1455=x1456.value;
j12array[0]=((-1.0)*x1455);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1455)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[3];
IkReal x1457=IKsin(j12);
IkReal x1458=IKcos(j12);
IkReal x1459=((1.0)*py);
IkReal x1460=((1.0)*px);
IkReal x1461=(cj14*x1458);
IkReal x1462=(cj14*x1457);
IkReal x1463=(sj14*x1458);
IkReal x1464=(sj14*x1457);
evalcond[0]=((((-1.0)*x1457*x1459))+(((-1.0)*x1458*x1460)));
evalcond[1]=(((py*x1462))+(((-1.0)*x1459*x1463))+((px*x1464))+((px*x1461)));
evalcond[2]=((((-1.0)*x1459*x1464))+(((-1.0)*x1459*x1461))+((px*x1462))+(((-1.0)*x1460*x1463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1465=cj14*cj14;
IkReal x1466=((88598662500000.0)*cj14);
IkReal x1467=(cj14*sj14);
IkReal x1468=((32389191142403.0)*px*sj15);
IkReal x1469=((32389191142403.0)*py*sj15);
CheckValue<IkReal> x1470=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1466*(pz*pz)))+((pp*x1466)))),-1);
if(!x1470.valid){
continue;
}
CheckValue<IkReal> x1471 = IKatan2WithCheck(IkReal(((((-1.0)*x1467*x1468))+(((-1.0)*x1465*x1469)))),IkReal((((x1467*x1469))+(((-1.0)*x1465*x1468)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1471.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1470.value)))+(x1471.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[4];
IkReal x1472=IKsin(j12);
IkReal x1473=IKcos(j12);
IkReal x1474=((0.365572010101202)*sj15);
IkReal x1475=(cj14*x1472);
IkReal x1476=(px*x1472);
IkReal x1477=((1.0)*py*x1473);
IkReal x1478=((1.0)*px*x1473);
IkReal x1479=((1.0)*py*x1472);
evalcond[0]=(x1476+(((-1.0)*x1477))+((sj14*x1474)));
evalcond[1]=((((-1.0)*x1479))+(((-1.0)*x1478))+(((-1.0)*cj14*x1474)));
evalcond[2]=((((-1.0)*sj14*x1479))+(((-1.0)*sj14*x1478))+(((-1.0)*cj14*x1477))+((px*x1475)));
evalcond[3]=((((-1.0)*sj14*x1477))+((cj14*px*x1473))+x1474+((py*x1475))+((sj14*x1476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1480=cj14*cj14;
IkReal x1481=((88598662500000.0)*cj14);
IkReal x1482=(cj14*sj14);
IkReal x1483=((32389191142403.0)*px*sj15);
IkReal x1484=((32389191142403.0)*py*sj15);
CheckValue<IkReal> x1485 = IKatan2WithCheck(IkReal((((x1482*x1483))+((x1480*x1484)))),IkReal(((((-1.0)*x1482*x1484))+((x1480*x1483)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1485.valid){
continue;
}
CheckValue<IkReal> x1486=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*x1481))+((x1481*(pz*pz))))),-1);
if(!x1486.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1485.value)+(((1.5707963267949)*(x1486.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[4];
IkReal x1487=IKsin(j12);
IkReal x1488=IKcos(j12);
IkReal x1489=((0.365572010101202)*sj15);
IkReal x1490=(cj14*x1487);
IkReal x1491=(px*x1487);
IkReal x1492=((1.0)*py*x1488);
IkReal x1493=((1.0)*px*x1488);
IkReal x1494=((1.0)*py*x1487);
evalcond[0]=(((sj14*x1489))+(((-1.0)*x1492))+x1491);
evalcond[1]=((((-1.0)*cj14*x1489))+(((-1.0)*x1493))+(((-1.0)*x1494)));
evalcond[2]=((((-1.0)*cj14*x1492))+(((-1.0)*sj14*x1493))+(((-1.0)*sj14*x1494))+((px*x1490)));
evalcond[3]=(((py*x1490))+((cj14*px*x1488))+x1489+(((-1.0)*sj14*x1492))+((sj14*x1491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1495=((32389191142403.0)*sj15);
CheckValue<IkReal> x1496 = IKatan2WithCheck(IkReal((((px*sj14*x1495))+((cj14*py*x1495)))),IkReal((((cj14*px*x1495))+(((-1.0)*py*sj14*x1495)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1496.valid){
continue;
}
CheckValue<IkReal> x1497=IKPowWithIntegerCheck(IKsign(((((-88598662500000.0)*pp))+(((88598662500000.0)*(pz*pz))))),-1);
if(!x1497.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1496.value)+(((1.5707963267949)*(x1497.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[4];
IkReal x1498=IKsin(j12);
IkReal x1499=IKcos(j12);
IkReal x1500=((0.365572010101202)*sj15);
IkReal x1501=(cj14*x1498);
IkReal x1502=(px*x1498);
IkReal x1503=((1.0)*py*x1499);
IkReal x1504=((1.0)*px*x1499);
IkReal x1505=((1.0)*py*x1498);
evalcond[0]=((((-1.0)*x1503))+x1502+((sj14*x1500)));
evalcond[1]=((((-1.0)*x1505))+(((-1.0)*x1504))+(((-1.0)*cj14*x1500)));
evalcond[2]=((((-1.0)*cj14*x1503))+(((-1.0)*sj14*x1505))+(((-1.0)*sj14*x1504))+((px*x1501)));
evalcond[3]=(((cj14*px*x1499))+x1500+((py*x1501))+(((-1.0)*sj14*x1503))+((sj14*x1502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1506=(cj13*cj14);
IkReal x1507=(py*sj13);
IkReal x1508=((32389191142403.0)*cj15);
IkReal x1509=(px*sj13);
IkReal x1510=((32389191142403.0)*py*sj15);
IkReal x1511=((32389191142403.0)*px*sj15);
CheckValue<IkReal> x1512 = IKatan2WithCheck(IkReal((((x1506*x1510))+(((34813814033858.6)*x1507))+((x1507*x1508))+(((-1.0)*sj14*x1511)))),IkReal((((x1508*x1509))+((x1506*x1511))+(((34813814033858.6)*x1509))+((sj14*x1510)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1512.valid){
continue;
}
CheckValue<IkReal> x1513=IKPowWithIntegerCheck(IKsign(((((-88598662500000.0)*(pz*pz)))+(((88598662500000.0)*pp)))),-1);
if(!x1513.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1512.value)+(((1.5707963267949)*(x1513.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1514=IKsin(j12);
IkReal x1515=IKcos(j12);
IkReal x1516=((0.365572010101202)*sj15);
IkReal x1517=(cj14*px);
IkReal x1518=((0.785876740156401)*sj13);
IkReal x1519=(cj13*pz);
IkReal x1520=(cj13*cj14);
IkReal x1521=((0.365572010101202)*cj15);
IkReal x1522=(pz*sj13);
IkReal x1523=(cj13*sj14);
IkReal x1524=(px*x1515);
IkReal x1525=((1.0)*x1515);
IkReal x1526=(px*x1514);
IkReal x1527=(py*x1514);
IkReal x1528=((1.0)*x1527);
evalcond[0]=(x1526+(((-1.0)*py*x1525))+((sj14*x1516)));
evalcond[1]=((-0.392938370078201)+(((-1.0)*x1521))+x1519+((sj13*x1524))+((sj13*x1527)));
evalcond[2]=((-0.0207576681102795)+((x1518*x1527))+((x1518*x1524))+(((-1.0)*pp))+(((0.785876740156401)*x1519)));
evalcond[3]=((((-1.0)*x1528))+(((0.392938370078201)*sj13))+((sj13*x1521))+((x1516*x1520))+(((-1.0)*x1524)));
evalcond[4]=(((x1514*x1517))+(((-1.0)*sj14*x1522))+((x1523*x1527))+((x1523*x1524))+(((-1.0)*cj14*py*x1525)));
evalcond[5]=((((-1.0)*py*sj14*x1525))+(((-1.0)*cj13*x1517*x1525))+x1516+((sj14*x1526))+((cj14*x1522))+(((-1.0)*x1520*x1528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1529=((1.11282777406866e+28)*pp);
IkReal x1530=((8.7454546344058e+27)*sj13);
IkReal x1531=((8.7454546344058e+27)*cj13*pz);
IkReal x1532=((3.1970934299486e+27)*sj13*sj14*sj15);
CheckValue<IkReal> x1533=IKPowWithIntegerCheck(IKsign((((pp*x1530))+(((-1.0)*x1530*(pz*pz))))),-1);
if(!x1533.valid){
continue;
}
CheckValue<IkReal> x1534 = IKatan2WithCheck(IkReal(((((2.30997095980183e+26)*py))+(((-1.0)*px*x1532))+(((-1.0)*py*x1531))+((py*x1529)))),IkReal(((((2.30997095980183e+26)*px))+((px*x1529))+(((-1.0)*px*x1531))+((py*x1532)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1534.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1533.value)))+(x1534.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1535=IKsin(j12);
IkReal x1536=IKcos(j12);
IkReal x1537=((0.365572010101202)*sj15);
IkReal x1538=(cj14*px);
IkReal x1539=((0.785876740156401)*sj13);
IkReal x1540=(cj13*pz);
IkReal x1541=(cj13*cj14);
IkReal x1542=((0.365572010101202)*cj15);
IkReal x1543=(pz*sj13);
IkReal x1544=(cj13*sj14);
IkReal x1545=(px*x1536);
IkReal x1546=((1.0)*x1536);
IkReal x1547=(px*x1535);
IkReal x1548=(py*x1535);
IkReal x1549=((1.0)*x1548);
evalcond[0]=((((-1.0)*py*x1546))+x1547+((sj14*x1537)));
evalcond[1]=((-0.392938370078201)+((sj13*x1545))+((sj13*x1548))+x1540+(((-1.0)*x1542)));
evalcond[2]=((-0.0207576681102795)+((x1539*x1545))+((x1539*x1548))+(((0.785876740156401)*x1540))+(((-1.0)*pp)));
evalcond[3]=((((-1.0)*x1545))+((x1537*x1541))+(((0.392938370078201)*sj13))+((sj13*x1542))+(((-1.0)*x1549)));
evalcond[4]=((((-1.0)*cj14*py*x1546))+(((-1.0)*sj14*x1543))+((x1544*x1545))+((x1544*x1548))+((x1535*x1538)));
evalcond[5]=(((sj14*x1547))+(((-1.0)*cj13*x1538*x1546))+x1537+(((-1.0)*x1541*x1549))+((cj14*x1543))+(((-1.0)*py*sj14*x1546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1550=((32389191142403.0)*py);
IkReal x1551=((32389191142403.0)*px);
IkReal x1552=((88598662500000.0)*sj13);
IkReal x1553=(sj13*sj14*sj15);
IkReal x1554=((88598662500000.0)*cj13*pz);
CheckValue<IkReal> x1555 = IKatan2WithCheck(IkReal((((cj15*x1550))+(((34813814033858.6)*py))+(((-1.0)*py*x1554))+(((-1.0)*x1551*x1553)))),IkReal((((cj15*x1551))+(((34813814033858.6)*px))+((x1550*x1553))+(((-1.0)*px*x1554)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1555.valid){
continue;
}
CheckValue<IkReal> x1556=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1552*(pz*pz)))+((pp*x1552)))),-1);
if(!x1556.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1555.value)+(((1.5707963267949)*(x1556.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1557=IKsin(j12);
IkReal x1558=IKcos(j12);
IkReal x1559=((0.365572010101202)*sj15);
IkReal x1560=(cj14*px);
IkReal x1561=((0.785876740156401)*sj13);
IkReal x1562=(cj13*pz);
IkReal x1563=(cj13*cj14);
IkReal x1564=((0.365572010101202)*cj15);
IkReal x1565=(pz*sj13);
IkReal x1566=(cj13*sj14);
IkReal x1567=(px*x1558);
IkReal x1568=((1.0)*x1558);
IkReal x1569=(px*x1557);
IkReal x1570=(py*x1557);
IkReal x1571=((1.0)*x1570);
evalcond[0]=(((sj14*x1559))+(((-1.0)*py*x1568))+x1569);
evalcond[1]=((-0.392938370078201)+((sj13*x1567))+((sj13*x1570))+x1562+(((-1.0)*x1564)));
evalcond[2]=((-0.0207576681102795)+(((0.785876740156401)*x1562))+(((-1.0)*pp))+((x1561*x1567))+((x1561*x1570)));
evalcond[3]=((((0.392938370078201)*sj13))+((sj13*x1564))+(((-1.0)*x1571))+((x1559*x1563))+(((-1.0)*x1567)));
evalcond[4]=(((x1566*x1567))+(((-1.0)*sj14*x1565))+((x1566*x1570))+((x1557*x1560))+(((-1.0)*cj14*py*x1568)));
evalcond[5]=(((sj14*x1569))+(((-1.0)*py*sj14*x1568))+x1559+(((-1.0)*x1563*x1571))+(((-1.0)*cj13*x1560*x1568))+((cj14*x1565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x1574 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x1574.valid){
continue;
}
IkReal x1572=((1.0)*(x1574.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x1575=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x1575.valid){
continue;
}
if( (((0.365572010101202)*sj14*sj15*(x1575.value))) < -1-IKFAST_SINCOS_THRESH || (((0.365572010101202)*sj14*sj15*(x1575.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1573=IKasin(((0.365572010101202)*sj14*sj15*(x1575.value)));
j12array[0]=((((-1.0)*x1572))+(((-1.0)*x1573)));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+x1573+(((-1.0)*x1572)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

{
IkReal j13eval[3];
IkReal x1576=(py*sj12);
IkReal x1577=(cj12*px);
IkReal x1578=(cj14*sj15);
IkReal x1579=((32389191142403.0)*cj15);
IkReal x1580=((88598662500000.0)*pz);
j13eval[0]=((((1.07485901332934)*x1576))+(((1.07485901332934)*x1577))+((cj15*x1577))+((cj15*x1576))+((pz*x1578)));
j13eval[1]=IKsign(((((32389191142403.0)*pz*x1578))+((x1576*x1579))+((x1577*x1579))+(((34813814033858.6)*x1577))+(((34813814033858.6)*x1576))));
j13eval[2]=((IKabs((((x1576*x1580))+(((12726955975647.1)*x1578))+((x1577*x1580))+(((11840581711480.3)*cj15*x1578)))))+(IKabs(((13679683342670.0)+(((-1.0)*pz*x1580))+(((11840581711480.3)*(cj15*cj15)))+(((25453911951294.3)*cj15))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
IkReal x1581=(py*sj12);
IkReal x1582=((8.7454546344058e+27)*pz);
IkReal x1583=(cj12*px);
IkReal x1584=(cj14*sj15);
IkReal x1585=((4.06818686262725e+27)*pp);
IkReal x1586=((3.1970934299486e+27)*cj15);
j13eval[0]=((((1.07485901332934)*x1581))+(((1.07485901332934)*x1583))+((cj15*x1581))+((cj15*x1583))+((pz*x1584)));
j13eval[1]=IKsign((((x1583*x1586))+(((3.1970934299486e+27)*pz*x1584))+(((3.43642468963626e+27)*x1583))+(((3.43642468963626e+27)*x1581))+((x1581*x1586))));
j13eval[2]=((IKabs((((x1584*x1585))+((x1582*x1583))+(((8.44460727050157e+25)*x1584))+((x1581*x1582)))))+(IKabs(((9.07676223872507e+25)+(((-1.0)*pz*x1582))+((cj15*x1585))+(((4.3727273172029e+27)*pp))+(((8.44460727050157e+25)*cj15))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
IkReal x1587=cj14*cj14;
IkReal x1588=cj15*cj15;
IkReal x1589=(py*sj12);
IkReal x1590=(cj12*px);
IkReal x1591=((2.86963901467375e+27)*cj15);
IkReal x1592=((1.04905970285912e+27)*x1587);
IkReal x1593=((2.86963901467375e+27)*cj14*sj15);
j13eval[0]=((1.15532189853532)+(((-1.0)*x1587*x1588))+x1588+x1587+(((2.14971802665867)*cj15)));
j13eval[1]=((IKabs((((x1590*x1593))+((x1589*x1593))+(((3.0844573599236e+27)*pz))+((pz*x1591)))))+(IKabs((((x1590*x1591))+(((-1.0)*pz*x1593))+((x1589*x1591))+(((3.0844573599236e+27)*x1590))+(((3.0844573599236e+27)*x1589))))));
j13eval[2]=IKsign(((1.21200164758409e+27)+(((-1.0)*x1588*x1592))+x1592+(((1.04905970285912e+27)*x1588))+(((2.25518255427744e+27)*cj15))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj14)))))+(IKabs(cj14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[3];
sj14=1.0;
cj14=0;
j14=1.57079633263667;
j13eval[0]=((1.07485901332934)+cj15);
j13eval[1]=IKsign(((0.392938370078201)+(((0.365572010101202)*cj15))));
j13eval[2]=((IKabs(pz))+(IKabs((((cj12*px))+((py*sj12))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
sj14=1.0;
cj14=0;
j14=1.57079633263667;
j13eval[0]=((-1.07485901332934)+(((-1.0)*cj15)));
j13eval[1]=((IKabs(((((-1.0)*py*sj12))+(((-1.0)*cj12*px)))))+(IKabs(pz)));
j13eval[2]=IKsign(((-0.392938370078201)+(((-0.365572010101202)*cj15))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[2];
sj14=1.0;
cj14=0;
j14=1.57079633263667;
IkReal x1594=(py*sj12);
IkReal x1595=((1.0)*cj15);
IkReal x1596=(cj12*px);
j13eval[0]=((((-1.0)*x1594*x1595))+(((-1.0)*x1595*x1596))+(((-1.07485901332934)*x1596))+(((-1.07485901332934)*x1594)));
j13eval[1]=((-1.07485901332934)+(((-1.0)*x1595)));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j13]

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1597=(cj12*px);
IkReal x1598=((0.365572010101202)*cj15);
IkReal x1599=(py*sj12);
CheckValue<IkReal> x1600=IKPowWithIntegerCheck(((((-1.0)*x1598*x1599))+(((-0.392938370078201)*x1599))+(((-0.392938370078201)*x1597))+(((-1.0)*x1597*x1598))),-1);
if(!x1600.valid){
continue;
}
CheckValue<IkReal> x1601=IKPowWithIntegerCheck(((-0.392938370078201)+(((-1.0)*x1598))),-1);
if(!x1601.valid){
continue;
}
if( IKabs(((x1600.value)*(((-0.154400562679713)+(((-0.287294539590756)*cj15))+(pz*pz)+(((-0.133642894569433)*(cj15*cj15))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*pz*(x1601.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1600.value)*(((-0.154400562679713)+(((-0.287294539590756)*cj15))+(pz*pz)+(((-0.133642894569433)*(cj15*cj15)))))))+IKsqr(((-1.0)*pz*(x1601.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x1600.value)*(((-0.154400562679713)+(((-0.287294539590756)*cj15))+(pz*pz)+(((-0.133642894569433)*(cj15*cj15)))))), ((-1.0)*pz*(x1601.value)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x1602=IKcos(j13);
IkReal x1603=IKsin(j13);
IkReal x1604=((0.365572010101202)*cj15);
IkReal x1605=(py*sj12);
IkReal x1606=(cj12*px);
IkReal x1607=(pz*x1602);
IkReal x1608=(x1603*x1606);
evalcond[0]=(pz+(((-0.392938370078201)*x1602))+(((-1.0)*x1602*x1604)));
evalcond[1]=(((x1602*x1605))+((x1602*x1606))+(((-1.0)*pz*x1603)));
evalcond[2]=((((0.392938370078201)*x1603))+(((-1.0)*x1606))+(((-1.0)*x1605))+((x1603*x1604)));
evalcond[3]=((-0.392938370078201)+(((-1.0)*x1604))+x1608+x1607+((x1603*x1605)));
evalcond[4]=((-0.0207576681102795)+(((-1.0)*pp))+(((0.785876740156401)*x1603*x1605))+(((0.785876740156401)*x1608))+(((0.785876740156401)*x1607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x1609 = IKatan2WithCheck(IkReal(((((-1.0)*py*sj12))+(((-1.0)*cj12*px)))),IkReal(((-1.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1609.valid){
continue;
}
CheckValue<IkReal> x1610=IKPowWithIntegerCheck(IKsign(((-0.392938370078201)+(((-0.365572010101202)*cj15)))),-1);
if(!x1610.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x1609.value)+(((1.5707963267949)*(x1610.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x1611=IKcos(j13);
IkReal x1612=IKsin(j13);
IkReal x1613=((0.365572010101202)*cj15);
IkReal x1614=(py*sj12);
IkReal x1615=(cj12*px);
IkReal x1616=(pz*x1611);
IkReal x1617=(x1612*x1615);
evalcond[0]=((((-1.0)*x1611*x1613))+pz+(((-0.392938370078201)*x1611)));
evalcond[1]=((((-1.0)*pz*x1612))+((x1611*x1615))+((x1611*x1614)));
evalcond[2]=((((-1.0)*x1614))+(((-1.0)*x1615))+((x1612*x1613))+(((0.392938370078201)*x1612)));
evalcond[3]=((-0.392938370078201)+x1616+x1617+(((-1.0)*x1613))+((x1612*x1614)));
evalcond[4]=((-0.0207576681102795)+(((0.785876740156401)*x1616))+(((0.785876740156401)*x1617))+(((0.785876740156401)*x1612*x1614))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x1618=IKPowWithIntegerCheck(IKsign(((0.392938370078201)+(((0.365572010101202)*cj15)))),-1);
if(!x1618.valid){
continue;
}
CheckValue<IkReal> x1619 = IKatan2WithCheck(IkReal((((cj12*px))+((py*sj12)))),IkReal(pz),IKFAST_ATAN2_MAGTHRESH);
if(!x1619.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1618.value)))+(x1619.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x1620=IKcos(j13);
IkReal x1621=IKsin(j13);
IkReal x1622=((0.365572010101202)*cj15);
IkReal x1623=(py*sj12);
IkReal x1624=(cj12*px);
IkReal x1625=(pz*x1620);
IkReal x1626=(x1621*x1624);
evalcond[0]=(pz+(((-1.0)*x1620*x1622))+(((-0.392938370078201)*x1620)));
evalcond[1]=(((x1620*x1623))+((x1620*x1624))+(((-1.0)*pz*x1621)));
evalcond[2]=((((-1.0)*x1624))+(((-1.0)*x1623))+(((0.392938370078201)*x1621))+((x1621*x1622)));
evalcond[3]=((-0.392938370078201)+x1626+x1625+(((-1.0)*x1622))+((x1621*x1623)));
evalcond[4]=((-0.0207576681102795)+(((0.785876740156401)*x1626))+(((0.785876740156401)*x1625))+(((0.785876740156401)*x1621*x1623))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj14)))))+(IKabs(cj14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[3];
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
j13eval[0]=((1.07485901332934)+cj15);
j13eval[1]=IKsign(((0.392938370078201)+(((0.365572010101202)*cj15))));
j13eval[2]=((IKabs(pz))+(IKabs((((cj12*px))+((py*sj12))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
j13eval[0]=((-1.07485901332934)+(((-1.0)*cj15)));
j13eval[1]=((IKabs(((((-1.0)*py*sj12))+(((-1.0)*cj12*px)))))+(IKabs(pz)));
j13eval[2]=IKsign(((-0.392938370078201)+(((-0.365572010101202)*cj15))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[2];
sj14=-1.0;
cj14=0;
j14=-1.57079633263667;
IkReal x1627=(py*sj12);
IkReal x1628=((1.0)*cj15);
IkReal x1629=(cj12*px);
j13eval[0]=((((-1.07485901332934)*x1629))+(((-1.07485901332934)*x1627))+(((-1.0)*x1628*x1629))+(((-1.0)*x1627*x1628)));
j13eval[1]=((-1.07485901332934)+(((-1.0)*x1628)));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j13]

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1630=(cj12*px);
IkReal x1631=((0.365572010101202)*cj15);
IkReal x1632=(py*sj12);
CheckValue<IkReal> x1633=IKPowWithIntegerCheck(((((-0.392938370078201)*x1632))+(((-0.392938370078201)*x1630))+(((-1.0)*x1630*x1631))+(((-1.0)*x1631*x1632))),-1);
if(!x1633.valid){
continue;
}
CheckValue<IkReal> x1634=IKPowWithIntegerCheck(((-0.392938370078201)+(((-1.0)*x1631))),-1);
if(!x1634.valid){
continue;
}
if( IKabs(((x1633.value)*(((-0.154400562679713)+(((-0.287294539590756)*cj15))+(pz*pz)+(((-0.133642894569433)*(cj15*cj15))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*pz*(x1634.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1633.value)*(((-0.154400562679713)+(((-0.287294539590756)*cj15))+(pz*pz)+(((-0.133642894569433)*(cj15*cj15)))))))+IKsqr(((-1.0)*pz*(x1634.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x1633.value)*(((-0.154400562679713)+(((-0.287294539590756)*cj15))+(pz*pz)+(((-0.133642894569433)*(cj15*cj15)))))), ((-1.0)*pz*(x1634.value)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x1635=IKcos(j13);
IkReal x1636=IKsin(j13);
IkReal x1637=((0.365572010101202)*cj15);
IkReal x1638=(pz*x1635);
IkReal x1639=((1.0)*py*sj12);
IkReal x1640=((1.0)*cj12*px);
IkReal x1641=(cj12*px*x1636);
IkReal x1642=(py*sj12*x1636);
evalcond[0]=((((-1.0)*x1635*x1637))+(((-0.392938370078201)*x1635))+pz);
evalcond[1]=(((x1636*x1637))+(((-1.0)*x1639))+(((-1.0)*x1640))+(((0.392938370078201)*x1636)));
evalcond[2]=((((-1.0)*x1635*x1639))+(((-1.0)*x1635*x1640))+((pz*x1636)));
evalcond[3]=((-0.392938370078201)+x1641+x1642+x1638+(((-1.0)*x1637)));
evalcond[4]=((-0.0207576681102795)+(((-1.0)*pp))+(((0.785876740156401)*x1641))+(((0.785876740156401)*x1642))+(((0.785876740156401)*x1638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x1643 = IKatan2WithCheck(IkReal(((((-1.0)*py*sj12))+(((-1.0)*cj12*px)))),IkReal(((-1.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1643.valid){
continue;
}
CheckValue<IkReal> x1644=IKPowWithIntegerCheck(IKsign(((-0.392938370078201)+(((-0.365572010101202)*cj15)))),-1);
if(!x1644.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x1643.value)+(((1.5707963267949)*(x1644.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x1645=IKcos(j13);
IkReal x1646=IKsin(j13);
IkReal x1647=((0.365572010101202)*cj15);
IkReal x1648=(pz*x1645);
IkReal x1649=((1.0)*py*sj12);
IkReal x1650=((1.0)*cj12*px);
IkReal x1651=(cj12*px*x1646);
IkReal x1652=(py*sj12*x1646);
evalcond[0]=((((-1.0)*x1645*x1647))+(((-0.392938370078201)*x1645))+pz);
evalcond[1]=((((-1.0)*x1649))+(((-1.0)*x1650))+((x1646*x1647))+(((0.392938370078201)*x1646)));
evalcond[2]=(((pz*x1646))+(((-1.0)*x1645*x1649))+(((-1.0)*x1645*x1650)));
evalcond[3]=((-0.392938370078201)+x1652+x1651+x1648+(((-1.0)*x1647)));
evalcond[4]=((-0.0207576681102795)+(((-1.0)*pp))+(((0.785876740156401)*x1648))+(((0.785876740156401)*x1652))+(((0.785876740156401)*x1651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x1653=IKPowWithIntegerCheck(IKsign(((0.392938370078201)+(((0.365572010101202)*cj15)))),-1);
if(!x1653.valid){
continue;
}
CheckValue<IkReal> x1654 = IKatan2WithCheck(IkReal((((cj12*px))+((py*sj12)))),IkReal(pz),IKFAST_ATAN2_MAGTHRESH);
if(!x1654.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1653.value)))+(x1654.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[5];
IkReal x1655=IKcos(j13);
IkReal x1656=IKsin(j13);
IkReal x1657=((0.365572010101202)*cj15);
IkReal x1658=(pz*x1655);
IkReal x1659=((1.0)*py*sj12);
IkReal x1660=((1.0)*cj12*px);
IkReal x1661=(cj12*px*x1656);
IkReal x1662=(py*sj12*x1656);
evalcond[0]=((((-1.0)*x1655*x1657))+(((-0.392938370078201)*x1655))+pz);
evalcond[1]=(((x1656*x1657))+(((-1.0)*x1659))+(((0.392938370078201)*x1656))+(((-1.0)*x1660)));
evalcond[2]=((((-1.0)*x1655*x1659))+((pz*x1656))+(((-1.0)*x1655*x1660)));
evalcond[3]=((-0.392938370078201)+x1662+x1661+x1658+(((-1.0)*x1657)));
evalcond[4]=((-0.0207576681102795)+(((-1.0)*pp))+(((0.785876740156401)*x1661))+(((0.785876740156401)*x1662))+(((0.785876740156401)*x1658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1663=cj14*cj14;
IkReal x1664=cj15*cj15;
IkReal x1665=(py*sj12);
IkReal x1666=(cj12*px);
IkReal x1667=((2.86963901467375e+27)*cj15);
IkReal x1668=((1.04905970285912e+27)*x1663);
IkReal x1669=((2.86963901467375e+27)*cj14*sj15);
CheckValue<IkReal> x1670 = IKatan2WithCheck(IkReal(((((-1.0)*pz*x1669))+(((3.0844573599236e+27)*x1665))+(((3.0844573599236e+27)*x1666))+((x1666*x1667))+((x1665*x1667)))),IkReal((((pz*x1667))+(((3.0844573599236e+27)*pz))+((x1666*x1669))+((x1665*x1669)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1670.valid){
continue;
}
CheckValue<IkReal> x1671=IKPowWithIntegerCheck(IKsign(((1.21200164758409e+27)+x1668+(((1.04905970285912e+27)*x1664))+(((2.25518255427744e+27)*cj15))+(((-1.0)*x1664*x1668)))),-1);
if(!x1671.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x1670.value)+(((1.5707963267949)*(x1671.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1672=IKcos(j13);
IkReal x1673=IKsin(j13);
IkReal x1674=((1.0)*py);
IkReal x1675=(cj12*px);
IkReal x1676=(sj12*sj14);
IkReal x1677=(cj14*sj15);
IkReal x1678=(py*sj12);
IkReal x1679=(cj14*sj12);
IkReal x1680=((0.785876740156401)*x1673);
IkReal x1681=((0.365572010101202)*x1673);
IkReal x1682=((0.365572010101202)*x1672);
IkReal x1683=(pz*x1673);
IkReal x1684=(pz*x1672);
evalcond[0]=((((-1.0)*cj15*x1682))+((x1677*x1681))+pz+(((-0.392938370078201)*x1672)));
evalcond[1]=((-0.392938370078201)+x1684+((x1673*x1678))+((x1673*x1675))+(((-0.365572010101202)*cj15)));
evalcond[2]=((-0.0207576681102795)+((x1675*x1680))+(((0.785876740156401)*x1684))+(((-1.0)*pp))+((x1678*x1680)));
evalcond[3]=(((cj15*x1681))+((x1677*x1682))+(((-1.0)*x1675))+(((0.392938370078201)*x1673))+(((-1.0)*sj12*x1674)));
evalcond[4]=(((sj14*x1672*x1675))+((py*x1672*x1676))+((px*x1679))+(((-1.0)*sj14*x1683))+(((-1.0)*cj12*cj14*x1674)));
evalcond[5]=(((cj14*x1683))+((px*x1676))+(((-1.0)*x1672*x1674*x1679))+(((-1.0)*cj12*sj14*x1674))+(((-1.0)*cj14*x1672*x1675))+(((0.365572010101202)*sj15)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1685=(py*sj12);
IkReal x1686=((8.7454546344058e+27)*pz);
IkReal x1687=(cj12*px);
IkReal x1688=((3.1970934299486e+27)*cj15);
IkReal x1689=(cj14*sj15);
IkReal x1690=((4.06818686262725e+27)*pp);
CheckValue<IkReal> x1691=IKPowWithIntegerCheck(IKsign(((((3.1970934299486e+27)*pz*x1689))+((x1687*x1688))+(((3.43642468963626e+27)*x1687))+(((3.43642468963626e+27)*x1685))+((x1685*x1688)))),-1);
if(!x1691.valid){
continue;
}
CheckValue<IkReal> x1692 = IKatan2WithCheck(IkReal(((9.07676223872507e+25)+((cj15*x1690))+(((4.3727273172029e+27)*pp))+(((8.44460727050157e+25)*cj15))+(((-1.0)*pz*x1686)))),IkReal((((x1689*x1690))+((x1686*x1687))+((x1685*x1686))+(((8.44460727050157e+25)*x1689)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1692.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1691.value)))+(x1692.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1693=IKcos(j13);
IkReal x1694=IKsin(j13);
IkReal x1695=((1.0)*py);
IkReal x1696=(cj12*px);
IkReal x1697=(sj12*sj14);
IkReal x1698=(cj14*sj15);
IkReal x1699=(py*sj12);
IkReal x1700=(cj14*sj12);
IkReal x1701=((0.785876740156401)*x1694);
IkReal x1702=((0.365572010101202)*x1694);
IkReal x1703=((0.365572010101202)*x1693);
IkReal x1704=(pz*x1694);
IkReal x1705=(pz*x1693);
evalcond[0]=(pz+(((-0.392938370078201)*x1693))+(((-1.0)*cj15*x1703))+((x1698*x1702)));
evalcond[1]=((-0.392938370078201)+x1705+(((-0.365572010101202)*cj15))+((x1694*x1696))+((x1694*x1699)));
evalcond[2]=((-0.0207576681102795)+(((0.785876740156401)*x1705))+((x1696*x1701))+(((-1.0)*pp))+((x1699*x1701)));
evalcond[3]=(((cj15*x1702))+(((-1.0)*sj12*x1695))+(((-1.0)*x1696))+(((0.392938370078201)*x1694))+((x1698*x1703)));
evalcond[4]=((((-1.0)*cj12*cj14*x1695))+((sj14*x1693*x1696))+(((-1.0)*sj14*x1704))+((px*x1700))+((py*x1693*x1697)));
evalcond[5]=((((-1.0)*cj14*x1693*x1696))+((cj14*x1704))+((px*x1697))+(((-1.0)*x1693*x1695*x1700))+(((-1.0)*cj12*sj14*x1695))+(((0.365572010101202)*sj15)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1706=((32389191142403.0)*cj15);
IkReal x1707=(py*sj12);
IkReal x1708=(cj14*sj15);
IkReal x1709=(cj12*px);
IkReal x1710=((88598662500000.0)*pz);
CheckValue<IkReal> x1711=IKPowWithIntegerCheck(IKsign(((((34813814033858.6)*x1707))+(((34813814033858.6)*x1709))+((x1706*x1707))+((x1706*x1709))+(((32389191142403.0)*pz*x1708)))),-1);
if(!x1711.valid){
continue;
}
CheckValue<IkReal> x1712 = IKatan2WithCheck(IkReal(((13679683342670.0)+(((11840581711480.3)*(cj15*cj15)))+(((25453911951294.3)*cj15))+(((-1.0)*pz*x1710)))),IkReal((((x1709*x1710))+(((12726955975647.1)*x1708))+(((11840581711480.3)*cj15*x1708))+((x1707*x1710)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1712.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1711.value)))+(x1712.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1713=IKcos(j13);
IkReal x1714=IKsin(j13);
IkReal x1715=((1.0)*py);
IkReal x1716=(cj12*px);
IkReal x1717=(sj12*sj14);
IkReal x1718=(cj14*sj15);
IkReal x1719=(py*sj12);
IkReal x1720=(cj14*sj12);
IkReal x1721=((0.785876740156401)*x1714);
IkReal x1722=((0.365572010101202)*x1714);
IkReal x1723=((0.365572010101202)*x1713);
IkReal x1724=(pz*x1714);
IkReal x1725=(pz*x1713);
evalcond[0]=(((x1718*x1722))+(((-1.0)*cj15*x1723))+pz+(((-0.392938370078201)*x1713)));
evalcond[1]=((-0.392938370078201)+x1725+((x1714*x1719))+((x1714*x1716))+(((-0.365572010101202)*cj15)));
evalcond[2]=((-0.0207576681102795)+(((0.785876740156401)*x1725))+(((-1.0)*pp))+((x1716*x1721))+((x1719*x1721)));
evalcond[3]=((((-1.0)*sj12*x1715))+(((-1.0)*x1716))+((x1718*x1723))+(((0.392938370078201)*x1714))+((cj15*x1722)));
evalcond[4]=(((py*x1713*x1717))+((px*x1720))+((sj14*x1713*x1716))+(((-1.0)*cj12*cj14*x1715))+(((-1.0)*sj14*x1724)));
evalcond[5]=((((-1.0)*cj12*sj14*x1715))+((cj14*x1724))+(((-1.0)*cj14*x1713*x1716))+(((-1.0)*x1713*x1715*x1720))+((px*x1717))+(((0.365572010101202)*sj15)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x96=(sj12*sj14);
IkReal x97=((1.0)*sj15);
IkReal x98=((1.0)*cj14);
IkReal x99=(sj13*sj14);
IkReal x100=(cj13*cj15);
IkReal x101=((1.0)*cj13);
IkReal x102=(cj12*sj14);
IkReal x103=(cj15*sj13);
IkReal x104=((((-1.0)*sj13*x97))+((cj14*x100)));
IkReal x105=((((-1.0)*x101*x96))+((cj12*cj14)));
IkReal x106=(x103+((cj13*cj14*sj15)));
IkReal x107=((((-1.0)*cj14*sj13*x97))+x100);
IkReal x108=(cj12*x104);
IkReal x109=((((-1.0)*x103*x98))+(((-1.0)*cj13*x97)));
IkReal x110=((((-1.0)*x101*x102))+(((-1.0)*sj12*x98)));
IkReal x111=(((sj12*x104))+((cj15*x102)));
IkReal x112=((((-1.0)*cj15*x96))+x108);
IkReal x113=(((cj12*x106))+(((-1.0)*x96*x97)));
IkReal x114=(((sj15*x102))+((sj12*x106)));
new_r00=(((r10*x111))+((r20*x109))+((r00*x112)));
new_r01=(((r21*x109))+((r11*x111))+((r01*x112)));
new_r02=(((r22*x109))+((r12*x111))+((r02*(((((-1.0)*cj15*x96))+x108)))));
new_r10=(((r10*x105))+((r20*x99))+((r00*x110)));
new_r11=(((r21*x99))+((r11*x105))+((r01*x110)));
new_r12=(((r02*x110))+((r12*x105))+((r22*x99)));
new_r20=(((r10*x114))+((r20*x107))+((r00*x113)));
new_r21=(((r21*x107))+((r11*x114))+((r01*x113)));
new_r22=(((r02*x113))+((r22*x107))+((r12*x114)));
{
IkReal j17array[2], cj17array[2], sj17array[2];
bool j17valid[2]={false};
_nj17 = 2;
cj17array[0]=new_r22;
if( cj17array[0] >= -1-IKFAST_SINCOS_THRESH && cj17array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j17valid[0] = j17valid[1] = true;
    j17array[0] = IKacos(cj17array[0]);
    sj17array[0] = IKsin(j17array[0]);
    cj17array[1] = cj17array[0];
    j17array[1] = -j17array[0];
    sj17array[1] = -sj17array[0];
}
else if( isnan(cj17array[0]) )
{
    // probably any value will work
    j17valid[0] = true;
    cj17array[0] = 1; sj17array[0] = 0; j17array[0] = 0;
}
for(int ij17 = 0; ij17 < 2; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 2; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];

{
IkReal j16eval[3];
j16eval[0]=sj17;
j16eval[1]=IKsign(sj17);
j16eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j18eval[3];
j18eval[0]=sj17;
j18eval[1]=IKsign(sj17);
j18eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
j16eval[0]=new_r12;
j16eval[1]=sj17;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j17))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j18mul = 1;
j18=0;
j16mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16=IKatan2(((-1.0)*new_r01), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].fmul = j16mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].fmul = j18mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j18mul = 1;
j18=0;
j16mul=1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].fmul = j16mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].fmul = j18mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x115=new_r22*new_r22;
IkReal x116=((16.0)*new_r10);
IkReal x117=((16.0)*new_r01);
IkReal x118=((16.0)*new_r22);
IkReal x119=((8.0)*new_r11);
IkReal x120=((8.0)*new_r00);
IkReal x121=(x115*x116);
IkReal x122=(x115*x117);
j16eval[0]=((IKabs((((new_r11*x118))+(((16.0)*new_r00))+(((-32.0)*new_r00*x115)))))+(IKabs(((((-1.0)*x121))+x116)))+(IKabs(((((-1.0)*new_r22*x120))+((x115*x119)))))+(IKabs(((((-1.0)*x122))+x117)))+(IKabs(((((-1.0)*x116))+x121)))+(IKabs(((((-1.0)*x117))+x122)))+(IKabs((((new_r22*x119))+(((-1.0)*x120)))))+(IKabs(((((32.0)*new_r11))+(((-1.0)*new_r00*x118))+(((-16.0)*new_r11*x115))))));
if( IKabs(j16eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j16, j18]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j16evalpoly[1];
IkReal x123=new_r22*new_r22;
IkReal x124=((16.0)*new_r10);
IkReal x125=(new_r11*new_r22);
IkReal x126=(x123*x124);
IkReal x127=((((-8.0)*new_r00))+(((8.0)*x125)));
op[0]=x127;
op[1]=((((-1.0)*x126))+x124);
op[2]=((((16.0)*x125))+(((16.0)*new_r00))+(((-32.0)*new_r00*x123)));
op[3]=((((-1.0)*x124))+x126);
op[4]=x127;
polyroots4(op,zeror,numroots);
IkReal j16array[4], cj16array[4], sj16array[4], tempj16array[1];
int numsolutions = 0;
for(int ij16 = 0; ij16 < numroots; ++ij16)
{
IkReal htj16 = zeror[ij16];
tempj16array[0]=((2.0)*(atan(htj16)));
for(int kj16 = 0; kj16 < 1; ++kj16)
{
j16array[numsolutions] = tempj16array[kj16];
if( j16array[numsolutions] > IKPI )
{
    j16array[numsolutions]-=IK2PI;
}
else if( j16array[numsolutions] < -IKPI )
{
    j16array[numsolutions]+=IK2PI;
}
sj16array[numsolutions] = IKsin(j16array[numsolutions]);
cj16array[numsolutions] = IKcos(j16array[numsolutions]);
numsolutions++;
}
}
bool j16valid[4]={true,true,true,true};
_nj16 = 4;
for(int ij16 = 0; ij16 < numsolutions; ++ij16)
    {
if( !j16valid[ij16] )
{
    continue;
}
    j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
htj16 = IKtan(j16/2);

IkReal x128=((16.0)*new_r01);
IkReal x129=new_r22*new_r22;
IkReal x130=(new_r00*new_r22);
IkReal x131=((8.0)*x130);
IkReal x132=(new_r11*x129);
IkReal x133=(x128*x129);
IkReal x134=((8.0)*x132);
j16evalpoly[0]=((((htj16*htj16*htj16)*(((((-1.0)*x128))+x133))))+x134+(((-1.0)*x131))+(((htj16*htj16*htj16*htj16)*((x134+(((-1.0)*x131))))))+((htj16*((x128+(((-1.0)*x133))))))+(((htj16*htj16)*(((((32.0)*new_r11))+(((-16.0)*x130))+(((-16.0)*x132)))))));
if( IKabs(j16evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < numsolutions; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
{
IkReal j18eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x135=cj16*cj16;
IkReal x136=(cj16*new_r22);
IkReal x137=((-1.0)+(((-1.0)*x135*(new_r22*new_r22)))+x135);
j18eval[0]=x137;
j18eval[1]=IKsign(x137);
j18eval[2]=((IKabs(((((-1.0)*new_r00*x136))+((new_r01*sj16)))))+(IKabs((((new_r01*x136))+((new_r00*sj16))))));
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal j18eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j18eval[0]=new_r22;
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal j18eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x138=new_r22*new_r22;
j18eval[0]=(((cj16*x138))+(((-1.0)*cj16)));
j18eval[1]=(((sj16*x138))+(((-1.0)*sj16)));
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j16)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x139=IKsin(j18);
IkReal x140=IKcos(j18);
evalcond[0]=x139;
evalcond[1]=((-1.0)*x140);
evalcond[2]=((((-1.0)*x139))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x140))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j16)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r00, new_r01);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x141=IKsin(j18);
IkReal x142=IKcos(j18);
evalcond[0]=x141;
evalcond[1]=((-1.0)*x142);
evalcond[2]=((((-1.0)*x141))+new_r00);
evalcond[3]=((((-1.0)*x142))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j16))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r10, new_r11);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x143=IKsin(j18);
IkReal x144=IKcos(j18);
evalcond[0]=x143;
evalcond[1]=((-1.0)*x144);
evalcond[2]=((((-1.0)*x143))+new_r10);
evalcond[3]=((((-1.0)*x144))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j16)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x145=IKsin(j18);
IkReal x146=IKcos(j18);
evalcond[0]=x145;
evalcond[1]=((-1.0)*x146);
evalcond[2]=((((-1.0)*x145))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x146))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x147=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x147.valid){
continue;
}
if((x147.value) < -0.00001)
continue;
IkReal gconst0=((-1.0)*(IKsqrt(x147.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj16)))))+(IKabs(((((-1.0)*gconst0))+cj16)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst0*gconst0))))) < -0.00001)
continue;
sj16=IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0)))));
cj16=gconst0;
if( (gconst0) < -1-IKFAST_SINCOS_THRESH || (gconst0) > 1+IKFAST_SINCOS_THRESH )
    continue;
j16=IKacos(gconst0);
CheckValue<IkReal> x148=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x148.valid){
continue;
}
if((x148.value) < -0.00001)
continue;
IkReal gconst0=((-1.0)*(IKsqrt(x148.value)));
j18eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if((((1.0)+(((-1.0)*(gconst0*gconst0))))) < -0.00001)
continue;
CheckValue<IkReal> x149=IKPowWithIntegerCheck(gconst0,-1);
if(!x149.valid){
continue;
}
if( IKabs(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0))))))))+((gconst0*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x149.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0))))))))+((gconst0*new_r10))))+IKsqr((new_r11*(x149.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0))))))))+((gconst0*new_r10))), (new_r11*(x149.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x150=IKcos(j18);
IkReal x151=IKsin(j18);
IkReal x152=((1.0)*x151);
IkReal x153=((1.0)*x150);
if((((1.0)+(((-1.0)*(gconst0*gconst0))))) < -0.00001)
continue;
IkReal x154=IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0)))));
IkReal x155=((1.0)*x154);
evalcond[0]=x151;
evalcond[1]=((-1.0)*x150);
evalcond[2]=((((-1.0)*gconst0*x153))+new_r11);
evalcond[3]=((((-1.0)*gconst0*x152))+new_r10);
evalcond[4]=(((x150*x154))+new_r01);
evalcond[5]=(((x151*x154))+new_r00);
evalcond[6]=((((-1.0)*x152))+((gconst0*new_r10))+(((-1.0)*new_r00*x155)));
evalcond[7]=((((-1.0)*x153))+((gconst0*new_r11))+(((-1.0)*new_r01*x155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x156=IKPowWithIntegerCheck(IKsign(gconst0),-1);
if(!x156.valid){
continue;
}
CheckValue<IkReal> x157 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x157.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(((1.5707963267949)*(x156.value)))+(x157.value));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x158=IKcos(j18);
IkReal x159=IKsin(j18);
IkReal x160=((1.0)*x159);
IkReal x161=((1.0)*x158);
if((((1.0)+(((-1.0)*(gconst0*gconst0))))) < -0.00001)
continue;
IkReal x162=IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0)))));
IkReal x163=((1.0)*x162);
evalcond[0]=x159;
evalcond[1]=((-1.0)*x158);
evalcond[2]=((((-1.0)*gconst0*x161))+new_r11);
evalcond[3]=((((-1.0)*gconst0*x160))+new_r10);
evalcond[4]=(new_r01+((x158*x162)));
evalcond[5]=(new_r00+((x159*x162)));
evalcond[6]=((((-1.0)*new_r00*x163))+(((-1.0)*x160))+((gconst0*new_r10)));
evalcond[7]=((((-1.0)*x161))+((gconst0*new_r11))+(((-1.0)*new_r01*x163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x164=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x164.valid){
continue;
}
if((x164.value) < -0.00001)
continue;
IkReal gconst0=((-1.0)*(IKsqrt(x164.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst0))+cj16)))+(IKabs(((1.0)+(IKsign(sj16)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst0*gconst0))))) < -0.00001)
continue;
sj16=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0)))))));
cj16=gconst0;
if( (gconst0) < -1-IKFAST_SINCOS_THRESH || (gconst0) > 1+IKFAST_SINCOS_THRESH )
    continue;
j16=((-1.0)*(IKacos(gconst0)));
CheckValue<IkReal> x165=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x165.valid){
continue;
}
if((x165.value) < -0.00001)
continue;
IkReal gconst0=((-1.0)*(IKsqrt(x165.value)));
j18eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if((((1.0)+(((-1.0)*(gconst0*gconst0))))) < -0.00001)
continue;
CheckValue<IkReal> x166=IKPowWithIntegerCheck(gconst0,-1);
if(!x166.valid){
continue;
}
if( IKabs((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0))))))))+((gconst0*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x166.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0))))))))+((gconst0*new_r10))))+IKsqr((new_r11*(x166.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0))))))))+((gconst0*new_r10))), (new_r11*(x166.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x167=IKcos(j18);
IkReal x168=IKsin(j18);
IkReal x169=((1.0)*x168);
IkReal x170=((1.0)*x167);
if((((1.0)+(((-1.0)*(gconst0*gconst0))))) < -0.00001)
continue;
IkReal x171=IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0)))));
evalcond[0]=x168;
evalcond[1]=((-1.0)*x167);
evalcond[2]=(new_r11+(((-1.0)*gconst0*x170)));
evalcond[3]=((((-1.0)*gconst0*x169))+new_r10);
evalcond[4]=((((-1.0)*x170*x171))+new_r01);
evalcond[5]=(new_r00+(((-1.0)*x169*x171)));
evalcond[6]=(((new_r00*x171))+(((-1.0)*x169))+((gconst0*new_r10)));
evalcond[7]=(((new_r01*x171))+(((-1.0)*x170))+((gconst0*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x172=IKPowWithIntegerCheck(IKsign(gconst0),-1);
if(!x172.valid){
continue;
}
CheckValue<IkReal> x173 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x173.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(((1.5707963267949)*(x172.value)))+(x173.value));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x174=IKcos(j18);
IkReal x175=IKsin(j18);
IkReal x176=((1.0)*x175);
IkReal x177=((1.0)*x174);
if((((1.0)+(((-1.0)*(gconst0*gconst0))))) < -0.00001)
continue;
IkReal x178=IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0)))));
evalcond[0]=x175;
evalcond[1]=((-1.0)*x174);
evalcond[2]=(new_r11+(((-1.0)*gconst0*x177)));
evalcond[3]=(new_r10+(((-1.0)*gconst0*x176)));
evalcond[4]=((((-1.0)*x177*x178))+new_r01);
evalcond[5]=((((-1.0)*x176*x178))+new_r00);
evalcond[6]=(((new_r00*x178))+(((-1.0)*x176))+((gconst0*new_r10)));
evalcond[7]=(((new_r01*x178))+(((-1.0)*x177))+((gconst0*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x179=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x179.valid){
continue;
}
if((x179.value) < -0.00001)
continue;
IkReal gconst1=IKsqrt(x179.value);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj16)))))+(IKabs(((((-1.0)*gconst1))+cj16)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst1*gconst1))))) < -0.00001)
continue;
sj16=IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1)))));
cj16=gconst1;
if( (gconst1) < -1-IKFAST_SINCOS_THRESH || (gconst1) > 1+IKFAST_SINCOS_THRESH )
    continue;
j16=IKacos(gconst1);
CheckValue<IkReal> x180=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x180.valid){
continue;
}
if((x180.value) < -0.00001)
continue;
IkReal gconst1=IKsqrt(x180.value);
j18eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if((((1.0)+(((-1.0)*(gconst1*gconst1))))) < -0.00001)
continue;
CheckValue<IkReal> x181=IKPowWithIntegerCheck(gconst1,-1);
if(!x181.valid){
continue;
}
if( IKabs((((gconst1*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x181.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst1*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1))))))))))+IKsqr((new_r11*(x181.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2((((gconst1*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1))))))))), (new_r11*(x181.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x182=IKcos(j18);
IkReal x183=IKsin(j18);
IkReal x184=((1.0)*x182);
IkReal x185=((1.0)*x183);
if((((1.0)+(((-1.0)*(gconst1*gconst1))))) < -0.00001)
continue;
IkReal x186=IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1)))));
IkReal x187=((1.0)*x186);
evalcond[0]=x183;
evalcond[1]=((-1.0)*x182);
evalcond[2]=(new_r11+(((-1.0)*gconst1*x184)));
evalcond[3]=(new_r10+(((-1.0)*gconst1*x185)));
evalcond[4]=(new_r01+((x182*x186)));
evalcond[5]=(new_r00+((x183*x186)));
evalcond[6]=(((gconst1*new_r10))+(((-1.0)*x185))+(((-1.0)*new_r00*x187)));
evalcond[7]=(((gconst1*new_r11))+(((-1.0)*x184))+(((-1.0)*new_r01*x187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x188=IKPowWithIntegerCheck(IKsign(gconst1),-1);
if(!x188.valid){
continue;
}
CheckValue<IkReal> x189 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x189.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(((1.5707963267949)*(x188.value)))+(x189.value));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x190=IKcos(j18);
IkReal x191=IKsin(j18);
IkReal x192=((1.0)*x190);
IkReal x193=((1.0)*x191);
if((((1.0)+(((-1.0)*(gconst1*gconst1))))) < -0.00001)
continue;
IkReal x194=IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1)))));
IkReal x195=((1.0)*x194);
evalcond[0]=x191;
evalcond[1]=((-1.0)*x190);
evalcond[2]=((((-1.0)*gconst1*x192))+new_r11);
evalcond[3]=((((-1.0)*gconst1*x193))+new_r10);
evalcond[4]=(((x190*x194))+new_r01);
evalcond[5]=(((x191*x194))+new_r00);
evalcond[6]=(((gconst1*new_r10))+(((-1.0)*x193))+(((-1.0)*new_r00*x195)));
evalcond[7]=(((gconst1*new_r11))+(((-1.0)*x192))+(((-1.0)*new_r01*x195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x196=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x196.valid){
continue;
}
if((x196.value) < -0.00001)
continue;
IkReal gconst1=IKsqrt(x196.value);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst1))+cj16)))+(IKabs(((1.0)+(IKsign(sj16)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst1*gconst1))))) < -0.00001)
continue;
sj16=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1)))))));
cj16=gconst1;
if( (gconst1) < -1-IKFAST_SINCOS_THRESH || (gconst1) > 1+IKFAST_SINCOS_THRESH )
    continue;
j16=((-1.0)*(IKacos(gconst1)));
CheckValue<IkReal> x197=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x197.valid){
continue;
}
if((x197.value) < -0.00001)
continue;
IkReal gconst1=IKsqrt(x197.value);
j18eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if((((1.0)+(((-1.0)*(gconst1*gconst1))))) < -0.00001)
continue;
CheckValue<IkReal> x198=IKPowWithIntegerCheck(gconst1,-1);
if(!x198.valid){
continue;
}
if( IKabs((((gconst1*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x198.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst1*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1))))))))))+IKsqr((new_r11*(x198.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2((((gconst1*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1))))))))), (new_r11*(x198.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x199=IKcos(j18);
IkReal x200=IKsin(j18);
IkReal x201=((1.0)*x199);
IkReal x202=((1.0)*x200);
if((((1.0)+(((-1.0)*(gconst1*gconst1))))) < -0.00001)
continue;
IkReal x203=IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1)))));
evalcond[0]=x200;
evalcond[1]=((-1.0)*x199);
evalcond[2]=(new_r11+(((-1.0)*gconst1*x201)));
evalcond[3]=(new_r10+(((-1.0)*gconst1*x202)));
evalcond[4]=((((-1.0)*x201*x203))+new_r01);
evalcond[5]=((((-1.0)*x202*x203))+new_r00);
evalcond[6]=(((gconst1*new_r10))+((new_r00*x203))+(((-1.0)*x202)));
evalcond[7]=(((gconst1*new_r11))+((new_r01*x203))+(((-1.0)*x201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x204=IKPowWithIntegerCheck(IKsign(gconst1),-1);
if(!x204.valid){
continue;
}
CheckValue<IkReal> x205 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x205.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(((1.5707963267949)*(x204.value)))+(x205.value));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x206=IKcos(j18);
IkReal x207=IKsin(j18);
IkReal x208=((1.0)*x206);
IkReal x209=((1.0)*x207);
if((((1.0)+(((-1.0)*(gconst1*gconst1))))) < -0.00001)
continue;
IkReal x210=IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1)))));
evalcond[0]=x207;
evalcond[1]=((-1.0)*x206);
evalcond[2]=(new_r11+(((-1.0)*gconst1*x208)));
evalcond[3]=(new_r10+(((-1.0)*gconst1*x209)));
evalcond[4]=(new_r01+(((-1.0)*x208*x210)));
evalcond[5]=(new_r00+(((-1.0)*x209*x210)));
evalcond[6]=(((gconst1*new_r10))+(((-1.0)*x209))+((new_r00*x210)));
evalcond[7]=(((gconst1*new_r11))+(((-1.0)*x208))+((new_r01*x210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j18]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x211=new_r22*new_r22;
CheckValue<IkReal> x212=IKPowWithIntegerCheck((((cj16*x211))+(((-1.0)*cj16))),-1);
if(!x212.valid){
continue;
}
CheckValue<IkReal> x213=IKPowWithIntegerCheck((((sj16*x211))+(((-1.0)*sj16))),-1);
if(!x213.valid){
continue;
}
if( IKabs(((x212.value)*(((((-1.0)*new_r01*new_r22))+(((-1.0)*new_r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x213.value)*((((new_r10*new_r22))+new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x212.value)*(((((-1.0)*new_r01*new_r22))+(((-1.0)*new_r10))))))+IKsqr(((x213.value)*((((new_r10*new_r22))+new_r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((x212.value)*(((((-1.0)*new_r01*new_r22))+(((-1.0)*new_r10))))), ((x213.value)*((((new_r10*new_r22))+new_r01))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[10];
IkReal x214=IKsin(j18);
IkReal x215=IKcos(j18);
IkReal x216=((1.0)*sj16);
IkReal x217=(cj16*new_r22);
IkReal x218=(new_r10*sj16);
IkReal x219=(new_r11*sj16);
IkReal x220=((1.0)*x215);
IkReal x221=(cj16*x214);
IkReal x222=(sj16*x214);
evalcond[0]=(((new_r22*x214))+x219+((cj16*new_r01)));
evalcond[1]=(((new_r22*x219))+x214+((new_r01*x217)));
evalcond[2]=((((-1.0)*x214))+(((-1.0)*new_r00*x216))+((cj16*new_r10)));
evalcond[3]=((((-1.0)*new_r01*x216))+((cj16*new_r11))+(((-1.0)*x220)));
evalcond[4]=(((x214*x217))+((sj16*x215))+new_r01);
evalcond[5]=(x218+(((-1.0)*new_r22*x220))+((cj16*new_r00)));
evalcond[6]=(x222+(((-1.0)*x217*x220))+new_r00);
evalcond[7]=((((-1.0)*cj16*x220))+((new_r22*x222))+new_r11);
evalcond[8]=(((new_r22*x218))+((new_r00*x217))+(((-1.0)*x220)));
evalcond[9]=((((-1.0)*new_r22*x215*x216))+new_r10+(((-1.0)*x221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x223=((1.0)*new_r01);
CheckValue<IkReal> x224=IKPowWithIntegerCheck(new_r22,-1);
if(!x224.valid){
continue;
}
if( IKabs(((x224.value)*(((((-1.0)*cj16*x223))+(((-1.0)*new_r11*sj16)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj16*x223))+((cj16*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x224.value)*(((((-1.0)*cj16*x223))+(((-1.0)*new_r11*sj16))))))+IKsqr(((((-1.0)*sj16*x223))+((cj16*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((x224.value)*(((((-1.0)*cj16*x223))+(((-1.0)*new_r11*sj16))))), ((((-1.0)*sj16*x223))+((cj16*new_r11))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[10];
IkReal x225=IKsin(j18);
IkReal x226=IKcos(j18);
IkReal x227=((1.0)*sj16);
IkReal x228=(cj16*new_r22);
IkReal x229=(new_r10*sj16);
IkReal x230=(new_r11*sj16);
IkReal x231=((1.0)*x226);
IkReal x232=(cj16*x225);
IkReal x233=(sj16*x225);
evalcond[0]=(x230+((new_r22*x225))+((cj16*new_r01)));
evalcond[1]=(((new_r01*x228))+((new_r22*x230))+x225);
evalcond[2]=(((cj16*new_r10))+(((-1.0)*new_r00*x227))+(((-1.0)*x225)));
evalcond[3]=((((-1.0)*new_r01*x227))+(((-1.0)*x231))+((cj16*new_r11)));
evalcond[4]=(((x225*x228))+new_r01+((sj16*x226)));
evalcond[5]=((((-1.0)*new_r22*x231))+x229+((cj16*new_r00)));
evalcond[6]=(x233+new_r00+(((-1.0)*x228*x231)));
evalcond[7]=(((new_r22*x233))+(((-1.0)*cj16*x231))+new_r11);
evalcond[8]=(((new_r00*x228))+(((-1.0)*x231))+((new_r22*x229)));
evalcond[9]=((((-1.0)*new_r22*x226*x227))+new_r10+(((-1.0)*x232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x234=cj16*cj16;
IkReal x235=(cj16*new_r22);
CheckValue<IkReal> x236 = IKatan2WithCheck(IkReal((((new_r01*x235))+((new_r00*sj16)))),IkReal(((((-1.0)*new_r00*x235))+((new_r01*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x236.valid){
continue;
}
CheckValue<IkReal> x237=IKPowWithIntegerCheck(IKsign(((-1.0)+(((-1.0)*x234*(new_r22*new_r22)))+x234)),-1);
if(!x237.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x236.value)+(((1.5707963267949)*(x237.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[10];
IkReal x238=IKsin(j18);
IkReal x239=IKcos(j18);
IkReal x240=((1.0)*sj16);
IkReal x241=(cj16*new_r22);
IkReal x242=(new_r10*sj16);
IkReal x243=(new_r11*sj16);
IkReal x244=((1.0)*x239);
IkReal x245=(cj16*x238);
IkReal x246=(sj16*x238);
evalcond[0]=(((new_r22*x238))+x243+((cj16*new_r01)));
evalcond[1]=(((new_r22*x243))+x238+((new_r01*x241)));
evalcond[2]=((((-1.0)*new_r00*x240))+(((-1.0)*x238))+((cj16*new_r10)));
evalcond[3]=((((-1.0)*new_r01*x240))+(((-1.0)*x244))+((cj16*new_r11)));
evalcond[4]=(((x238*x241))+((sj16*x239))+new_r01);
evalcond[5]=((((-1.0)*new_r22*x244))+x242+((cj16*new_r00)));
evalcond[6]=((((-1.0)*x241*x244))+x246+new_r00);
evalcond[7]=(((new_r22*x246))+(((-1.0)*cj16*x244))+new_r11);
evalcond[8]=(((new_r22*x242))+((new_r00*x241))+(((-1.0)*x244)));
evalcond[9]=((((-1.0)*x245))+(((-1.0)*new_r22*x239*x240))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16, j18]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x248=IKPowWithIntegerCheck(sj17,-1);
if(!x248.valid){
continue;
}
IkReal x247=x248.value;
CheckValue<IkReal> x249=IKPowWithIntegerCheck(new_r12,-1);
if(!x249.valid){
continue;
}
if( IKabs((x247*(x249.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj17*cj17))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x247)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x247*(x249.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj17*cj17)))))))+IKsqr((new_r02*x247))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2((x247*(x249.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj17*cj17)))))), (new_r02*x247));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x250=IKcos(j16);
IkReal x251=IKsin(j16);
IkReal x252=((1.0)*cj17);
IkReal x253=((1.0)*sj17);
IkReal x254=(new_r12*x251);
IkReal x255=(new_r02*x250);
evalcond[0]=((((-1.0)*x250*x253))+new_r02);
evalcond[1]=((((-1.0)*x251*x253))+new_r12);
evalcond[2]=(((new_r12*x250))+(((-1.0)*new_r02*x251)));
evalcond[3]=(x254+x255+(((-1.0)*x253)));
evalcond[4]=(((cj17*x255))+((cj17*x254))+(((-1.0)*new_r22*x253)));
evalcond[5]=((((-1.0)*new_r10*x251*x253))+(((-1.0)*new_r20*x252))+(((-1.0)*new_r00*x250*x253)));
evalcond[6]=((((-1.0)*new_r21*x252))+(((-1.0)*new_r01*x250*x253))+(((-1.0)*new_r11*x251*x253)));
evalcond[7]=((1.0)+(((-1.0)*new_r22*x252))+(((-1.0)*x253*x255))+(((-1.0)*x253*x254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j18eval[3];
j18eval[0]=sj17;
j18eval[1]=IKsign(sj17);
j18eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal j18eval[2];
j18eval[0]=sj16;
j18eval[1]=sj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  )
{
{
IkReal j18eval[3];
j18eval[0]=cj16;
j18eval[1]=cj17;
j18eval[2]=sj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[3];
sj16=1.0;
cj16=0;
j16=1.5707963267949;
j18eval[0]=sj17;
j18eval[1]=IKsign(sj17);
j18eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal j18eval[3];
sj16=1.0;
cj16=0;
j16=1.5707963267949;
j18eval[0]=cj17;
j18eval[1]=IKsign(cj17);
j18eval[2]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal j18eval[1];
sj16=1.0;
cj16=0;
j16=1.5707963267949;
j18eval[0]=sj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j17))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x256=IKsin(j18);
IkReal x257=((1.0)*(IKcos(j18)));
evalcond[0]=(x256+new_r11);
evalcond[1]=(new_r10+(((-1.0)*x257)));
evalcond[2]=((((-1.0)*new_r00))+(((-1.0)*x256)));
evalcond[3]=((((-1.0)*new_r01))+(((-1.0)*x257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x258=IKcos(j18);
IkReal x259=((1.0)*(IKsin(j18)));
evalcond[0]=(x258+new_r10);
evalcond[1]=(new_r11+(((-1.0)*x259)));
evalcond[2]=((((-1.0)*new_r00))+(((-1.0)*x259)));
evalcond[3]=((((-1.0)*new_r01))+(((-1.0)*x258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x260=IKcos(j18);
IkReal x261=((1.0)*(IKsin(j18)));
evalcond[0]=(x260+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x261)));
evalcond[2]=((((-1.0)*new_r00))+(((-1.0)*x261)));
evalcond[3]=((((-1.0)*x260))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x262=IKsin(j18);
IkReal x263=((1.0)*(IKcos(j18)));
evalcond[0]=(x262+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x263)));
evalcond[2]=((((-1.0)*x262))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*new_r01))+(((-1.0)*x263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[6];
IkReal x264=IKsin(j18);
IkReal x265=IKcos(j18);
IkReal x266=((-1.0)*x265);
evalcond[0]=x264;
evalcond[1]=(new_r22*x264);
evalcond[2]=x266;
evalcond[3]=(new_r22*x266);
evalcond[4]=((((-1.0)*x264))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x265))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j18]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x267=IKPowWithIntegerCheck(sj17,-1);
if(!x267.valid){
continue;
}
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x267.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r20*(x267.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r20*(x267.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x268=IKsin(j18);
IkReal x269=IKcos(j18);
IkReal x270=((1.0)*sj17);
IkReal x271=((1.0)*x269);
IkReal x272=((1.0)*x268);
evalcond[0]=(((sj17*x269))+new_r20);
evalcond[1]=(((cj17*x268))+new_r11);
evalcond[2]=((((-1.0)*x268*x270))+new_r21);
evalcond[3]=(new_r10+(((-1.0)*cj17*x271)));
evalcond[4]=((((-1.0)*x272))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x271))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x270))+x268+((cj17*new_r11)));
evalcond[7]=((((-1.0)*new_r20*x270))+(((-1.0)*x271))+((cj17*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x273 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x273.valid){
continue;
}
CheckValue<IkReal> x274=IKPowWithIntegerCheck(IKsign(cj17),-1);
if(!x274.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x273.value)+(((1.5707963267949)*(x274.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x275=IKsin(j18);
IkReal x276=IKcos(j18);
IkReal x277=((1.0)*sj17);
IkReal x278=((1.0)*x276);
IkReal x279=((1.0)*x275);
evalcond[0]=(((sj17*x276))+new_r20);
evalcond[1]=(((cj17*x275))+new_r11);
evalcond[2]=((((-1.0)*x275*x277))+new_r21);
evalcond[3]=(new_r10+(((-1.0)*cj17*x278)));
evalcond[4]=((((-1.0)*x279))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x278))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x277))+x275+((cj17*new_r11)));
evalcond[7]=((((-1.0)*new_r20*x277))+(((-1.0)*x278))+((cj17*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x280 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x280.valid){
continue;
}
CheckValue<IkReal> x281=IKPowWithIntegerCheck(IKsign(sj17),-1);
if(!x281.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x280.value)+(((1.5707963267949)*(x281.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x282=IKsin(j18);
IkReal x283=IKcos(j18);
IkReal x284=((1.0)*sj17);
IkReal x285=((1.0)*x283);
IkReal x286=((1.0)*x282);
evalcond[0]=(((sj17*x283))+new_r20);
evalcond[1]=(((cj17*x282))+new_r11);
evalcond[2]=((((-1.0)*x282*x284))+new_r21);
evalcond[3]=((((-1.0)*cj17*x285))+new_r10);
evalcond[4]=((((-1.0)*x286))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x285))+(((-1.0)*new_r01)));
evalcond[6]=(x282+((cj17*new_r11))+(((-1.0)*new_r21*x284)));
evalcond[7]=((((-1.0)*x285))+(((-1.0)*new_r20*x284))+((cj17*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r00, new_r01);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x287=IKcos(j18);
IkReal x288=IKsin(j18);
IkReal x289=((1.0)*sj17);
IkReal x290=((1.0)*new_r11);
IkReal x291=((1.0)*new_r10);
IkReal x292=((1.0)*x287);
IkReal x293=((1.0)*x288);
evalcond[0]=(((sj17*x287))+new_r20);
evalcond[1]=((((-1.0)*x293))+new_r00);
evalcond[2]=((((-1.0)*x292))+new_r01);
evalcond[3]=((((-1.0)*x288*x289))+new_r21);
evalcond[4]=((((-1.0)*x290))+((cj17*x288)));
evalcond[5]=((((-1.0)*x291))+(((-1.0)*cj17*x292)));
evalcond[6]=((((-1.0)*cj17*x290))+x288+(((-1.0)*new_r21*x289)));
evalcond[7]=((((-1.0)*x292))+(((-1.0)*cj17*x291))+(((-1.0)*new_r20*x289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x294=IKcos(j18);
IkReal x295=IKsin(j18);
IkReal x296=((1.0)*sj16);
IkReal x297=((1.0)*x295);
IkReal x298=((1.0)*x294);
evalcond[0]=(x294+new_r20);
evalcond[1]=((((-1.0)*x297))+new_r21);
evalcond[2]=(((sj16*x294))+new_r01);
evalcond[3]=(((sj16*x295))+new_r00);
evalcond[4]=(new_r11+(((-1.0)*cj16*x298)));
evalcond[5]=(new_r10+(((-1.0)*new_r02*x297)));
evalcond[6]=((((-1.0)*x297))+(((-1.0)*new_r00*x296))+((cj16*new_r10)));
evalcond[7]=((((-1.0)*new_r01*x296))+(((-1.0)*x298))+((cj16*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x299=IKcos(j18);
IkReal x300=IKsin(j18);
IkReal x301=((1.0)*sj16);
IkReal x302=((1.0)*x299);
evalcond[0]=(x300+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x302)));
evalcond[2]=(((sj16*x299))+new_r01);
evalcond[3]=(((sj16*x300))+new_r00);
evalcond[4]=(((new_r02*x300))+new_r10);
evalcond[5]=((((-1.0)*cj16*x302))+new_r11);
evalcond[6]=((((-1.0)*x300))+(((-1.0)*new_r00*x301))+((cj16*new_r10)));
evalcond[7]=((((-1.0)*new_r01*x301))+((cj16*new_r11))+(((-1.0)*x302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j17))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x303=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj16*x303))+(((-1.0)*new_r00*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj16*x303))+((cj16*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj16*x303))+(((-1.0)*new_r00*sj16))))+IKsqr(((((-1.0)*sj16*x303))+((cj16*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-1.0)*cj16*x303))+(((-1.0)*new_r00*sj16))), ((((-1.0)*sj16*x303))+((cj16*new_r00))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x304=IKsin(j18);
IkReal x305=IKcos(j18);
IkReal x306=((1.0)*sj16);
IkReal x307=((1.0)*x305);
IkReal x308=(sj16*x304);
IkReal x309=(cj16*x304);
IkReal x310=(sj16*x305);
IkReal x311=(cj16*x307);
evalcond[0]=(x304+((cj16*new_r01))+((new_r11*sj16)));
evalcond[1]=(x309+x310+new_r01);
evalcond[2]=(((cj16*new_r00))+((new_r10*sj16))+(((-1.0)*x307)));
evalcond[3]=((((-1.0)*x304))+(((-1.0)*new_r00*x306))+((cj16*new_r10)));
evalcond[4]=((((-1.0)*new_r01*x306))+((cj16*new_r11))+(((-1.0)*x307)));
evalcond[5]=(x308+(((-1.0)*x311))+new_r00);
evalcond[6]=(x308+(((-1.0)*x311))+new_r11);
evalcond[7]=((((-1.0)*x309))+(((-1.0)*x305*x306))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x312=((1.0)*new_r00);
if( IKabs(((((-1.0)*sj16*x312))+((cj16*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj16*x312))+(((-1.0)*new_r01*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj16*x312))+((cj16*new_r01))))+IKsqr(((((-1.0)*cj16*x312))+(((-1.0)*new_r01*sj16))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-1.0)*sj16*x312))+((cj16*new_r01))), ((((-1.0)*cj16*x312))+(((-1.0)*new_r01*sj16))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x313=IKcos(j18);
IkReal x314=IKsin(j18);
IkReal x315=((1.0)*sj16);
IkReal x316=((1.0)*x314);
IkReal x317=(sj16*x313);
IkReal x318=(cj16*x313);
IkReal x319=(cj16*x316);
evalcond[0]=(x313+((cj16*new_r00))+((new_r10*sj16)));
evalcond[1]=((((-1.0)*x316))+((cj16*new_r01))+((new_r11*sj16)));
evalcond[2]=(x318+((sj16*x314))+new_r00);
evalcond[3]=((((-1.0)*new_r00*x315))+(((-1.0)*x316))+((cj16*new_r10)));
evalcond[4]=((((-1.0)*x313))+(((-1.0)*new_r01*x315))+((cj16*new_r11)));
evalcond[5]=(x317+(((-1.0)*x319))+new_r01);
evalcond[6]=(x317+(((-1.0)*x319))+new_r10);
evalcond[7]=((((-1.0)*x318))+(((-1.0)*x314*x315))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j16))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r10, new_r11);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x320=IKcos(j18);
IkReal x321=IKsin(j18);
IkReal x322=((1.0)*sj17);
IkReal x323=((1.0)*x320);
IkReal x324=((1.0)*x321);
evalcond[0]=(((sj17*x320))+new_r20);
evalcond[1]=((((-1.0)*x324))+new_r10);
evalcond[2]=((((-1.0)*x323))+new_r11);
evalcond[3]=(((cj17*x321))+new_r01);
evalcond[4]=((((-1.0)*x321*x322))+new_r21);
evalcond[5]=((((-1.0)*cj17*x323))+new_r00);
evalcond[6]=(x321+(((-1.0)*new_r21*x322))+((cj17*new_r01)));
evalcond[7]=((((-1.0)*x323))+((cj17*new_r00))+(((-1.0)*new_r20*x322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j16)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[3];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
j18eval[0]=sj17;
j18eval[1]=IKsign(sj17);
j18eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal j18eval[1];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
j18eval[0]=sj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal j18eval[2];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
j18eval[0]=cj17;
j18eval[1]=sj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x325=IKcos(j18);
IkReal x326=((1.0)*(IKsin(j18)));
evalcond[0]=(x325+new_r20);
evalcond[1]=((((-1.0)*x326))+new_r21);
evalcond[2]=((((-1.0)*x326))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x325))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x327=IKsin(j18);
IkReal x328=((1.0)*(IKcos(j18)));
evalcond[0]=(x327+new_r21);
evalcond[1]=((((-1.0)*x328))+new_r20);
evalcond[2]=((((-1.0)*x327))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x328))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j17))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x329=IKsin(j18);
IkReal x330=((1.0)*(IKcos(j18)));
evalcond[0]=(x329+(((-1.0)*new_r01)));
evalcond[1]=((((-1.0)*x329))+(((-1.0)*new_r10)));
evalcond[2]=((((-1.0)*new_r11))+(((-1.0)*x330)));
evalcond[3]=((((-1.0)*x330))+(((-1.0)*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r10), new_r00);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x331=IKcos(j18);
IkReal x332=((1.0)*(IKsin(j18)));
evalcond[0]=(x331+(((-1.0)*new_r00)));
evalcond[1]=((((-1.0)*new_r10))+(((-1.0)*x332)));
evalcond[2]=((((-1.0)*x331))+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x332))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[6];
IkReal x333=IKsin(j18);
IkReal x334=IKcos(j18);
IkReal x335=((-1.0)*x334);
evalcond[0]=x333;
evalcond[1]=(new_r22*x333);
evalcond[2]=x335;
evalcond[3]=(new_r22*x335);
evalcond[4]=((((-1.0)*x333))+(((-1.0)*new_r10)));
evalcond[5]=((((-1.0)*x334))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j18]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x336=IKPowWithIntegerCheck(cj17,-1);
if(!x336.valid){
continue;
}
CheckValue<IkReal> x337=IKPowWithIntegerCheck(sj17,-1);
if(!x337.valid){
continue;
}
if( IKabs((new_r01*(x336.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x337.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r01*(x336.value)))+IKsqr(((-1.0)*new_r20*(x337.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2((new_r01*(x336.value)), ((-1.0)*new_r20*(x337.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x338=IKsin(j18);
IkReal x339=IKcos(j18);
IkReal x340=((1.0)*sj17);
IkReal x341=((1.0)*new_r00);
IkReal x342=((1.0)*new_r01);
IkReal x343=((1.0)*x339);
IkReal x344=((1.0)*x338);
evalcond[0]=(((sj17*x339))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x338*x340)));
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x344)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x343)));
evalcond[4]=((((-1.0)*x342))+((cj17*x338)));
evalcond[5]=((((-1.0)*cj17*x343))+(((-1.0)*x341)));
evalcond[6]=(x338+(((-1.0)*cj17*x342))+(((-1.0)*new_r21*x340)));
evalcond[7]=((((-1.0)*new_r20*x340))+(((-1.0)*cj17*x341))+(((-1.0)*x343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x345=IKPowWithIntegerCheck(sj17,-1);
if(!x345.valid){
continue;
}
if( IKabs((new_r21*(x345.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r21*(x345.value)))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2((new_r21*(x345.value)), ((-1.0)*new_r11));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x346=IKsin(j18);
IkReal x347=IKcos(j18);
IkReal x348=((1.0)*sj17);
IkReal x349=((1.0)*new_r00);
IkReal x350=((1.0)*new_r01);
IkReal x351=((1.0)*x347);
IkReal x352=((1.0)*x346);
evalcond[0]=(((sj17*x347))+new_r20);
evalcond[1]=((((-1.0)*x346*x348))+new_r21);
evalcond[2]=((((-1.0)*x352))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x351))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*x350))+((cj17*x346)));
evalcond[5]=((((-1.0)*cj17*x351))+(((-1.0)*x349)));
evalcond[6]=((((-1.0)*cj17*x350))+x346+(((-1.0)*new_r21*x348)));
evalcond[7]=((((-1.0)*x351))+(((-1.0)*new_r20*x348))+(((-1.0)*cj17*x349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x353 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x353.valid){
continue;
}
CheckValue<IkReal> x354=IKPowWithIntegerCheck(IKsign(sj17),-1);
if(!x354.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x353.value)+(((1.5707963267949)*(x354.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x355=IKsin(j18);
IkReal x356=IKcos(j18);
IkReal x357=((1.0)*sj17);
IkReal x358=((1.0)*new_r00);
IkReal x359=((1.0)*new_r01);
IkReal x360=((1.0)*x356);
IkReal x361=((1.0)*x355);
evalcond[0]=(((sj17*x356))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x355*x357)));
evalcond[2]=((((-1.0)*x361))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x360))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*x359))+((cj17*x355)));
evalcond[5]=((((-1.0)*cj17*x360))+(((-1.0)*x358)));
evalcond[6]=((((-1.0)*cj17*x359))+x355+(((-1.0)*new_r21*x357)));
evalcond[7]=((((-1.0)*cj17*x358))+(((-1.0)*x360))+(((-1.0)*new_r20*x357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j18eval[0]=1.0;
if( IKabs(j18eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j18]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j18array[2], cj18array[2], sj18array[2], tempj18array[1];
int numsolutions = 0;
for(int ij18 = 0; ij18 < numroots; ++ij18)
{
IkReal htj18 = zeror[ij18];
tempj18array[0]=((2.0)*(atan(htj18)));
for(int kj18 = 0; kj18 < 1; ++kj18)
{
j18array[numsolutions] = tempj18array[kj18];
if( j18array[numsolutions] > IKPI )
{
    j18array[numsolutions]-=IK2PI;
}
else if( j18array[numsolutions] < -IKPI )
{
    j18array[numsolutions]+=IK2PI;
}
sj18array[numsolutions] = IKsin(j18array[numsolutions]);
cj18array[numsolutions] = IKcos(j18array[numsolutions]);
numsolutions++;
}
}
bool j18valid[2]={true,true};
_nj18 = 2;
for(int ij18 = 0; ij18 < numsolutions; ++ij18)
    {
if( !j18valid[ij18] )
{
    continue;
}
    j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
htj18 = IKtan(j18/2);

_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < numsolutions; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j18]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x363=IKPowWithIntegerCheck(sj17,-1);
if(!x363.valid){
continue;
}
IkReal x362=x363.value;
CheckValue<IkReal> x364=IKPowWithIntegerCheck(cj16,-1);
if(!x364.valid){
continue;
}
CheckValue<IkReal> x365=IKPowWithIntegerCheck(cj17,-1);
if(!x365.valid){
continue;
}
if( IKabs((x362*(x364.value)*(x365.value)*(((((-1.0)*new_r01*sj17))+((new_r20*sj16)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x362)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x362*(x364.value)*(x365.value)*(((((-1.0)*new_r01*sj17))+((new_r20*sj16))))))+IKsqr(((-1.0)*new_r20*x362))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2((x362*(x364.value)*(x365.value)*(((((-1.0)*new_r01*sj17))+((new_r20*sj16))))), ((-1.0)*new_r20*x362));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[12];
IkReal x366=IKsin(j18);
IkReal x367=IKcos(j18);
IkReal x368=((1.0)*sj16);
IkReal x369=((1.0)*sj17);
IkReal x370=(new_r10*sj16);
IkReal x371=(cj16*new_r01);
IkReal x372=(new_r11*sj16);
IkReal x373=(cj16*new_r00);
IkReal x374=((1.0)*x367);
IkReal x375=((1.0)*x366);
IkReal x376=(sj16*x366);
IkReal x377=(cj17*x366);
evalcond[0]=(((sj17*x367))+new_r20);
evalcond[1]=((((-1.0)*x366*x369))+new_r21);
evalcond[2]=(x377+x372+x371);
evalcond[3]=((((-1.0)*new_r00*x368))+(((-1.0)*x375))+((cj16*new_r10)));
evalcond[4]=((((-1.0)*x374))+((cj16*new_r11))+(((-1.0)*new_r01*x368)));
evalcond[5]=(((sj16*x367))+((cj16*x377))+new_r01);
evalcond[6]=((((-1.0)*cj17*x374))+x373+x370);
evalcond[7]=(x376+(((-1.0)*cj16*cj17*x374))+new_r00);
evalcond[8]=(((cj17*x376))+(((-1.0)*cj16*x374))+new_r11);
evalcond[9]=((((-1.0)*cj17*x367*x368))+(((-1.0)*cj16*x375))+new_r10);
evalcond[10]=(((cj17*x372))+((cj17*x371))+x366+(((-1.0)*new_r21*x369)));
evalcond[11]=((((-1.0)*new_r20*x369))+((cj17*x373))+((cj17*x370))+(((-1.0)*x374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x379=IKPowWithIntegerCheck(sj17,-1);
if(!x379.valid){
continue;
}
IkReal x378=x379.value;
CheckValue<IkReal> x380=IKPowWithIntegerCheck(sj16,-1);
if(!x380.valid){
continue;
}
if( IKabs((x378*(x380.value)*(((((-1.0)*new_r00*sj17))+(((-1.0)*cj16*cj17*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x378)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x378*(x380.value)*(((((-1.0)*new_r00*sj17))+(((-1.0)*cj16*cj17*new_r20))))))+IKsqr(((-1.0)*new_r20*x378))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2((x378*(x380.value)*(((((-1.0)*new_r00*sj17))+(((-1.0)*cj16*cj17*new_r20))))), ((-1.0)*new_r20*x378));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[12];
IkReal x381=IKsin(j18);
IkReal x382=IKcos(j18);
IkReal x383=((1.0)*sj16);
IkReal x384=((1.0)*sj17);
IkReal x385=(new_r10*sj16);
IkReal x386=(cj16*new_r01);
IkReal x387=(new_r11*sj16);
IkReal x388=(cj16*new_r00);
IkReal x389=((1.0)*x382);
IkReal x390=((1.0)*x381);
IkReal x391=(sj16*x381);
IkReal x392=(cj17*x381);
evalcond[0]=(((sj17*x382))+new_r20);
evalcond[1]=((((-1.0)*x381*x384))+new_r21);
evalcond[2]=(x386+x387+x392);
evalcond[3]=((((-1.0)*x390))+(((-1.0)*new_r00*x383))+((cj16*new_r10)));
evalcond[4]=((((-1.0)*new_r01*x383))+(((-1.0)*x389))+((cj16*new_r11)));
evalcond[5]=(((cj16*x392))+((sj16*x382))+new_r01);
evalcond[6]=(x385+x388+(((-1.0)*cj17*x389)));
evalcond[7]=((((-1.0)*cj16*cj17*x389))+x391+new_r00);
evalcond[8]=(((cj17*x391))+(((-1.0)*cj16*x389))+new_r11);
evalcond[9]=(new_r10+(((-1.0)*cj17*x382*x383))+(((-1.0)*cj16*x390)));
evalcond[10]=(x381+(((-1.0)*new_r21*x384))+((cj17*x386))+((cj17*x387)));
evalcond[11]=((((-1.0)*new_r20*x384))+(((-1.0)*x389))+((cj17*x385))+((cj17*x388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x393 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x393.valid){
continue;
}
CheckValue<IkReal> x394=IKPowWithIntegerCheck(IKsign(sj17),-1);
if(!x394.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x393.value)+(((1.5707963267949)*(x394.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[12];
IkReal x395=IKsin(j18);
IkReal x396=IKcos(j18);
IkReal x397=((1.0)*sj16);
IkReal x398=((1.0)*sj17);
IkReal x399=(new_r10*sj16);
IkReal x400=(cj16*new_r01);
IkReal x401=(new_r11*sj16);
IkReal x402=(cj16*new_r00);
IkReal x403=((1.0)*x396);
IkReal x404=((1.0)*x395);
IkReal x405=(sj16*x395);
IkReal x406=(cj17*x395);
evalcond[0]=(((sj17*x396))+new_r20);
evalcond[1]=((((-1.0)*x395*x398))+new_r21);
evalcond[2]=(x401+x400+x406);
evalcond[3]=((((-1.0)*new_r00*x397))+((cj16*new_r10))+(((-1.0)*x404)));
evalcond[4]=((((-1.0)*new_r01*x397))+((cj16*new_r11))+(((-1.0)*x403)));
evalcond[5]=(((cj16*x406))+new_r01+((sj16*x396)));
evalcond[6]=((((-1.0)*cj17*x403))+x399+x402);
evalcond[7]=((((-1.0)*cj16*cj17*x403))+x405+new_r00);
evalcond[8]=((((-1.0)*cj16*x403))+((cj17*x405))+new_r11);
evalcond[9]=((((-1.0)*cj16*x404))+(((-1.0)*cj17*x396*x397))+new_r10);
evalcond[10]=((((-1.0)*new_r21*x398))+x395+((cj17*x400))+((cj17*x401)));
evalcond[11]=(((cj17*x399))+((cj17*x402))+(((-1.0)*x403))+(((-1.0)*new_r20*x398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x407 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x407.valid){
continue;
}
CheckValue<IkReal> x408=IKPowWithIntegerCheck(IKsign(sj17),-1);
if(!x408.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x407.value)+(((1.5707963267949)*(x408.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[2];
evalcond[0]=(((sj17*(IKcos(j18))))+new_r20);
evalcond[1]=((((-1.0)*sj17*(IKsin(j18))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
j16eval[0]=sj17;
j16eval[1]=IKsign(sj17);
j16eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
j16eval[0]=cj18;
j16eval[1]=sj17;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j18)))), 6.28318530717959)));
evalcond[1]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((-1.0)*new_r00), new_r10);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[18];
IkReal x409=IKsin(j16);
IkReal x410=IKcos(j16);
IkReal x411=((1.0)*sj17);
IkReal x412=(new_r00*x410);
IkReal x413=(new_r11*x409);
IkReal x414=(new_r10*x409);
IkReal x415=(new_r02*x410);
IkReal x416=(new_r22*x409);
IkReal x417=(new_r22*x410);
IkReal x418=(new_r12*x409);
IkReal x419=((1.0)*x409);
IkReal x420=(new_r01*x410);
evalcond[0]=(x409+new_r00);
evalcond[1]=(x417+new_r01);
evalcond[2]=(x416+new_r11);
evalcond[3]=(new_r10+(((-1.0)*x410)));
evalcond[4]=((((-1.0)*x410*x411))+new_r02);
evalcond[5]=(new_r12+(((-1.0)*x409*x411)));
evalcond[6]=(x412+x414);
evalcond[7]=(((new_r12*x410))+(((-1.0)*new_r02*x419)));
evalcond[8]=(((new_r11*x410))+(((-1.0)*new_r01*x419)));
evalcond[9]=(x413+x420+new_r22);
evalcond[10]=((-1.0)+((new_r10*x410))+(((-1.0)*new_r00*x419)));
evalcond[11]=(((new_r22*x414))+((new_r22*x412)));
evalcond[12]=(x415+x418+(((-1.0)*x411)));
evalcond[13]=((((-1.0)*x411*x414))+(((-1.0)*x411*x412)));
evalcond[14]=(((new_r22*x415))+((new_r12*x416))+(((-1.0)*new_r22*x411)));
evalcond[15]=((((-1.0)*cj17*new_r21))+(((-1.0)*x411*x413))+(((-1.0)*x411*x420)));
evalcond[16]=((1.0)+((new_r22*x413))+(((-1.0)*sj17*x411))+((new_r01*x417)));
evalcond[17]=((1.0)+(((-1.0)*x411*x418))+(((-1.0)*x411*x415))+(((-1.0)*(new_r22*new_r22))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j18)))), 6.28318530717959)));
evalcond[1]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(new_r00, ((-1.0)*new_r10));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[18];
IkReal x421=IKcos(j16);
IkReal x422=IKsin(j16);
IkReal x423=((1.0)*sj17);
IkReal x424=((1.0)*new_r22);
IkReal x425=(new_r00*x421);
IkReal x426=(new_r11*x422);
IkReal x427=(new_r10*x422);
IkReal x428=(new_r02*x421);
IkReal x429=(new_r22*x422);
IkReal x430=((1.0)*x422);
IkReal x431=(new_r12*x422);
IkReal x432=(new_r01*x421);
evalcond[0]=(x421+new_r10);
evalcond[1]=((((-1.0)*x430))+new_r00);
evalcond[2]=((((-1.0)*x421*x423))+new_r02);
evalcond[3]=((((-1.0)*x422*x423))+new_r12);
evalcond[4]=((((-1.0)*x421*x424))+new_r01);
evalcond[5]=((((-1.0)*x422*x424))+new_r11);
evalcond[6]=(x427+x425);
evalcond[7]=(((new_r12*x421))+(((-1.0)*new_r02*x430)));
evalcond[8]=((((-1.0)*new_r01*x430))+((new_r11*x421)));
evalcond[9]=((1.0)+(((-1.0)*new_r00*x430))+((new_r10*x421)));
evalcond[10]=(((new_r22*x425))+((new_r22*x427)));
evalcond[11]=((((-1.0)*x423))+x428+x431);
evalcond[12]=((((-1.0)*x424))+x426+x432);
evalcond[13]=((((-1.0)*x423*x427))+(((-1.0)*x423*x425)));
evalcond[14]=(((new_r22*x428))+(((-1.0)*new_r22*x423))+((new_r12*x429)));
evalcond[15]=((-1.0)+((new_r22*x426))+(sj17*sj17)+((new_r22*x432)));
evalcond[16]=(((new_r22*sj17))+(((-1.0)*x423*x426))+(((-1.0)*x423*x432)));
evalcond[17]=((1.0)+(((-1.0)*new_r22*x424))+(((-1.0)*x423*x428))+(((-1.0)*x423*x431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j17))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x433=((1.0)*sj18);
if( IKabs(((((-1.0)*new_r00*x433))+(((-1.0)*cj18*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x433))+((cj18*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x433))+(((-1.0)*cj18*new_r01))))+IKsqr(((((-1.0)*new_r01*x433))+((cj18*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((-1.0)*new_r00*x433))+(((-1.0)*cj18*new_r01))), ((((-1.0)*new_r01*x433))+((cj18*new_r00))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x434=IKsin(j16);
IkReal x435=IKcos(j16);
IkReal x436=((1.0)*cj18);
IkReal x437=((1.0)*sj18);
IkReal x438=(sj18*x434);
IkReal x439=((1.0)*x434);
IkReal x440=(x435*x436);
evalcond[0]=(((new_r01*x435))+sj18+((new_r11*x434)));
evalcond[1]=(((sj18*x435))+((cj18*x434))+new_r01);
evalcond[2]=((((-1.0)*x440))+x438+new_r00);
evalcond[3]=((((-1.0)*x440))+x438+new_r11);
evalcond[4]=((((-1.0)*x436))+((new_r00*x435))+((new_r10*x434)));
evalcond[5]=((((-1.0)*x435*x437))+(((-1.0)*x434*x436))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x439))+(((-1.0)*x437))+((new_r10*x435)));
evalcond[7]=((((-1.0)*x436))+(((-1.0)*new_r01*x439))+((new_r11*x435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x441=((1.0)*new_r00);
if( IKabs(((((-1.0)*cj18*new_r01))+(((-1.0)*sj18*x441)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj18*x441))+((new_r01*sj18)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj18*new_r01))+(((-1.0)*sj18*x441))))+IKsqr(((((-1.0)*cj18*x441))+((new_r01*sj18))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((-1.0)*cj18*new_r01))+(((-1.0)*sj18*x441))), ((((-1.0)*cj18*x441))+((new_r01*sj18))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x442=IKcos(j16);
IkReal x443=IKsin(j16);
IkReal x444=((1.0)*sj18);
IkReal x445=(cj18*x443);
IkReal x446=((1.0)*x443);
IkReal x447=(cj18*x442);
IkReal x448=(x442*x444);
evalcond[0]=(((new_r00*x442))+cj18+((new_r10*x443)));
evalcond[1]=(((sj18*x443))+x447+new_r00);
evalcond[2]=((((-1.0)*x448))+x445+new_r01);
evalcond[3]=((((-1.0)*x448))+x445+new_r10);
evalcond[4]=((((-1.0)*x444))+((new_r01*x442))+((new_r11*x443)));
evalcond[5]=((((-1.0)*x447))+(((-1.0)*x443*x444))+new_r11);
evalcond[6]=((((-1.0)*x444))+(((-1.0)*new_r00*x446))+((new_r10*x442)));
evalcond[7]=((((-1.0)*new_r01*x446))+((new_r11*x442))+(((-1.0)*cj18)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j16eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j16eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j16eval[0]=((IKabs((new_r11*new_r22)))+(IKabs((new_r01*new_r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j16]

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x450 = IKatan2WithCheck(IkReal((new_r01*new_r22)),IkReal((new_r11*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x450.valid){
continue;
}
IkReal x449=x450.value;
j16array[0]=((-1.0)*x449);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
j16array[1]=((3.14159265358979)+(((-1.0)*x449)));
sj16array[1]=IKsin(j16array[1]);
cj16array[1]=IKcos(j16array[1]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
if( j16array[1] > IKPI )
{
    j16array[1]-=IK2PI;
}
else if( j16array[1] < -IKPI )
{    j16array[1]+=IK2PI;
}
j16valid[1] = true;
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x451=IKcos(j16);
IkReal x452=IKsin(j16);
IkReal x453=(new_r10*x452);
IkReal x454=((1.0)*x452);
IkReal x455=(new_r00*x451);
evalcond[0]=(((new_r11*x452))+((new_r01*x451)));
evalcond[1]=(x455+x453);
evalcond[2]=(((new_r10*x451))+(((-1.0)*new_r00*x454)));
evalcond[3]=(((new_r11*x451))+(((-1.0)*new_r01*x454)));
evalcond[4]=(((new_r22*x453))+((new_r22*x455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x457 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x457.valid){
continue;
}
IkReal x456=x457.value;
j16array[0]=((-1.0)*x456);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
j16array[1]=((3.14159265358979)+(((-1.0)*x456)));
sj16array[1]=IKsin(j16array[1]);
cj16array[1]=IKcos(j16array[1]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
if( j16array[1] > IKPI )
{
    j16array[1]-=IK2PI;
}
else if( j16array[1] < -IKPI )
{    j16array[1]+=IK2PI;
}
j16valid[1] = true;
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x458=IKcos(j16);
IkReal x459=IKsin(j16);
IkReal x460=(new_r22*x459);
IkReal x461=(new_r01*x458);
IkReal x462=((1.0)*x459);
evalcond[0]=(((new_r11*x459))+x461);
evalcond[1]=(((new_r10*x458))+(((-1.0)*new_r00*x462)));
evalcond[2]=(((new_r11*x458))+(((-1.0)*new_r01*x462)));
evalcond[3]=(((new_r11*x460))+((new_r22*x461)));
evalcond[4]=(((new_r00*new_r22*x458))+((new_r10*x460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x464 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x464.valid){
continue;
}
IkReal x463=x464.value;
j16array[0]=((-1.0)*x463);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
j16array[1]=((3.14159265358979)+(((-1.0)*x463)));
sj16array[1]=IKsin(j16array[1]);
cj16array[1]=IKcos(j16array[1]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
if( j16array[1] > IKPI )
{
    j16array[1]-=IK2PI;
}
else if( j16array[1] < -IKPI )
{    j16array[1]+=IK2PI;
}
j16valid[1] = true;
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x465=IKcos(j16);
IkReal x466=IKsin(j16);
IkReal x467=(new_r22*x466);
IkReal x468=((1.0)*x466);
IkReal x469=(new_r00*x465);
evalcond[0]=(((new_r10*x466))+x469);
evalcond[1]=(((new_r10*x465))+(((-1.0)*new_r00*x468)));
evalcond[2]=(((new_r11*x465))+(((-1.0)*new_r01*x468)));
evalcond[3]=(((new_r11*x467))+((new_r01*new_r22*x465)));
evalcond[4]=(((new_r10*x467))+((new_r22*x469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x471=IKPowWithIntegerCheck(sj17,-1);
if(!x471.valid){
continue;
}
IkReal x470=x471.value;
CheckValue<IkReal> x472=IKPowWithIntegerCheck(cj18,-1);
if(!x472.valid){
continue;
}
if( IKabs((x470*(x472.value)*(((((-1.0)*new_r01*sj17))+(((-1.0)*cj17*new_r02*sj18)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x470)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x470*(x472.value)*(((((-1.0)*new_r01*sj17))+(((-1.0)*cj17*new_r02*sj18))))))+IKsqr((new_r02*x470))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2((x470*(x472.value)*(((((-1.0)*new_r01*sj17))+(((-1.0)*cj17*new_r02*sj18))))), (new_r02*x470));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[18];
IkReal x473=IKcos(j16);
IkReal x474=IKsin(j16);
IkReal x475=((1.0)*cj18);
IkReal x476=((1.0)*cj17);
IkReal x477=((1.0)*sj17);
IkReal x478=(new_r00*x473);
IkReal x479=(new_r11*x474);
IkReal x480=(new_r10*x474);
IkReal x481=(new_r02*x473);
IkReal x482=(cj17*x473);
IkReal x483=((1.0)*x473);
IkReal x484=(sj18*x474);
IkReal x485=(cj18*x474);
IkReal x486=(new_r12*x474);
IkReal x487=((1.0)*x474);
IkReal x488=(new_r01*x473);
evalcond[0]=((((-1.0)*x473*x477))+new_r02);
evalcond[1]=(new_r12+(((-1.0)*x474*x477)));
evalcond[2]=(((new_r12*x473))+(((-1.0)*new_r02*x487)));
evalcond[3]=(((sj18*x482))+x485+new_r01);
evalcond[4]=((((-1.0)*x477))+x481+x486);
evalcond[5]=(x488+x479+((cj17*sj18)));
evalcond[6]=((((-1.0)*x475*x482))+x484+new_r00);
evalcond[7]=((((-1.0)*x473*x475))+((cj17*x484))+new_r11);
evalcond[8]=((((-1.0)*new_r00*x487))+((new_r10*x473))+(((-1.0)*sj18)));
evalcond[9]=((((-1.0)*new_r01*x487))+((new_r11*x473))+(((-1.0)*x475)));
evalcond[10]=(x480+x478+(((-1.0)*cj17*x475)));
evalcond[11]=((((-1.0)*sj18*x483))+new_r10+(((-1.0)*cj17*x474*x475)));
evalcond[12]=((((-1.0)*new_r22*x477))+((cj17*x481))+((cj17*x486)));
evalcond[13]=(((cj17*x479))+(((-1.0)*new_r21*x477))+sj18+((new_r01*x482)));
evalcond[14]=((((-1.0)*x477*x478))+(((-1.0)*x477*x480))+(((-1.0)*new_r20*x476)));
evalcond[15]=((((-1.0)*x477*x479))+(((-1.0)*new_r21*x476))+(((-1.0)*x477*x488)));
evalcond[16]=((1.0)+(((-1.0)*new_r22*x476))+(((-1.0)*x477*x481))+(((-1.0)*x477*x486)));
evalcond[17]=(((cj17*x478))+(((-1.0)*x475))+((cj17*x480))+(((-1.0)*new_r20*x477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x489 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x489.valid){
continue;
}
CheckValue<IkReal> x490=IKPowWithIntegerCheck(IKsign(sj17),-1);
if(!x490.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x489.value)+(((1.5707963267949)*(x490.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[18];
IkReal x491=IKcos(j16);
IkReal x492=IKsin(j16);
IkReal x493=((1.0)*cj18);
IkReal x494=((1.0)*cj17);
IkReal x495=((1.0)*sj17);
IkReal x496=(new_r00*x491);
IkReal x497=(new_r11*x492);
IkReal x498=(new_r10*x492);
IkReal x499=(new_r02*x491);
IkReal x500=(cj17*x491);
IkReal x501=((1.0)*x491);
IkReal x502=(sj18*x492);
IkReal x503=(cj18*x492);
IkReal x504=(new_r12*x492);
IkReal x505=((1.0)*x492);
IkReal x506=(new_r01*x491);
evalcond[0]=((((-1.0)*x491*x495))+new_r02);
evalcond[1]=(new_r12+(((-1.0)*x492*x495)));
evalcond[2]=((((-1.0)*new_r02*x505))+((new_r12*x491)));
evalcond[3]=(x503+new_r01+((sj18*x500)));
evalcond[4]=((((-1.0)*x495))+x499+x504);
evalcond[5]=(x497+x506+((cj17*sj18)));
evalcond[6]=(x502+(((-1.0)*x493*x500))+new_r00);
evalcond[7]=(((cj17*x502))+(((-1.0)*x491*x493))+new_r11);
evalcond[8]=((((-1.0)*new_r00*x505))+((new_r10*x491))+(((-1.0)*sj18)));
evalcond[9]=((((-1.0)*new_r01*x505))+(((-1.0)*x493))+((new_r11*x491)));
evalcond[10]=((((-1.0)*cj17*x493))+x498+x496);
evalcond[11]=((((-1.0)*cj17*x492*x493))+new_r10+(((-1.0)*sj18*x501)));
evalcond[12]=(((cj17*x504))+((cj17*x499))+(((-1.0)*new_r22*x495)));
evalcond[13]=((((-1.0)*new_r21*x495))+sj18+((new_r01*x500))+((cj17*x497)));
evalcond[14]=((((-1.0)*new_r20*x494))+(((-1.0)*x495*x498))+(((-1.0)*x495*x496)));
evalcond[15]=((((-1.0)*x495*x497))+(((-1.0)*new_r21*x494))+(((-1.0)*x495*x506)));
evalcond[16]=((1.0)+(((-1.0)*x495*x499))+(((-1.0)*x495*x504))+(((-1.0)*new_r22*x494)));
evalcond[17]=((((-1.0)*new_r20*x495))+(((-1.0)*x493))+((cj17*x498))+((cj17*x496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x507 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x507.valid){
continue;
}
CheckValue<IkReal> x508=IKPowWithIntegerCheck(IKsign(sj17),-1);
if(!x508.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x507.value)+(((1.5707963267949)*(x508.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x509=IKcos(j16);
IkReal x510=IKsin(j16);
IkReal x511=((1.0)*cj17);
IkReal x512=((1.0)*sj17);
IkReal x513=(new_r12*x510);
IkReal x514=(new_r02*x509);
evalcond[0]=(new_r02+(((-1.0)*x509*x512)));
evalcond[1]=(new_r12+(((-1.0)*x510*x512)));
evalcond[2]=(((new_r12*x509))+(((-1.0)*new_r02*x510)));
evalcond[3]=(x514+x513+(((-1.0)*x512)));
evalcond[4]=((((-1.0)*new_r22*x512))+((cj17*x514))+((cj17*x513)));
evalcond[5]=((((-1.0)*new_r20*x511))+(((-1.0)*new_r00*x509*x512))+(((-1.0)*new_r10*x510*x512)));
evalcond[6]=((((-1.0)*new_r11*x510*x512))+(((-1.0)*new_r21*x511))+(((-1.0)*new_r01*x509*x512)));
evalcond[7]=((1.0)+(((-1.0)*new_r22*x511))+(((-1.0)*x512*x514))+(((-1.0)*x512*x513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j18eval[3];
j18eval[0]=sj17;
j18eval[1]=IKsign(sj17);
j18eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal j18eval[2];
j18eval[0]=sj16;
j18eval[1]=sj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  )
{
{
IkReal j18eval[3];
j18eval[0]=cj16;
j18eval[1]=cj17;
j18eval[2]=sj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[3];
sj16=1.0;
cj16=0;
j16=1.5707963267949;
j18eval[0]=sj17;
j18eval[1]=IKsign(sj17);
j18eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal j18eval[3];
sj16=1.0;
cj16=0;
j16=1.5707963267949;
j18eval[0]=cj17;
j18eval[1]=IKsign(cj17);
j18eval[2]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal j18eval[1];
sj16=1.0;
cj16=0;
j16=1.5707963267949;
j18eval[0]=sj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j17))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x515=IKsin(j18);
IkReal x516=((1.0)*(IKcos(j18)));
evalcond[0]=(x515+new_r11);
evalcond[1]=(new_r10+(((-1.0)*x516)));
evalcond[2]=((((-1.0)*x515))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*new_r01))+(((-1.0)*x516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x517=IKcos(j18);
IkReal x518=((1.0)*(IKsin(j18)));
evalcond[0]=(x517+new_r10);
evalcond[1]=(new_r11+(((-1.0)*x518)));
evalcond[2]=((((-1.0)*new_r00))+(((-1.0)*x518)));
evalcond[3]=((((-1.0)*x517))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x519=IKcos(j18);
IkReal x520=((1.0)*(IKsin(j18)));
evalcond[0]=(x519+new_r20);
evalcond[1]=((((-1.0)*x520))+new_r21);
evalcond[2]=((((-1.0)*x520))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x519))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x521=IKsin(j18);
IkReal x522=((1.0)*(IKcos(j18)));
evalcond[0]=(x521+new_r21);
evalcond[1]=((((-1.0)*x522))+new_r20);
evalcond[2]=((((-1.0)*x521))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x522))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[6];
IkReal x523=IKsin(j18);
IkReal x524=IKcos(j18);
IkReal x525=((-1.0)*x524);
evalcond[0]=x523;
evalcond[1]=(new_r22*x523);
evalcond[2]=x525;
evalcond[3]=(new_r22*x525);
evalcond[4]=((((-1.0)*x523))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x524))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j18]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x526=IKPowWithIntegerCheck(sj17,-1);
if(!x526.valid){
continue;
}
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x526.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r20*(x526.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r20*(x526.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x527=IKsin(j18);
IkReal x528=IKcos(j18);
IkReal x529=((1.0)*sj17);
IkReal x530=((1.0)*x528);
IkReal x531=((1.0)*x527);
evalcond[0]=(((sj17*x528))+new_r20);
evalcond[1]=(((cj17*x527))+new_r11);
evalcond[2]=((((-1.0)*x527*x529))+new_r21);
evalcond[3]=((((-1.0)*cj17*x530))+new_r10);
evalcond[4]=((((-1.0)*x531))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x530))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x529))+x527+((cj17*new_r11)));
evalcond[7]=((((-1.0)*new_r20*x529))+(((-1.0)*x530))+((cj17*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x532 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x532.valid){
continue;
}
CheckValue<IkReal> x533=IKPowWithIntegerCheck(IKsign(cj17),-1);
if(!x533.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x532.value)+(((1.5707963267949)*(x533.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x534=IKsin(j18);
IkReal x535=IKcos(j18);
IkReal x536=((1.0)*sj17);
IkReal x537=((1.0)*x535);
IkReal x538=((1.0)*x534);
evalcond[0]=(((sj17*x535))+new_r20);
evalcond[1]=(((cj17*x534))+new_r11);
evalcond[2]=((((-1.0)*x534*x536))+new_r21);
evalcond[3]=((((-1.0)*cj17*x537))+new_r10);
evalcond[4]=((((-1.0)*x538))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x537))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x536))+x534+((cj17*new_r11)));
evalcond[7]=((((-1.0)*x537))+(((-1.0)*new_r20*x536))+((cj17*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x539 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x539.valid){
continue;
}
CheckValue<IkReal> x540=IKPowWithIntegerCheck(IKsign(sj17),-1);
if(!x540.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x539.value)+(((1.5707963267949)*(x540.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x541=IKsin(j18);
IkReal x542=IKcos(j18);
IkReal x543=((1.0)*sj17);
IkReal x544=((1.0)*x542);
IkReal x545=((1.0)*x541);
evalcond[0]=(((sj17*x542))+new_r20);
evalcond[1]=(((cj17*x541))+new_r11);
evalcond[2]=((((-1.0)*x541*x543))+new_r21);
evalcond[3]=((((-1.0)*cj17*x544))+new_r10);
evalcond[4]=((((-1.0)*x545))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x544))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x543))+x541+((cj17*new_r11)));
evalcond[7]=((((-1.0)*new_r20*x543))+(((-1.0)*x544))+((cj17*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r00, new_r01);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x546=IKcos(j18);
IkReal x547=IKsin(j18);
IkReal x548=((1.0)*sj17);
IkReal x549=((1.0)*new_r11);
IkReal x550=((1.0)*new_r10);
IkReal x551=((1.0)*x546);
IkReal x552=((1.0)*x547);
evalcond[0]=(((sj17*x546))+new_r20);
evalcond[1]=((((-1.0)*x552))+new_r00);
evalcond[2]=((((-1.0)*x551))+new_r01);
evalcond[3]=((((-1.0)*x547*x548))+new_r21);
evalcond[4]=(((cj17*x547))+(((-1.0)*x549)));
evalcond[5]=((((-1.0)*cj17*x551))+(((-1.0)*x550)));
evalcond[6]=((((-1.0)*cj17*x549))+(((-1.0)*new_r21*x548))+x547);
evalcond[7]=((((-1.0)*cj17*x550))+(((-1.0)*new_r20*x548))+(((-1.0)*x551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x553=IKcos(j18);
IkReal x554=IKsin(j18);
IkReal x555=((1.0)*sj16);
IkReal x556=((1.0)*x554);
IkReal x557=((1.0)*x553);
evalcond[0]=(x553+new_r20);
evalcond[1]=((((-1.0)*x556))+new_r21);
evalcond[2]=(new_r01+((sj16*x553)));
evalcond[3]=(new_r00+((sj16*x554)));
evalcond[4]=(new_r11+(((-1.0)*cj16*x557)));
evalcond[5]=(new_r10+(((-1.0)*new_r02*x556)));
evalcond[6]=((((-1.0)*new_r00*x555))+(((-1.0)*x556))+((cj16*new_r10)));
evalcond[7]=((((-1.0)*new_r01*x555))+(((-1.0)*x557))+((cj16*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x558=IKcos(j18);
IkReal x559=IKsin(j18);
IkReal x560=((1.0)*sj16);
IkReal x561=((1.0)*x558);
evalcond[0]=(x559+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x561)));
evalcond[2]=(new_r01+((sj16*x558)));
evalcond[3]=(new_r00+((sj16*x559)));
evalcond[4]=(((new_r02*x559))+new_r10);
evalcond[5]=((((-1.0)*cj16*x561))+new_r11);
evalcond[6]=((((-1.0)*new_r00*x560))+(((-1.0)*x559))+((cj16*new_r10)));
evalcond[7]=(((cj16*new_r11))+(((-1.0)*x561))+(((-1.0)*new_r01*x560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j17))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x562=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj16*x562))+(((-1.0)*new_r00*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj16*x562))+((cj16*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj16*x562))+(((-1.0)*new_r00*sj16))))+IKsqr(((((-1.0)*sj16*x562))+((cj16*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-1.0)*cj16*x562))+(((-1.0)*new_r00*sj16))), ((((-1.0)*sj16*x562))+((cj16*new_r00))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x563=IKsin(j18);
IkReal x564=IKcos(j18);
IkReal x565=((1.0)*sj16);
IkReal x566=((1.0)*x564);
IkReal x567=(sj16*x563);
IkReal x568=(cj16*x563);
IkReal x569=(sj16*x564);
IkReal x570=(cj16*x566);
evalcond[0]=(x563+((cj16*new_r01))+((new_r11*sj16)));
evalcond[1]=(x568+x569+new_r01);
evalcond[2]=(((cj16*new_r00))+((new_r10*sj16))+(((-1.0)*x566)));
evalcond[3]=((((-1.0)*new_r00*x565))+(((-1.0)*x563))+((cj16*new_r10)));
evalcond[4]=(((cj16*new_r11))+(((-1.0)*x566))+(((-1.0)*new_r01*x565)));
evalcond[5]=((((-1.0)*x570))+x567+new_r00);
evalcond[6]=((((-1.0)*x570))+x567+new_r11);
evalcond[7]=((((-1.0)*x564*x565))+(((-1.0)*x568))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x571=((1.0)*new_r00);
if( IKabs(((((-1.0)*sj16*x571))+((cj16*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj16))+(((-1.0)*cj16*x571)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj16*x571))+((cj16*new_r01))))+IKsqr(((((-1.0)*new_r01*sj16))+(((-1.0)*cj16*x571))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-1.0)*sj16*x571))+((cj16*new_r01))), ((((-1.0)*new_r01*sj16))+(((-1.0)*cj16*x571))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x572=IKcos(j18);
IkReal x573=IKsin(j18);
IkReal x574=((1.0)*sj16);
IkReal x575=((1.0)*x573);
IkReal x576=(sj16*x572);
IkReal x577=(cj16*x572);
IkReal x578=(cj16*x575);
evalcond[0]=(x572+((cj16*new_r00))+((new_r10*sj16)));
evalcond[1]=((((-1.0)*x575))+((cj16*new_r01))+((new_r11*sj16)));
evalcond[2]=(((sj16*x573))+x577+new_r00);
evalcond[3]=((((-1.0)*x575))+(((-1.0)*new_r00*x574))+((cj16*new_r10)));
evalcond[4]=((((-1.0)*x572))+(((-1.0)*new_r01*x574))+((cj16*new_r11)));
evalcond[5]=((((-1.0)*x578))+x576+new_r01);
evalcond[6]=((((-1.0)*x578))+x576+new_r10);
evalcond[7]=((((-1.0)*x573*x574))+(((-1.0)*x577))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j16))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r10, new_r11);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x579=IKcos(j18);
IkReal x580=IKsin(j18);
IkReal x581=((1.0)*sj17);
IkReal x582=((1.0)*x579);
IkReal x583=((1.0)*x580);
evalcond[0]=(((sj17*x579))+new_r20);
evalcond[1]=(new_r10+(((-1.0)*x583)));
evalcond[2]=(new_r11+(((-1.0)*x582)));
evalcond[3]=(new_r01+((cj17*x580)));
evalcond[4]=((((-1.0)*x580*x581))+new_r21);
evalcond[5]=((((-1.0)*cj17*x582))+new_r00);
evalcond[6]=((((-1.0)*new_r21*x581))+x580+((cj17*new_r01)));
evalcond[7]=((((-1.0)*new_r20*x581))+(((-1.0)*x582))+((cj17*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j16)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[3];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
j18eval[0]=sj17;
j18eval[1]=IKsign(sj17);
j18eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  || IKabs(j18eval[2]) < 0.0000010000000000  )
{
{
IkReal j18eval[1];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
j18eval[0]=sj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal j18eval[2];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
j18eval[0]=cj17;
j18eval[1]=sj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x584=IKcos(j18);
IkReal x585=((1.0)*(IKsin(j18)));
evalcond[0]=(x584+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x585)));
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x585)));
evalcond[3]=((((-1.0)*x584))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x586=IKsin(j18);
IkReal x587=((1.0)*(IKcos(j18)));
evalcond[0]=(x586+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x587)));
evalcond[2]=((((-1.0)*x586))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j17))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x588=IKsin(j18);
IkReal x589=((1.0)*(IKcos(j18)));
evalcond[0]=(x588+(((-1.0)*new_r01)));
evalcond[1]=((((-1.0)*x588))+(((-1.0)*new_r10)));
evalcond[2]=((((-1.0)*new_r11))+(((-1.0)*x589)));
evalcond[3]=((((-1.0)*new_r00))+(((-1.0)*x589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r10), new_r00);
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x590=IKcos(j18);
IkReal x591=((1.0)*(IKsin(j18)));
evalcond[0]=(x590+(((-1.0)*new_r00)));
evalcond[1]=((((-1.0)*x591))+(((-1.0)*new_r10)));
evalcond[2]=((((-1.0)*x590))+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x591))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[6];
IkReal x592=IKsin(j18);
IkReal x593=IKcos(j18);
IkReal x594=((-1.0)*x593);
evalcond[0]=x592;
evalcond[1]=(new_r22*x592);
evalcond[2]=x594;
evalcond[3]=(new_r22*x594);
evalcond[4]=((((-1.0)*x592))+(((-1.0)*new_r10)));
evalcond[5]=((((-1.0)*x593))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j18]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x595=IKPowWithIntegerCheck(cj17,-1);
if(!x595.valid){
continue;
}
CheckValue<IkReal> x596=IKPowWithIntegerCheck(sj17,-1);
if(!x596.valid){
continue;
}
if( IKabs((new_r01*(x595.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x596.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r01*(x595.value)))+IKsqr(((-1.0)*new_r20*(x596.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2((new_r01*(x595.value)), ((-1.0)*new_r20*(x596.value)));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x597=IKsin(j18);
IkReal x598=IKcos(j18);
IkReal x599=((1.0)*sj17);
IkReal x600=((1.0)*new_r00);
IkReal x601=((1.0)*new_r01);
IkReal x602=((1.0)*x598);
IkReal x603=((1.0)*x597);
evalcond[0]=(new_r20+((sj17*x598)));
evalcond[1]=((((-1.0)*x597*x599))+new_r21);
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x603)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x602)));
evalcond[4]=(((cj17*x597))+(((-1.0)*x601)));
evalcond[5]=((((-1.0)*cj17*x602))+(((-1.0)*x600)));
evalcond[6]=((((-1.0)*new_r21*x599))+(((-1.0)*cj17*x601))+x597);
evalcond[7]=((((-1.0)*new_r20*x599))+(((-1.0)*cj17*x600))+(((-1.0)*x602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x604=IKPowWithIntegerCheck(sj17,-1);
if(!x604.valid){
continue;
}
if( IKabs((new_r21*(x604.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r21*(x604.value)))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2((new_r21*(x604.value)), ((-1.0)*new_r11));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x605=IKsin(j18);
IkReal x606=IKcos(j18);
IkReal x607=((1.0)*sj17);
IkReal x608=((1.0)*new_r00);
IkReal x609=((1.0)*new_r01);
IkReal x610=((1.0)*x606);
IkReal x611=((1.0)*x605);
evalcond[0]=(((sj17*x606))+new_r20);
evalcond[1]=((((-1.0)*x605*x607))+new_r21);
evalcond[2]=((((-1.0)*x611))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x610))+(((-1.0)*new_r11)));
evalcond[4]=(((cj17*x605))+(((-1.0)*x609)));
evalcond[5]=((((-1.0)*cj17*x610))+(((-1.0)*x608)));
evalcond[6]=((((-1.0)*cj17*x609))+x605+(((-1.0)*new_r21*x607)));
evalcond[7]=((((-1.0)*new_r20*x607))+(((-1.0)*cj17*x608))+(((-1.0)*x610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x612 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x612.valid){
continue;
}
CheckValue<IkReal> x613=IKPowWithIntegerCheck(IKsign(sj17),-1);
if(!x613.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x612.value)+(((1.5707963267949)*(x613.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[8];
IkReal x614=IKsin(j18);
IkReal x615=IKcos(j18);
IkReal x616=((1.0)*sj17);
IkReal x617=((1.0)*new_r00);
IkReal x618=((1.0)*new_r01);
IkReal x619=((1.0)*x615);
IkReal x620=((1.0)*x614);
evalcond[0]=(((sj17*x615))+new_r20);
evalcond[1]=((((-1.0)*x614*x616))+new_r21);
evalcond[2]=((((-1.0)*x620))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x619))+(((-1.0)*new_r11)));
evalcond[4]=(((cj17*x614))+(((-1.0)*x618)));
evalcond[5]=((((-1.0)*cj17*x619))+(((-1.0)*x617)));
evalcond[6]=((((-1.0)*new_r21*x616))+(((-1.0)*cj17*x618))+x614);
evalcond[7]=((((-1.0)*cj17*x617))+(((-1.0)*x619))+(((-1.0)*new_r20*x616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j18eval[0]=1.0;
if( IKabs(j18eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j18]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j18array[2], cj18array[2], sj18array[2], tempj18array[1];
int numsolutions = 0;
for(int ij18 = 0; ij18 < numroots; ++ij18)
{
IkReal htj18 = zeror[ij18];
tempj18array[0]=((2.0)*(atan(htj18)));
for(int kj18 = 0; kj18 < 1; ++kj18)
{
j18array[numsolutions] = tempj18array[kj18];
if( j18array[numsolutions] > IKPI )
{
    j18array[numsolutions]-=IK2PI;
}
else if( j18array[numsolutions] < -IKPI )
{
    j18array[numsolutions]+=IK2PI;
}
sj18array[numsolutions] = IKsin(j18array[numsolutions]);
cj18array[numsolutions] = IKcos(j18array[numsolutions]);
numsolutions++;
}
}
bool j18valid[2]={true,true};
_nj18 = 2;
for(int ij18 = 0; ij18 < numsolutions; ++ij18)
    {
if( !j18valid[ij18] )
{
    continue;
}
    j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
htj18 = IKtan(j18/2);

_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < numsolutions; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j18]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x622=IKPowWithIntegerCheck(sj17,-1);
if(!x622.valid){
continue;
}
IkReal x621=x622.value;
CheckValue<IkReal> x623=IKPowWithIntegerCheck(cj16,-1);
if(!x623.valid){
continue;
}
CheckValue<IkReal> x624=IKPowWithIntegerCheck(cj17,-1);
if(!x624.valid){
continue;
}
if( IKabs((x621*(x623.value)*(x624.value)*(((((-1.0)*new_r01*sj17))+((new_r20*sj16)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x621)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x621*(x623.value)*(x624.value)*(((((-1.0)*new_r01*sj17))+((new_r20*sj16))))))+IKsqr(((-1.0)*new_r20*x621))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2((x621*(x623.value)*(x624.value)*(((((-1.0)*new_r01*sj17))+((new_r20*sj16))))), ((-1.0)*new_r20*x621));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[12];
IkReal x625=IKsin(j18);
IkReal x626=IKcos(j18);
IkReal x627=((1.0)*sj16);
IkReal x628=((1.0)*sj17);
IkReal x629=(new_r10*sj16);
IkReal x630=(cj16*new_r01);
IkReal x631=(new_r11*sj16);
IkReal x632=(cj16*new_r00);
IkReal x633=((1.0)*x626);
IkReal x634=((1.0)*x625);
IkReal x635=(sj16*x625);
IkReal x636=(cj17*x625);
evalcond[0]=(new_r20+((sj17*x626)));
evalcond[1]=((((-1.0)*x625*x628))+new_r21);
evalcond[2]=(x636+x630+x631);
evalcond[3]=((((-1.0)*new_r00*x627))+(((-1.0)*x634))+((cj16*new_r10)));
evalcond[4]=((((-1.0)*new_r01*x627))+(((-1.0)*x633))+((cj16*new_r11)));
evalcond[5]=(((sj16*x626))+((cj16*x636))+new_r01);
evalcond[6]=(x629+x632+(((-1.0)*cj17*x633)));
evalcond[7]=((((-1.0)*cj16*cj17*x633))+x635+new_r00);
evalcond[8]=((((-1.0)*cj16*x633))+((cj17*x635))+new_r11);
evalcond[9]=((((-1.0)*cj16*x634))+(((-1.0)*cj17*x626*x627))+new_r10);
evalcond[10]=(((cj17*x631))+((cj17*x630))+(((-1.0)*new_r21*x628))+x625);
evalcond[11]=((((-1.0)*x633))+((cj17*x632))+((cj17*x629))+(((-1.0)*new_r20*x628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x638=IKPowWithIntegerCheck(sj17,-1);
if(!x638.valid){
continue;
}
IkReal x637=x638.value;
CheckValue<IkReal> x639=IKPowWithIntegerCheck(sj16,-1);
if(!x639.valid){
continue;
}
if( IKabs((x637*(x639.value)*(((((-1.0)*new_r00*sj17))+(((-1.0)*cj16*cj17*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x637)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x637*(x639.value)*(((((-1.0)*new_r00*sj17))+(((-1.0)*cj16*cj17*new_r20))))))+IKsqr(((-1.0)*new_r20*x637))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2((x637*(x639.value)*(((((-1.0)*new_r00*sj17))+(((-1.0)*cj16*cj17*new_r20))))), ((-1.0)*new_r20*x637));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[12];
IkReal x640=IKsin(j18);
IkReal x641=IKcos(j18);
IkReal x642=((1.0)*sj16);
IkReal x643=((1.0)*sj17);
IkReal x644=(new_r10*sj16);
IkReal x645=(cj16*new_r01);
IkReal x646=(new_r11*sj16);
IkReal x647=(cj16*new_r00);
IkReal x648=((1.0)*x641);
IkReal x649=((1.0)*x640);
IkReal x650=(sj16*x640);
IkReal x651=(cj17*x640);
evalcond[0]=(((sj17*x641))+new_r20);
evalcond[1]=((((-1.0)*x640*x643))+new_r21);
evalcond[2]=(x646+x645+x651);
evalcond[3]=((((-1.0)*x649))+(((-1.0)*new_r00*x642))+((cj16*new_r10)));
evalcond[4]=((((-1.0)*x648))+(((-1.0)*new_r01*x642))+((cj16*new_r11)));
evalcond[5]=(((cj16*x651))+new_r01+((sj16*x641)));
evalcond[6]=((((-1.0)*cj17*x648))+x647+x644);
evalcond[7]=((((-1.0)*cj16*cj17*x648))+x650+new_r00);
evalcond[8]=(((cj17*x650))+new_r11+(((-1.0)*cj16*x648)));
evalcond[9]=((((-1.0)*cj17*x641*x642))+new_r10+(((-1.0)*cj16*x649)));
evalcond[10]=(((cj17*x646))+((cj17*x645))+(((-1.0)*new_r21*x643))+x640);
evalcond[11]=(((cj17*x647))+((cj17*x644))+(((-1.0)*x648))+(((-1.0)*new_r20*x643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x652 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x652.valid){
continue;
}
CheckValue<IkReal> x653=IKPowWithIntegerCheck(IKsign(sj17),-1);
if(!x653.valid){
continue;
}
j18array[0]=((-1.5707963267949)+(x652.value)+(((1.5707963267949)*(x653.value))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[12];
IkReal x654=IKsin(j18);
IkReal x655=IKcos(j18);
IkReal x656=((1.0)*sj16);
IkReal x657=((1.0)*sj17);
IkReal x658=(new_r10*sj16);
IkReal x659=(cj16*new_r01);
IkReal x660=(new_r11*sj16);
IkReal x661=(cj16*new_r00);
IkReal x662=((1.0)*x655);
IkReal x663=((1.0)*x654);
IkReal x664=(sj16*x654);
IkReal x665=(cj17*x654);
evalcond[0]=(new_r20+((sj17*x655)));
evalcond[1]=(new_r21+(((-1.0)*x654*x657)));
evalcond[2]=(x659+x660+x665);
evalcond[3]=((((-1.0)*new_r00*x656))+(((-1.0)*x663))+((cj16*new_r10)));
evalcond[4]=((((-1.0)*new_r01*x656))+(((-1.0)*x662))+((cj16*new_r11)));
evalcond[5]=(((cj16*x665))+((sj16*x655))+new_r01);
evalcond[6]=((((-1.0)*cj17*x662))+x658+x661);
evalcond[7]=((((-1.0)*cj16*cj17*x662))+x664+new_r00);
evalcond[8]=(((cj17*x664))+new_r11+(((-1.0)*cj16*x662)));
evalcond[9]=((((-1.0)*cj17*x655*x656))+new_r10+(((-1.0)*cj16*x663)));
evalcond[10]=(((cj17*x660))+((cj17*x659))+x654+(((-1.0)*new_r21*x657)));
evalcond[11]=(((cj17*x661))+((cj17*x658))+(((-1.0)*new_r20*x657))+(((-1.0)*x662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j18;
vinfos[6].indices[0] = _ij18[0];
vinfos[6].indices[1] = _ij18[1];
vinfos[6].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+3, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+4, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - r300 (37dca05bfcc6586f17a19d28f444da97)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004b"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
